
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005494  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00005494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000134  20000070  00005504  00020070  2**2
                  ALLOC
  3 .stack        00002004  200001a4  00005638  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00031f0f  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000044a1  00000000  00000000  00052000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000069b4  00000000  00000000  000564a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000670  00000000  00000000  0005ce55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000768  00000000  00000000  0005d4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ae5a  00000000  00000000  0005dc2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e7dc  00000000  00000000  00078a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088a0b  00000000  00000000  00087263  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000018b4  00000000  00000000  0010fc70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 21 00 20 f1 21 00 00 ed 21 00 00 ed 21 00 00     .!. .!...!...!..
	...
      2c:	ed 21 00 00 00 00 00 00 00 00 00 00 ed 21 00 00     .!...........!..
      3c:	ed 21 00 00 ed 21 00 00 ed 21 00 00 ed 21 00 00     .!...!...!...!..
      4c:	ed 21 00 00 ed 21 00 00 ed 21 00 00 ed 21 00 00     .!...!...!...!..
      5c:	ed 21 00 00 ed 21 00 00 e5 1a 00 00 f5 1a 00 00     .!...!..........
      6c:	05 1b 00 00 15 1b 00 00 25 1b 00 00 35 1b 00 00     ........%...5...
      7c:	ed 21 00 00 ed 21 00 00 ed 21 00 00 ed 21 00 00     .!...!...!...!..
      8c:	ed 21 00 00 ed 21 00 00 00 00 00 00 00 00 00 00     .!...!..........
      9c:	85 05 00 00 ed 21 00 00 ed 21 00 00 ed 21 00 00     .....!...!...!..
      ac:	ed 21 00 00 00 00 00 00                             .!......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00005494 	.word	0x00005494

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00005494 	.word	0x00005494
     10c:	00005494 	.word	0x00005494
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     12c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     146:	3c06      	subs	r4, #6
     148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     14e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     150:	232b      	movs	r3, #43	; 0x2b
     152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     154:	3301      	adds	r3, #1
     156:	54c1      	strb	r1, [r0, r3]
}
     158:	bd10      	pop	{r4, pc}
	...

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46d6      	mov	lr, sl
     160:	464f      	mov	r7, r9
     162:	4646      	mov	r6, r8
     164:	b5c0      	push	{r6, r7, lr}
     166:	b096      	sub	sp, #88	; 0x58
     168:	0007      	movs	r7, r0
     16a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16e:	4ac6      	ldr	r2, [pc, #792]	; (488 <adc_init+0x32c>)
     170:	6a10      	ldr	r0, [r2, #32]
     172:	2380      	movs	r3, #128	; 0x80
     174:	025b      	lsls	r3, r3, #9
     176:	4303      	orrs	r3, r0
     178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d505      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     182:	b016      	add	sp, #88	; 0x58
     184:	bc1c      	pop	{r2, r3, r4}
     186:	4690      	mov	r8, r2
     188:	4699      	mov	r9, r3
     18a:	46a2      	mov	sl, r4
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     192:	079b      	lsls	r3, r3, #30
     194:	d4f5      	bmi.n	182 <adc_init+0x26>
	module_inst->reference = config->reference;
     196:	7873      	ldrb	r3, [r6, #1]
     198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     19a:	2b00      	cmp	r3, #0
     19c:	d104      	bne.n	1a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19e:	4abb      	ldr	r2, [pc, #748]	; (48c <adc_init+0x330>)
     1a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1a2:	2104      	movs	r1, #4
     1a4:	430b      	orrs	r3, r1
     1a6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1a8:	2300      	movs	r3, #0
     1aa:	60bb      	str	r3, [r7, #8]
     1ac:	60fb      	str	r3, [r7, #12]
     1ae:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1b0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1b2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1b4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1b6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1b8:	4bb5      	ldr	r3, [pc, #724]	; (490 <adc_init+0x334>)
     1ba:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1bc:	232a      	movs	r3, #42	; 0x2a
     1be:	5cf3      	ldrb	r3, [r6, r3]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d105      	bne.n	1d0 <adc_init+0x74>
     1c4:	7d33      	ldrb	r3, [r6, #20]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d102      	bne.n	1d0 <adc_init+0x74>
		module_inst->software_trigger = true;
     1ca:	3301      	adds	r3, #1
     1cc:	777b      	strb	r3, [r7, #29]
     1ce:	e001      	b.n	1d4 <adc_init+0x78>
		module_inst->software_trigger = false;
     1d0:	2300      	movs	r3, #0
     1d2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     1d4:	683b      	ldr	r3, [r7, #0]
     1d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1d8:	7833      	ldrb	r3, [r6, #0]
     1da:	466a      	mov	r2, sp
     1dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1de:	4669      	mov	r1, sp
     1e0:	201e      	movs	r0, #30
     1e2:	4bac      	ldr	r3, [pc, #688]	; (494 <adc_init+0x338>)
     1e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1e6:	201e      	movs	r0, #30
     1e8:	4bab      	ldr	r3, [pc, #684]	; (498 <adc_init+0x33c>)
     1ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     1ec:	232c      	movs	r3, #44	; 0x2c
     1ee:	5cf2      	ldrb	r2, [r6, r3]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d054      	beq.n	29e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1f4:	3b01      	subs	r3, #1
     1f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     1f8:	7b33      	ldrb	r3, [r6, #12]
     1fa:	18eb      	adds	r3, r5, r3
     1fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     1fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     200:	b2c9      	uxtb	r1, r1
     202:	428b      	cmp	r3, r1
     204:	d221      	bcs.n	24a <adc_init+0xee>
     206:	1952      	adds	r2, r2, r5
     208:	b2d3      	uxtb	r3, r2
     20a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     20c:	4ba3      	ldr	r3, [pc, #652]	; (49c <adc_init+0x340>)
     20e:	469a      	mov	sl, r3
     210:	e003      	b.n	21a <adc_init+0xbe>
			offset++;
     212:	3501      	adds	r5, #1
     214:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     216:	454d      	cmp	r5, r9
     218:	d017      	beq.n	24a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     21a:	240f      	movs	r4, #15
     21c:	402c      	ands	r4, r5
     21e:	7b33      	ldrb	r3, [r6, #12]
     220:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     222:	2250      	movs	r2, #80	; 0x50
     224:	499e      	ldr	r1, [pc, #632]	; (4a0 <adc_init+0x344>)
     226:	a802      	add	r0, sp, #8
     228:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     22a:	2c13      	cmp	r4, #19
     22c:	d8f1      	bhi.n	212 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     22e:	00a4      	lsls	r4, r4, #2
     230:	ab02      	add	r3, sp, #8
     232:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     234:	a901      	add	r1, sp, #4
     236:	2300      	movs	r3, #0
     238:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     23a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     23c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     23e:	3301      	adds	r3, #1
     240:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     242:	b2c0      	uxtb	r0, r0
     244:	4b97      	ldr	r3, [pc, #604]	; (4a4 <adc_init+0x348>)
     246:	4798      	blx	r3
     248:	e7e3      	b.n	212 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     24a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     24c:	2250      	movs	r2, #80	; 0x50
     24e:	4994      	ldr	r1, [pc, #592]	; (4a0 <adc_init+0x344>)
     250:	a802      	add	r0, sp, #8
     252:	4b92      	ldr	r3, [pc, #584]	; (49c <adc_init+0x340>)
     254:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     256:	2c13      	cmp	r4, #19
     258:	d913      	bls.n	282 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     25a:	7d73      	ldrb	r3, [r6, #21]
     25c:	009b      	lsls	r3, r3, #2
     25e:	b2db      	uxtb	r3, r3
     260:	4642      	mov	r2, r8
     262:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     264:	7db3      	ldrb	r3, [r6, #22]
     266:	01db      	lsls	r3, r3, #7
     268:	7872      	ldrb	r2, [r6, #1]
     26a:	4313      	orrs	r3, r2
     26c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     26e:	4642      	mov	r2, r8
     270:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     272:	7933      	ldrb	r3, [r6, #4]
     274:	2b34      	cmp	r3, #52	; 0x34
     276:	d900      	bls.n	27a <adc_init+0x11e>
     278:	e17b      	b.n	572 <adc_init+0x416>
     27a:	009b      	lsls	r3, r3, #2
     27c:	4a8a      	ldr	r2, [pc, #552]	; (4a8 <adc_init+0x34c>)
     27e:	58d3      	ldr	r3, [r2, r3]
     280:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     282:	00a4      	lsls	r4, r4, #2
     284:	ab02      	add	r3, sp, #8
     286:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     288:	a901      	add	r1, sp, #4
     28a:	2300      	movs	r3, #0
     28c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     28e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     290:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     292:	3301      	adds	r3, #1
     294:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     296:	b2c0      	uxtb	r0, r0
     298:	4b82      	ldr	r3, [pc, #520]	; (4a4 <adc_init+0x348>)
     29a:	4798      	blx	r3
     29c:	e7dd      	b.n	25a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     29e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2a0:	2250      	movs	r2, #80	; 0x50
     2a2:	497f      	ldr	r1, [pc, #508]	; (4a0 <adc_init+0x344>)
     2a4:	a802      	add	r0, sp, #8
     2a6:	4b7d      	ldr	r3, [pc, #500]	; (49c <adc_init+0x340>)
     2a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2aa:	2c13      	cmp	r4, #19
     2ac:	d915      	bls.n	2da <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2b0:	2250      	movs	r2, #80	; 0x50
     2b2:	497b      	ldr	r1, [pc, #492]	; (4a0 <adc_init+0x344>)
     2b4:	a802      	add	r0, sp, #8
     2b6:	4b79      	ldr	r3, [pc, #484]	; (49c <adc_init+0x340>)
     2b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ba:	2c13      	cmp	r4, #19
     2bc:	d8cd      	bhi.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab02      	add	r3, sp, #8
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	a901      	add	r1, sp, #4
     2c6:	2300      	movs	r3, #0
     2c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4b73      	ldr	r3, [pc, #460]	; (4a4 <adc_init+0x348>)
     2d6:	4798      	blx	r3
     2d8:	e7bf      	b.n	25a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2da:	00a4      	lsls	r4, r4, #2
     2dc:	ab02      	add	r3, sp, #8
     2de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2300      	movs	r3, #0
     2e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2ea:	3301      	adds	r3, #1
     2ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2ee:	b2c0      	uxtb	r0, r0
     2f0:	4b6c      	ldr	r3, [pc, #432]	; (4a4 <adc_init+0x348>)
     2f2:	4798      	blx	r3
     2f4:	e7db      	b.n	2ae <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     2f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2fa:	2102      	movs	r1, #2
     2fc:	e01a      	b.n	334 <adc_init+0x1d8>
		adjres = config->divide_result;
     2fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     300:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     302:	2410      	movs	r4, #16
     304:	e016      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     306:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     308:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     30a:	2101      	movs	r1, #1
     30c:	e012      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     30e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     310:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     312:	2100      	movs	r1, #0
     314:	e00e      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     316:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     318:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     31a:	2100      	movs	r1, #0
     31c:	e00a      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     31e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     320:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     322:	2100      	movs	r1, #0
     324:	e006      	b.n	334 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     326:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     328:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     32a:	2100      	movs	r1, #0
     32c:	e002      	b.n	334 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     32e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     330:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     332:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     334:	0109      	lsls	r1, r1, #4
     336:	2270      	movs	r2, #112	; 0x70
     338:	400a      	ands	r2, r1
     33a:	4313      	orrs	r3, r2
     33c:	4642      	mov	r2, r8
     33e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     340:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     342:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     344:	2b3f      	cmp	r3, #63	; 0x3f
     346:	d900      	bls.n	34a <adc_init+0x1ee>
     348:	e71b      	b.n	182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     34a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     34c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     34e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     356:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     358:	8872      	ldrh	r2, [r6, #2]
     35a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     35c:	2224      	movs	r2, #36	; 0x24
     35e:	5cb2      	ldrb	r2, [r6, r2]
     360:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     362:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     364:	7d32      	ldrb	r2, [r6, #20]
     366:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     368:	4313      	orrs	r3, r2
     36a:	7cb2      	ldrb	r2, [r6, #18]
     36c:	0052      	lsls	r2, r2, #1
     36e:	4313      	orrs	r3, r2
     370:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     372:	4642      	mov	r2, r8
     374:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     376:	7e33      	ldrb	r3, [r6, #24]
     378:	2b00      	cmp	r3, #0
     37a:	d020      	beq.n	3be <adc_init+0x262>
		switch (resolution) {
     37c:	2c10      	cmp	r4, #16
     37e:	d100      	bne.n	382 <adc_init+0x226>
     380:	e0d9      	b.n	536 <adc_init+0x3da>
     382:	d800      	bhi.n	386 <adc_init+0x22a>
     384:	e098      	b.n	4b8 <adc_init+0x35c>
     386:	2c20      	cmp	r4, #32
     388:	d100      	bne.n	38c <adc_init+0x230>
     38a:	e0b6      	b.n	4fa <adc_init+0x39e>
     38c:	2c30      	cmp	r4, #48	; 0x30
     38e:	d116      	bne.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     390:	7cf2      	ldrb	r2, [r6, #19]
     392:	2a00      	cmp	r2, #0
     394:	d00a      	beq.n	3ac <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     396:	69f2      	ldr	r2, [r6, #28]
     398:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     39a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	d900      	bls.n	3a2 <adc_init+0x246>
     3a0:	e6ef      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3a2:	6a32      	ldr	r2, [r6, #32]
     3a4:	3280      	adds	r2, #128	; 0x80
     3a6:	2aff      	cmp	r2, #255	; 0xff
     3a8:	d900      	bls.n	3ac <adc_init+0x250>
     3aa:	e6ea      	b.n	182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3ae:	69f2      	ldr	r2, [r6, #28]
     3b0:	2aff      	cmp	r2, #255	; 0xff
     3b2:	dd00      	ble.n	3b6 <adc_init+0x25a>
     3b4:	e6e5      	b.n	182 <adc_init+0x26>
     3b6:	6a32      	ldr	r2, [r6, #32]
     3b8:	2aff      	cmp	r2, #255	; 0xff
     3ba:	dd00      	ble.n	3be <adc_init+0x262>
     3bc:	e6e1      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     3c2:	b252      	sxtb	r2, r2
     3c4:	2a00      	cmp	r2, #0
     3c6:	dbfb      	blt.n	3c0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     3c8:	4642      	mov	r2, r8
     3ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3d0:	b25b      	sxtb	r3, r3
     3d2:	2b00      	cmp	r3, #0
     3d4:	dbfb      	blt.n	3ce <adc_init+0x272>
	adc_module->WINLT.reg =
     3d6:	8bb3      	ldrh	r3, [r6, #28]
     3d8:	4642      	mov	r2, r8
     3da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e0:	b25b      	sxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	dbfb      	blt.n	3de <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3e6:	8c33      	ldrh	r3, [r6, #32]
     3e8:	4642      	mov	r2, r8
     3ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     3ec:	232c      	movs	r3, #44	; 0x2c
     3ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     3f0:	2b00      	cmp	r3, #0
     3f2:	d005      	beq.n	400 <adc_init+0x2a4>
		inputs_to_scan--;
     3f4:	3b01      	subs	r3, #1
     3f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     3f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3fa:	2b0f      	cmp	r3, #15
     3fc:	d900      	bls.n	400 <adc_init+0x2a4>
     3fe:	e6c0      	b.n	182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     400:	222b      	movs	r2, #43	; 0x2b
     402:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     404:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     406:	290f      	cmp	r1, #15
     408:	d900      	bls.n	40c <adc_init+0x2b0>
     40a:	e6ba      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     40c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     40e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     410:	b252      	sxtb	r2, r2
     412:	2a00      	cmp	r2, #0
     414:	dbfb      	blt.n	40e <adc_init+0x2b2>
			config->negative_input |
     416:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     418:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     41a:	4302      	orrs	r2, r0
     41c:	68b0      	ldr	r0, [r6, #8]
     41e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     420:	0509      	lsls	r1, r1, #20
			config->negative_input |
     422:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     424:	041b      	lsls	r3, r3, #16
			config->negative_input |
     426:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     428:	4642      	mov	r2, r8
     42a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     42c:	232a      	movs	r3, #42	; 0x2a
     42e:	5cf3      	ldrb	r3, [r6, r3]
     430:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     432:	230f      	movs	r3, #15
     434:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     436:	3315      	adds	r3, #21
     438:	5cf3      	ldrb	r3, [r6, r3]
     43a:	2b00      	cmp	r3, #0
     43c:	d012      	beq.n	464 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     43e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     440:	4a1a      	ldr	r2, [pc, #104]	; (4ac <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     442:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     444:	4293      	cmp	r3, r2
     446:	d900      	bls.n	44a <adc_init+0x2ee>
     448:	e69b      	b.n	182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     44a:	4642      	mov	r2, r8
     44c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     44e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     450:	2380      	movs	r3, #128	; 0x80
     452:	011b      	lsls	r3, r3, #4
     454:	18d3      	adds	r3, r2, r3
     456:	4915      	ldr	r1, [pc, #84]	; (4ac <adc_init+0x350>)
     458:	b29b      	uxth	r3, r3
     45a:	428b      	cmp	r3, r1
     45c:	d900      	bls.n	460 <adc_init+0x304>
     45e:	e690      	b.n	182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     460:	4643      	mov	r3, r8
     462:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     464:	4b12      	ldr	r3, [pc, #72]	; (4b0 <adc_init+0x354>)
     466:	681b      	ldr	r3, [r3, #0]
     468:	015b      	lsls	r3, r3, #5
     46a:	22e0      	movs	r2, #224	; 0xe0
     46c:	00d2      	lsls	r2, r2, #3
     46e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     470:	4a10      	ldr	r2, [pc, #64]	; (4b4 <adc_init+0x358>)
     472:	6851      	ldr	r1, [r2, #4]
     474:	0149      	lsls	r1, r1, #5
     476:	6812      	ldr	r2, [r2, #0]
     478:	0ed2      	lsrs	r2, r2, #27
     47a:	430a      	orrs	r2, r1
     47c:	b2d2      	uxtb	r2, r2
			) |
     47e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     480:	4642      	mov	r2, r8
     482:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     484:	2000      	movs	r0, #0
     486:	e67c      	b.n	182 <adc_init+0x26>
     488:	40000400 	.word	0x40000400
     48c:	40000800 	.word	0x40000800
     490:	200000dc 	.word	0x200000dc
     494:	00002095 	.word	0x00002095
     498:	00002009 	.word	0x00002009
     49c:	00004181 	.word	0x00004181
     4a0:	0000525c 	.word	0x0000525c
     4a4:	0000218d 	.word	0x0000218d
     4a8:	00005188 	.word	0x00005188
     4ac:	00000fff 	.word	0x00000fff
     4b0:	00806024 	.word	0x00806024
     4b4:	00806020 	.word	0x00806020
		switch (resolution) {
     4b8:	2c00      	cmp	r4, #0
     4ba:	d000      	beq.n	4be <adc_init+0x362>
     4bc:	e77f      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4be:	7cf2      	ldrb	r2, [r6, #19]
     4c0:	2a00      	cmp	r2, #0
     4c2:	d00f      	beq.n	4e4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     4c4:	69f2      	ldr	r2, [r6, #28]
     4c6:	2180      	movs	r1, #128	; 0x80
     4c8:	0109      	lsls	r1, r1, #4
     4ca:	468c      	mov	ip, r1
     4cc:	4462      	add	r2, ip
			if (config->differential_mode &&
     4ce:	492a      	ldr	r1, [pc, #168]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4d2:	428a      	cmp	r2, r1
     4d4:	d900      	bls.n	4d8 <adc_init+0x37c>
     4d6:	e654      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4d8:	6a32      	ldr	r2, [r6, #32]
     4da:	4462      	add	r2, ip
     4dc:	4926      	ldr	r1, [pc, #152]	; (578 <adc_init+0x41c>)
     4de:	428a      	cmp	r2, r1
     4e0:	d900      	bls.n	4e4 <adc_init+0x388>
     4e2:	e64e      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4e4:	4a24      	ldr	r2, [pc, #144]	; (578 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     4e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4e8:	69f1      	ldr	r1, [r6, #28]
     4ea:	4291      	cmp	r1, r2
     4ec:	dd00      	ble.n	4f0 <adc_init+0x394>
     4ee:	e648      	b.n	182 <adc_init+0x26>
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	4291      	cmp	r1, r2
     4f4:	dd00      	ble.n	4f8 <adc_init+0x39c>
     4f6:	e644      	b.n	182 <adc_init+0x26>
     4f8:	e761      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     4fa:	7cf2      	ldrb	r2, [r6, #19]
     4fc:	2a00      	cmp	r2, #0
     4fe:	d00f      	beq.n	520 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     500:	69f2      	ldr	r2, [r6, #28]
     502:	2180      	movs	r1, #128	; 0x80
     504:	0089      	lsls	r1, r1, #2
     506:	468c      	mov	ip, r1
     508:	4462      	add	r2, ip
			if (config->differential_mode &&
     50a:	491c      	ldr	r1, [pc, #112]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     50c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     50e:	428a      	cmp	r2, r1
     510:	d900      	bls.n	514 <adc_init+0x3b8>
     512:	e636      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     514:	6a32      	ldr	r2, [r6, #32]
     516:	4462      	add	r2, ip
     518:	4918      	ldr	r1, [pc, #96]	; (57c <adc_init+0x420>)
     51a:	428a      	cmp	r2, r1
     51c:	d900      	bls.n	520 <adc_init+0x3c4>
     51e:	e630      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     520:	4a16      	ldr	r2, [pc, #88]	; (57c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     522:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     524:	69f1      	ldr	r1, [r6, #28]
     526:	4291      	cmp	r1, r2
     528:	dd00      	ble.n	52c <adc_init+0x3d0>
     52a:	e62a      	b.n	182 <adc_init+0x26>
     52c:	6a31      	ldr	r1, [r6, #32]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <adc_init+0x3d8>
     532:	e626      	b.n	182 <adc_init+0x26>
     534:	e743      	b.n	3be <adc_init+0x262>
			if (config->differential_mode &&
     536:	7cf2      	ldrb	r2, [r6, #19]
     538:	2a00      	cmp	r2, #0
     53a:	d00f      	beq.n	55c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     53c:	69f2      	ldr	r2, [r6, #28]
     53e:	2180      	movs	r1, #128	; 0x80
     540:	0209      	lsls	r1, r1, #8
     542:	468c      	mov	ip, r1
     544:	4462      	add	r2, ip
			if (config->differential_mode &&
     546:	490e      	ldr	r1, [pc, #56]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			if (config->differential_mode &&
     54a:	428a      	cmp	r2, r1
     54c:	d900      	bls.n	550 <adc_init+0x3f4>
     54e:	e618      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     550:	6a32      	ldr	r2, [r6, #32]
     552:	4462      	add	r2, ip
     554:	490a      	ldr	r1, [pc, #40]	; (580 <adc_init+0x424>)
     556:	428a      	cmp	r2, r1
     558:	d900      	bls.n	55c <adc_init+0x400>
     55a:	e612      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     560:	69f1      	ldr	r1, [r6, #28]
     562:	4291      	cmp	r1, r2
     564:	dd00      	ble.n	568 <adc_init+0x40c>
     566:	e60c      	b.n	182 <adc_init+0x26>
     568:	6a31      	ldr	r1, [r6, #32]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <adc_init+0x414>
     56e:	e608      	b.n	182 <adc_init+0x26>
     570:	e725      	b.n	3be <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     572:	2017      	movs	r0, #23
     574:	e605      	b.n	182 <adc_init+0x26>
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000fff 	.word	0x00000fff
     57c:	000003ff 	.word	0x000003ff
     580:	0000ffff 	.word	0x0000ffff

00000584 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     584:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     586:	4b2e      	ldr	r3, [pc, #184]	; (640 <ADC_Handler+0xbc>)
     588:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     58a:	6823      	ldr	r3, [r4, #0]
     58c:	7e1d      	ldrb	r5, [r3, #24]
     58e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     590:	07ea      	lsls	r2, r5, #31
     592:	d505      	bpl.n	5a0 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     594:	7ee2      	ldrb	r2, [r4, #27]
     596:	07d2      	lsls	r2, r2, #31
     598:	d502      	bpl.n	5a0 <ADC_Handler+0x1c>
     59a:	7ea2      	ldrb	r2, [r4, #26]
     59c:	07d2      	lsls	r2, r2, #31
     59e:	d416      	bmi.n	5ce <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     5a0:	076b      	lsls	r3, r5, #29
     5a2:	d508      	bpl.n	5b6 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     5a4:	2304      	movs	r3, #4
     5a6:	6822      	ldr	r2, [r4, #0]
     5a8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5aa:	7ee3      	ldrb	r3, [r4, #27]
     5ac:	079b      	lsls	r3, r3, #30
     5ae:	d502      	bpl.n	5b6 <ADC_Handler+0x32>
     5b0:	7ea3      	ldrb	r3, [r4, #26]
     5b2:	079b      	lsls	r3, r3, #30
     5b4:	d43c      	bmi.n	630 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5b6:	07ab      	lsls	r3, r5, #30
     5b8:	d508      	bpl.n	5cc <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5ba:	2302      	movs	r3, #2
     5bc:	6822      	ldr	r2, [r4, #0]
     5be:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5c0:	7ee3      	ldrb	r3, [r4, #27]
     5c2:	075b      	lsls	r3, r3, #29
     5c4:	d502      	bpl.n	5cc <ADC_Handler+0x48>
     5c6:	7ea3      	ldrb	r3, [r4, #26]
     5c8:	075b      	lsls	r3, r3, #29
     5ca:	d435      	bmi.n	638 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     5cc:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5ce:	2201      	movs	r2, #1
     5d0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     5d2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5d4:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     5d6:	b25b      	sxtb	r3, r3
     5d8:	2b00      	cmp	r3, #0
     5da:	dbfb      	blt.n	5d4 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     5dc:	6961      	ldr	r1, [r4, #20]
     5de:	1c8b      	adds	r3, r1, #2
     5e0:	6163      	str	r3, [r4, #20]
     5e2:	8b53      	ldrh	r3, [r2, #26]
     5e4:	b29b      	uxth	r3, r3
     5e6:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     5e8:	8b23      	ldrh	r3, [r4, #24]
     5ea:	3b01      	subs	r3, #1
     5ec:	b29b      	uxth	r3, r3
     5ee:	8323      	strh	r3, [r4, #24]
     5f0:	2b00      	cmp	r3, #0
     5f2:	d011      	beq.n	618 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     5f4:	7f63      	ldrb	r3, [r4, #29]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d0d2      	beq.n	5a0 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5fa:	6822      	ldr	r2, [r4, #0]
     5fc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5fe:	b25b      	sxtb	r3, r3
     600:	2b00      	cmp	r3, #0
     602:	dbfb      	blt.n	5fc <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     604:	7b13      	ldrb	r3, [r2, #12]
     606:	2102      	movs	r1, #2
     608:	430b      	orrs	r3, r1
     60a:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     60c:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     60e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     610:	b25b      	sxtb	r3, r3
     612:	2b00      	cmp	r3, #0
     614:	dbfb      	blt.n	60e <ADC_Handler+0x8a>
     616:	e7c3      	b.n	5a0 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     618:	7f23      	ldrb	r3, [r4, #28]
     61a:	2b05      	cmp	r3, #5
     61c:	d1c0      	bne.n	5a0 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     61e:	2300      	movs	r3, #0
     620:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     622:	3301      	adds	r3, #1
     624:	6822      	ldr	r2, [r4, #0]
     626:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     628:	0020      	movs	r0, r4
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	4798      	blx	r3
     62e:	e7b7      	b.n	5a0 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     630:	0020      	movs	r0, r4
     632:	68e3      	ldr	r3, [r4, #12]
     634:	4798      	blx	r3
     636:	e7be      	b.n	5b6 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     638:	6923      	ldr	r3, [r4, #16]
     63a:	0020      	movs	r0, r4
     63c:	4798      	blx	r3
}
     63e:	e7c5      	b.n	5cc <ADC_Handler+0x48>
     640:	200000dc 	.word	0x200000dc

00000644 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     644:	b500      	push	{lr}
     646:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     648:	ab01      	add	r3, sp, #4
     64a:	2280      	movs	r2, #128	; 0x80
     64c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     64e:	780a      	ldrb	r2, [r1, #0]
     650:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     652:	784a      	ldrb	r2, [r1, #1]
     654:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     656:	788a      	ldrb	r2, [r1, #2]
     658:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     65a:	0019      	movs	r1, r3
     65c:	4b01      	ldr	r3, [pc, #4]	; (664 <port_pin_set_config+0x20>)
     65e:	4798      	blx	r3
}
     660:	b003      	add	sp, #12
     662:	bd00      	pop	{pc}
     664:	0000218d 	.word	0x0000218d

00000668 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     668:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     66a:	2207      	movs	r2, #7
     66c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     66e:	421a      	tst	r2, r3
     670:	d1fc      	bne.n	66c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     672:	4770      	bx	lr

00000674 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     674:	b5f0      	push	{r4, r5, r6, r7, lr}
     676:	46d6      	mov	lr, sl
     678:	464f      	mov	r7, r9
     67a:	4646      	mov	r6, r8
     67c:	b5c0      	push	{r6, r7, lr}
     67e:	b08a      	sub	sp, #40	; 0x28
     680:	0006      	movs	r6, r0
     682:	000f      	movs	r7, r1
     684:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     686:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     688:	0008      	movs	r0, r1
     68a:	4ba0      	ldr	r3, [pc, #640]	; (90c <i2c_master_init+0x298>)
     68c:	4798      	blx	r3
     68e:	4aa0      	ldr	r2, [pc, #640]	; (910 <i2c_master_init+0x29c>)
     690:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     692:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     694:	2301      	movs	r3, #1
     696:	40ab      	lsls	r3, r5
     698:	430b      	orrs	r3, r1
     69a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     69c:	a909      	add	r1, sp, #36	; 0x24
     69e:	7b23      	ldrb	r3, [r4, #12]
     6a0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6a2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     6a4:	b2c5      	uxtb	r5, r0
     6a6:	0028      	movs	r0, r5
     6a8:	4b9a      	ldr	r3, [pc, #616]	; (914 <i2c_master_init+0x2a0>)
     6aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     6ac:	0028      	movs	r0, r5
     6ae:	4b9a      	ldr	r3, [pc, #616]	; (918 <i2c_master_init+0x2a4>)
     6b0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     6b2:	7b20      	ldrb	r0, [r4, #12]
     6b4:	2100      	movs	r1, #0
     6b6:	4b99      	ldr	r3, [pc, #612]	; (91c <i2c_master_init+0x2a8>)
     6b8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     6ba:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     6bc:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     6be:	079b      	lsls	r3, r3, #30
     6c0:	d505      	bpl.n	6ce <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     6c2:	b00a      	add	sp, #40	; 0x28
     6c4:	bc1c      	pop	{r2, r3, r4}
     6c6:	4690      	mov	r8, r2
     6c8:	4699      	mov	r9, r3
     6ca:	46a2      	mov	sl, r4
     6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     6ce:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     6d0:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     6d2:	07db      	lsls	r3, r3, #31
     6d4:	d4f5      	bmi.n	6c2 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     6d6:	6830      	ldr	r0, [r6, #0]
     6d8:	4b8c      	ldr	r3, [pc, #560]	; (90c <i2c_master_init+0x298>)
     6da:	4699      	mov	r9, r3
     6dc:	4798      	blx	r3
     6de:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     6e0:	498f      	ldr	r1, [pc, #572]	; (920 <i2c_master_init+0x2ac>)
     6e2:	4b90      	ldr	r3, [pc, #576]	; (924 <i2c_master_init+0x2b0>)
     6e4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     6e6:	00ad      	lsls	r5, r5, #2
     6e8:	4b8f      	ldr	r3, [pc, #572]	; (928 <i2c_master_init+0x2b4>)
     6ea:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     6ec:	2300      	movs	r3, #0
     6ee:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     6f0:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     6f2:	2500      	movs	r5, #0
     6f4:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     6f6:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     6f8:	2225      	movs	r2, #37	; 0x25
     6fa:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     6fc:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     6fe:	3314      	adds	r3, #20
     700:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     702:	6833      	ldr	r3, [r6, #0]
     704:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     706:	0018      	movs	r0, r3
     708:	47c8      	blx	r9
     70a:	4681      	mov	r9, r0
     70c:	2380      	movs	r3, #128	; 0x80
     70e:	aa08      	add	r2, sp, #32
     710:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     712:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     714:	2301      	movs	r3, #1
     716:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     718:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     71a:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     71c:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     71e:	2800      	cmp	r0, #0
     720:	d100      	bne.n	724 <i2c_master_init+0xb0>
     722:	e0af      	b.n	884 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     724:	ab08      	add	r3, sp, #32
     726:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     728:	2302      	movs	r3, #2
     72a:	aa08      	add	r2, sp, #32
     72c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     72e:	0c00      	lsrs	r0, r0, #16
     730:	b2c0      	uxtb	r0, r0
     732:	0011      	movs	r1, r2
     734:	4b7d      	ldr	r3, [pc, #500]	; (92c <i2c_master_init+0x2b8>)
     736:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     738:	2f00      	cmp	r7, #0
     73a:	d100      	bne.n	73e <i2c_master_init+0xca>
     73c:	e0a7      	b.n	88e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     73e:	ab08      	add	r3, sp, #32
     740:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     742:	2302      	movs	r3, #2
     744:	aa08      	add	r2, sp, #32
     746:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     748:	0c3f      	lsrs	r7, r7, #16
     74a:	b2f8      	uxtb	r0, r7
     74c:	0011      	movs	r1, r2
     74e:	4b77      	ldr	r3, [pc, #476]	; (92c <i2c_master_init+0x2b8>)
     750:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     752:	8aa3      	ldrh	r3, [r4, #20]
     754:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     756:	8ae3      	ldrh	r3, [r4, #22]
     758:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     75a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     75c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     75e:	2b00      	cmp	r3, #0
     760:	d104      	bne.n	76c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     762:	4b73      	ldr	r3, [pc, #460]	; (930 <i2c_master_init+0x2bc>)
     764:	789b      	ldrb	r3, [r3, #2]
     766:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     768:	0fdb      	lsrs	r3, r3, #31
     76a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     76c:	68a1      	ldr	r1, [r4, #8]
     76e:	6923      	ldr	r3, [r4, #16]
     770:	430b      	orrs	r3, r1
     772:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     774:	2224      	movs	r2, #36	; 0x24
     776:	5ca2      	ldrb	r2, [r4, r2]
     778:	2a00      	cmp	r2, #0
     77a:	d002      	beq.n	782 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     77c:	2280      	movs	r2, #128	; 0x80
     77e:	05d2      	lsls	r2, r2, #23
     780:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     782:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     784:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     786:	222c      	movs	r2, #44	; 0x2c
     788:	5ca2      	ldrb	r2, [r4, r2]
     78a:	2a00      	cmp	r2, #0
     78c:	d103      	bne.n	796 <i2c_master_init+0x122>
     78e:	2280      	movs	r2, #128	; 0x80
     790:	0492      	lsls	r2, r2, #18
     792:	4291      	cmp	r1, r2
     794:	d102      	bne.n	79c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     796:	2280      	movs	r2, #128	; 0x80
     798:	0512      	lsls	r2, r2, #20
     79a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     79c:	222d      	movs	r2, #45	; 0x2d
     79e:	5ca2      	ldrb	r2, [r4, r2]
     7a0:	2a00      	cmp	r2, #0
     7a2:	d002      	beq.n	7aa <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     7a4:	2280      	movs	r2, #128	; 0x80
     7a6:	0412      	lsls	r2, r2, #16
     7a8:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     7aa:	222e      	movs	r2, #46	; 0x2e
     7ac:	5ca2      	ldrb	r2, [r4, r2]
     7ae:	2a00      	cmp	r2, #0
     7b0:	d002      	beq.n	7b8 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     7b2:	2280      	movs	r2, #128	; 0x80
     7b4:	03d2      	lsls	r2, r2, #15
     7b6:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     7b8:	4642      	mov	r2, r8
     7ba:	6812      	ldr	r2, [r2, #0]
     7bc:	4313      	orrs	r3, r2
     7be:	4642      	mov	r2, r8
     7c0:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     7c2:	2380      	movs	r3, #128	; 0x80
     7c4:	005b      	lsls	r3, r3, #1
     7c6:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     7c8:	4648      	mov	r0, r9
     7ca:	3014      	adds	r0, #20
     7cc:	b2c0      	uxtb	r0, r0
     7ce:	4b59      	ldr	r3, [pc, #356]	; (934 <i2c_master_init+0x2c0>)
     7d0:	4798      	blx	r3
     7d2:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     7d4:	23fa      	movs	r3, #250	; 0xfa
     7d6:	009b      	lsls	r3, r3, #2
     7d8:	6822      	ldr	r2, [r4, #0]
     7da:	435a      	muls	r2, r3
     7dc:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     7de:	6863      	ldr	r3, [r4, #4]
     7e0:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     7e2:	4d55      	ldr	r5, [pc, #340]	; (938 <i2c_master_init+0x2c4>)
     7e4:	47a8      	blx	r5
     7e6:	9000      	str	r0, [sp, #0]
     7e8:	9101      	str	r1, [sp, #4]
     7ea:	464b      	mov	r3, r9
     7ec:	0058      	lsls	r0, r3, #1
     7ee:	47a8      	blx	r5
     7f0:	9002      	str	r0, [sp, #8]
     7f2:	9103      	str	r1, [sp, #12]
     7f4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     7f6:	47a8      	blx	r5
     7f8:	9004      	str	r0, [sp, #16]
     7fa:	9105      	str	r1, [sp, #20]
     7fc:	4f4f      	ldr	r7, [pc, #316]	; (93c <i2c_master_init+0x2c8>)
     7fe:	4a50      	ldr	r2, [pc, #320]	; (940 <i2c_master_init+0x2cc>)
     800:	4b50      	ldr	r3, [pc, #320]	; (944 <i2c_master_init+0x2d0>)
     802:	9800      	ldr	r0, [sp, #0]
     804:	9901      	ldr	r1, [sp, #4]
     806:	47b8      	blx	r7
     808:	0002      	movs	r2, r0
     80a:	000b      	movs	r3, r1
     80c:	9804      	ldr	r0, [sp, #16]
     80e:	9905      	ldr	r1, [sp, #20]
     810:	47b8      	blx	r7
     812:	4e4d      	ldr	r6, [pc, #308]	; (948 <i2c_master_init+0x2d4>)
     814:	2200      	movs	r2, #0
     816:	4b4d      	ldr	r3, [pc, #308]	; (94c <i2c_master_init+0x2d8>)
     818:	47b0      	blx	r6
     81a:	9004      	str	r0, [sp, #16]
     81c:	9105      	str	r1, [sp, #20]
     81e:	4648      	mov	r0, r9
     820:	47a8      	blx	r5
     822:	0002      	movs	r2, r0
     824:	000b      	movs	r3, r1
     826:	9804      	ldr	r0, [sp, #16]
     828:	9905      	ldr	r1, [sp, #20]
     82a:	47b8      	blx	r7
     82c:	0002      	movs	r2, r0
     82e:	000b      	movs	r3, r1
     830:	4d47      	ldr	r5, [pc, #284]	; (950 <i2c_master_init+0x2dc>)
     832:	9800      	ldr	r0, [sp, #0]
     834:	9901      	ldr	r1, [sp, #4]
     836:	47a8      	blx	r5
     838:	9a02      	ldr	r2, [sp, #8]
     83a:	9b03      	ldr	r3, [sp, #12]
     83c:	47b0      	blx	r6
     83e:	2200      	movs	r2, #0
     840:	4b44      	ldr	r3, [pc, #272]	; (954 <i2c_master_init+0x2e0>)
     842:	47a8      	blx	r5
     844:	9a02      	ldr	r2, [sp, #8]
     846:	9b03      	ldr	r3, [sp, #12]
     848:	4d43      	ldr	r5, [pc, #268]	; (958 <i2c_master_init+0x2e4>)
     84a:	47a8      	blx	r5
     84c:	4b43      	ldr	r3, [pc, #268]	; (95c <i2c_master_init+0x2e8>)
     84e:	4798      	blx	r3
     850:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     852:	2380      	movs	r3, #128	; 0x80
     854:	049b      	lsls	r3, r3, #18
     856:	68a2      	ldr	r2, [r4, #8]
     858:	429a      	cmp	r2, r3
     85a:	d01e      	beq.n	89a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     85c:	0003      	movs	r3, r0
     85e:	2040      	movs	r0, #64	; 0x40
     860:	2dff      	cmp	r5, #255	; 0xff
     862:	d900      	bls.n	866 <i2c_master_init+0x1f2>
     864:	e72d      	b.n	6c2 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     866:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     868:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     86a:	25ff      	movs	r5, #255	; 0xff
     86c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     86e:	0624      	lsls	r4, r4, #24
     870:	4325      	orrs	r5, r4
     872:	0400      	lsls	r0, r0, #16
     874:	23ff      	movs	r3, #255	; 0xff
     876:	041b      	lsls	r3, r3, #16
     878:	4018      	ands	r0, r3
     87a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     87c:	4643      	mov	r3, r8
     87e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     880:	2000      	movs	r0, #0
     882:	e71e      	b.n	6c2 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     884:	2100      	movs	r1, #0
     886:	4640      	mov	r0, r8
     888:	4b35      	ldr	r3, [pc, #212]	; (960 <i2c_master_init+0x2ec>)
     88a:	4798      	blx	r3
     88c:	e74a      	b.n	724 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     88e:	2101      	movs	r1, #1
     890:	4640      	mov	r0, r8
     892:	4b33      	ldr	r3, [pc, #204]	; (960 <i2c_master_init+0x2ec>)
     894:	4798      	blx	r3
     896:	0007      	movs	r7, r0
     898:	e751      	b.n	73e <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     89a:	26fa      	movs	r6, #250	; 0xfa
     89c:	00b6      	lsls	r6, r6, #2
     89e:	4653      	mov	r3, sl
     8a0:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     8a2:	9800      	ldr	r0, [sp, #0]
     8a4:	9901      	ldr	r1, [sp, #4]
     8a6:	0002      	movs	r2, r0
     8a8:	000b      	movs	r3, r1
     8aa:	4c27      	ldr	r4, [pc, #156]	; (948 <i2c_master_init+0x2d4>)
     8ac:	47a0      	blx	r4
     8ae:	9000      	str	r0, [sp, #0]
     8b0:	9101      	str	r1, [sp, #4]
     8b2:	0030      	movs	r0, r6
     8b4:	4b20      	ldr	r3, [pc, #128]	; (938 <i2c_master_init+0x2c4>)
     8b6:	4798      	blx	r3
     8b8:	2200      	movs	r2, #0
     8ba:	4b2a      	ldr	r3, [pc, #168]	; (964 <i2c_master_init+0x2f0>)
     8bc:	47b8      	blx	r7
     8be:	0002      	movs	r2, r0
     8c0:	000b      	movs	r3, r1
     8c2:	9800      	ldr	r0, [sp, #0]
     8c4:	9901      	ldr	r1, [sp, #4]
     8c6:	4c24      	ldr	r4, [pc, #144]	; (958 <i2c_master_init+0x2e4>)
     8c8:	47a0      	blx	r4
     8ca:	2200      	movs	r2, #0
     8cc:	4b21      	ldr	r3, [pc, #132]	; (954 <i2c_master_init+0x2e0>)
     8ce:	4c20      	ldr	r4, [pc, #128]	; (950 <i2c_master_init+0x2dc>)
     8d0:	47a0      	blx	r4
     8d2:	4b22      	ldr	r3, [pc, #136]	; (95c <i2c_master_init+0x2e8>)
     8d4:	4798      	blx	r3
     8d6:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     8d8:	d00c      	beq.n	8f4 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     8da:	0031      	movs	r1, r6
     8dc:	9807      	ldr	r0, [sp, #28]
     8de:	4b22      	ldr	r3, [pc, #136]	; (968 <i2c_master_init+0x2f4>)
     8e0:	4798      	blx	r3
     8e2:	3802      	subs	r0, #2
     8e4:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     8e6:	002b      	movs	r3, r5
     8e8:	2dff      	cmp	r5, #255	; 0xff
     8ea:	d80c      	bhi.n	906 <i2c_master_init+0x292>
     8ec:	28ff      	cmp	r0, #255	; 0xff
     8ee:	d9bc      	bls.n	86a <i2c_master_init+0x1f6>
     8f0:	2040      	movs	r0, #64	; 0x40
     8f2:	e6e6      	b.n	6c2 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     8f4:	0071      	lsls	r1, r6, #1
     8f6:	1e48      	subs	r0, r1, #1
     8f8:	9b07      	ldr	r3, [sp, #28]
     8fa:	469c      	mov	ip, r3
     8fc:	4460      	add	r0, ip
     8fe:	4b1a      	ldr	r3, [pc, #104]	; (968 <i2c_master_init+0x2f4>)
     900:	4798      	blx	r3
     902:	3801      	subs	r0, #1
     904:	e7ef      	b.n	8e6 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     906:	2040      	movs	r0, #64	; 0x40
     908:	e6db      	b.n	6c2 <i2c_master_init+0x4e>
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	00001a3d 	.word	0x00001a3d
     910:	40000400 	.word	0x40000400
     914:	00002095 	.word	0x00002095
     918:	00002009 	.word	0x00002009
     91c:	00001879 	.word	0x00001879
     920:	00000e99 	.word	0x00000e99
     924:	00001a79 	.word	0x00001a79
     928:	200000ec 	.word	0x200000ec
     92c:	0000218d 	.word	0x0000218d
     930:	41002000 	.word	0x41002000
     934:	000020b1 	.word	0x000020b1
     938:	0000408d 	.word	0x0000408d
     93c:	000034f9 	.word	0x000034f9
     940:	e826d695 	.word	0xe826d695
     944:	3e112e0b 	.word	0x3e112e0b
     948:	00002871 	.word	0x00002871
     94c:	40240000 	.word	0x40240000
     950:	000039f9 	.word	0x000039f9
     954:	3ff00000 	.word	0x3ff00000
     958:	00002e91 	.word	0x00002e91
     95c:	00004025 	.word	0x00004025
     960:	000018c5 	.word	0x000018c5
     964:	40080000 	.word	0x40080000
     968:	00002705 	.word	0x00002705

0000096c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     96c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     96e:	7e1a      	ldrb	r2, [r3, #24]
     970:	0792      	lsls	r2, r2, #30
     972:	d507      	bpl.n	984 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     974:	2202      	movs	r2, #2
     976:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     978:	8b5b      	ldrh	r3, [r3, #26]
     97a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     97c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     97e:	17db      	asrs	r3, r3, #31
     980:	4018      	ands	r0, r3
}
     982:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     984:	8b5a      	ldrh	r2, [r3, #26]
     986:	0752      	lsls	r2, r2, #29
     988:	d506      	bpl.n	998 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     98a:	6859      	ldr	r1, [r3, #4]
     98c:	22c0      	movs	r2, #192	; 0xc0
     98e:	0292      	lsls	r2, r2, #10
     990:	430a      	orrs	r2, r1
     992:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     994:	2018      	movs	r0, #24
     996:	e7f4      	b.n	982 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     998:	2000      	movs	r0, #0
     99a:	e7f2      	b.n	982 <_i2c_master_address_response+0x16>

0000099c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     99c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     99e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     9a0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     9a2:	2401      	movs	r4, #1
     9a4:	2502      	movs	r5, #2
     9a6:	7e11      	ldrb	r1, [r2, #24]
     9a8:	4221      	tst	r1, r4
     9aa:	d10b      	bne.n	9c4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     9ac:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     9ae:	4229      	tst	r1, r5
     9b0:	d106      	bne.n	9c0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     9b2:	3301      	adds	r3, #1
     9b4:	b29b      	uxth	r3, r3
     9b6:	8901      	ldrh	r1, [r0, #8]
     9b8:	4299      	cmp	r1, r3
     9ba:	d8f4      	bhi.n	9a6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     9bc:	2012      	movs	r0, #18
     9be:	e002      	b.n	9c6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     9c0:	2000      	movs	r0, #0
     9c2:	e000      	b.n	9c6 <_i2c_master_wait_for_bus+0x2a>
     9c4:	2000      	movs	r0, #0
}
     9c6:	bd30      	pop	{r4, r5, pc}

000009c8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     9c8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9ca:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9cc:	6862      	ldr	r2, [r4, #4]
     9ce:	2380      	movs	r3, #128	; 0x80
     9d0:	02db      	lsls	r3, r3, #11
     9d2:	4313      	orrs	r3, r2
     9d4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     9d6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9d8:	4b02      	ldr	r3, [pc, #8]	; (9e4 <_i2c_master_send_hs_master_code+0x1c>)
     9da:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     9dc:	2301      	movs	r3, #1
     9de:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     9e0:	bd10      	pop	{r4, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	0000099d 	.word	0x0000099d

000009e8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ea:	46de      	mov	lr, fp
     9ec:	4657      	mov	r7, sl
     9ee:	464e      	mov	r6, r9
     9f0:	4645      	mov	r5, r8
     9f2:	b5e0      	push	{r5, r6, r7, lr}
     9f4:	b083      	sub	sp, #12
     9f6:	0006      	movs	r6, r0
     9f8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     9fa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     9fc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     9fe:	682b      	ldr	r3, [r5, #0]
     a00:	011b      	lsls	r3, r3, #4
     a02:	0fdb      	lsrs	r3, r3, #31
     a04:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     a06:	7a4b      	ldrb	r3, [r1, #9]
     a08:	2b00      	cmp	r3, #0
     a0a:	d12b      	bne.n	a64 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a0c:	686b      	ldr	r3, [r5, #4]
     a0e:	4a58      	ldr	r2, [pc, #352]	; (b70 <_i2c_master_read_packet+0x188>)
     a10:	4013      	ands	r3, r2
     a12:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     a14:	464b      	mov	r3, r9
     a16:	7a1b      	ldrb	r3, [r3, #8]
     a18:	2b00      	cmp	r3, #0
     a1a:	d127      	bne.n	a6c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a1c:	464b      	mov	r3, r9
     a1e:	881b      	ldrh	r3, [r3, #0]
     a20:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     a22:	464a      	mov	r2, r9
     a24:	7a52      	ldrb	r2, [r2, #9]
     a26:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a28:	4313      	orrs	r3, r2
     a2a:	2201      	movs	r2, #1
     a2c:	4313      	orrs	r3, r2
     a2e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     a30:	0030      	movs	r0, r6
     a32:	4b50      	ldr	r3, [pc, #320]	; (b74 <_i2c_master_read_packet+0x18c>)
     a34:	4798      	blx	r3
     a36:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     a38:	4653      	mov	r3, sl
     a3a:	2b00      	cmp	r3, #0
     a3c:	d003      	beq.n	a46 <_i2c_master_read_packet+0x5e>
     a3e:	464b      	mov	r3, r9
     a40:	885b      	ldrh	r3, [r3, #2]
     a42:	2b01      	cmp	r3, #1
     a44:	d03b      	beq.n	abe <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     a46:	686b      	ldr	r3, [r5, #4]
     a48:	4a49      	ldr	r2, [pc, #292]	; (b70 <_i2c_master_read_packet+0x188>)
     a4a:	4013      	ands	r3, r2
     a4c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     a4e:	9b01      	ldr	r3, [sp, #4]
     a50:	2b00      	cmp	r3, #0
     a52:	d03a      	beq.n	aca <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     a54:	9801      	ldr	r0, [sp, #4]
     a56:	b003      	add	sp, #12
     a58:	bc3c      	pop	{r2, r3, r4, r5}
     a5a:	4690      	mov	r8, r2
     a5c:	4699      	mov	r9, r3
     a5e:	46a2      	mov	sl, r4
     a60:	46ab      	mov	fp, r5
     a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     a64:	7a89      	ldrb	r1, [r1, #10]
     a66:	4b44      	ldr	r3, [pc, #272]	; (b78 <_i2c_master_read_packet+0x190>)
     a68:	4798      	blx	r3
     a6a:	e7cf      	b.n	a0c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     a6c:	464b      	mov	r3, r9
     a6e:	881b      	ldrh	r3, [r3, #0]
     a70:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a72:	464a      	mov	r2, r9
     a74:	7a52      	ldrb	r2, [r2, #9]
     a76:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     a78:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a7a:	2280      	movs	r2, #128	; 0x80
     a7c:	0212      	lsls	r2, r2, #8
     a7e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     a80:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     a82:	0030      	movs	r0, r6
     a84:	4b3b      	ldr	r3, [pc, #236]	; (b74 <_i2c_master_read_packet+0x18c>)
     a86:	4798      	blx	r3
     a88:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a8a:	686b      	ldr	r3, [r5, #4]
     a8c:	4a38      	ldr	r2, [pc, #224]	; (b70 <_i2c_master_read_packet+0x188>)
     a8e:	4013      	ands	r3, r2
     a90:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     a92:	2800      	cmp	r0, #0
     a94:	d1de      	bne.n	a54 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     a96:	0030      	movs	r0, r6
     a98:	4b38      	ldr	r3, [pc, #224]	; (b7c <_i2c_master_read_packet+0x194>)
     a9a:	4798      	blx	r3
     a9c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     a9e:	2800      	cmp	r0, #0
     aa0:	d1d8      	bne.n	a54 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     aa2:	464b      	mov	r3, r9
     aa4:	881b      	ldrh	r3, [r3, #0]
     aa6:	0a1b      	lsrs	r3, r3, #8
     aa8:	2278      	movs	r2, #120	; 0x78
     aaa:	4313      	orrs	r3, r2
     aac:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     aae:	464a      	mov	r2, r9
     ab0:	7a52      	ldrb	r2, [r2, #9]
     ab2:	0392      	lsls	r2, r2, #14
     ab4:	2101      	movs	r1, #1
     ab6:	430a      	orrs	r2, r1
     ab8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     aba:	626b      	str	r3, [r5, #36]	; 0x24
     abc:	e7b8      	b.n	a30 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     abe:	686a      	ldr	r2, [r5, #4]
     ac0:	2380      	movs	r3, #128	; 0x80
     ac2:	02db      	lsls	r3, r3, #11
     ac4:	4313      	orrs	r3, r2
     ac6:	606b      	str	r3, [r5, #4]
     ac8:	e7c1      	b.n	a4e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     aca:	0030      	movs	r0, r6
     acc:	4b2b      	ldr	r3, [pc, #172]	; (b7c <_i2c_master_read_packet+0x194>)
     ace:	4798      	blx	r3
     ad0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     ad2:	2800      	cmp	r0, #0
     ad4:	d1be      	bne.n	a54 <_i2c_master_read_packet+0x6c>
     ad6:	3c01      	subs	r4, #1
     ad8:	b2a4      	uxth	r4, r4
     ada:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     adc:	4b28      	ldr	r3, [pc, #160]	; (b80 <_i2c_master_read_packet+0x198>)
     ade:	469b      	mov	fp, r3
     ae0:	e015      	b.n	b0e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     ae2:	2c01      	cmp	r4, #1
     ae4:	d020      	beq.n	b28 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     ae6:	0030      	movs	r0, r6
     ae8:	4b26      	ldr	r3, [pc, #152]	; (b84 <_i2c_master_read_packet+0x19c>)
     aea:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     aec:	4643      	mov	r3, r8
     aee:	1c5f      	adds	r7, r3, #1
     af0:	b2bf      	uxth	r7, r7
     af2:	2328      	movs	r3, #40	; 0x28
     af4:	5ceb      	ldrb	r3, [r5, r3]
     af6:	464a      	mov	r2, r9
     af8:	6852      	ldr	r2, [r2, #4]
     afa:	4641      	mov	r1, r8
     afc:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     afe:	0030      	movs	r0, r6
     b00:	4b1c      	ldr	r3, [pc, #112]	; (b74 <_i2c_master_read_packet+0x18c>)
     b02:	4798      	blx	r3
     b04:	3c01      	subs	r4, #1
     b06:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     b08:	2800      	cmp	r0, #0
     b0a:	d115      	bne.n	b38 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     b0c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     b0e:	455c      	cmp	r4, fp
     b10:	d014      	beq.n	b3c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b12:	8b6b      	ldrh	r3, [r5, #26]
     b14:	069b      	lsls	r3, r3, #26
     b16:	d527      	bpl.n	b68 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     b18:	7af3      	ldrb	r3, [r6, #11]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d0e3      	beq.n	ae6 <_i2c_master_read_packet+0xfe>
     b1e:	4653      	mov	r3, sl
     b20:	2b00      	cmp	r3, #0
     b22:	d1de      	bne.n	ae2 <_i2c_master_read_packet+0xfa>
     b24:	2c00      	cmp	r4, #0
     b26:	d1de      	bne.n	ae6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b28:	686a      	ldr	r2, [r5, #4]
     b2a:	2380      	movs	r3, #128	; 0x80
     b2c:	02db      	lsls	r3, r3, #11
     b2e:	4313      	orrs	r3, r2
     b30:	606b      	str	r3, [r5, #4]
     b32:	3c01      	subs	r4, #1
     b34:	b2a4      	uxth	r4, r4
     b36:	e7ea      	b.n	b0e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     b38:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     b3a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     b3c:	7ab3      	ldrb	r3, [r6, #10]
     b3e:	2b00      	cmp	r3, #0
     b40:	d109      	bne.n	b56 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     b42:	0030      	movs	r0, r6
     b44:	4b0f      	ldr	r3, [pc, #60]	; (b84 <_i2c_master_read_packet+0x19c>)
     b46:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     b48:	2328      	movs	r3, #40	; 0x28
     b4a:	5cea      	ldrb	r2, [r5, r3]
     b4c:	464b      	mov	r3, r9
     b4e:	685b      	ldr	r3, [r3, #4]
     b50:	4641      	mov	r1, r8
     b52:	545a      	strb	r2, [r3, r1]
     b54:	e77e      	b.n	a54 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     b56:	0030      	movs	r0, r6
     b58:	4b0a      	ldr	r3, [pc, #40]	; (b84 <_i2c_master_read_packet+0x19c>)
     b5a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b5c:	686a      	ldr	r2, [r5, #4]
     b5e:	23c0      	movs	r3, #192	; 0xc0
     b60:	029b      	lsls	r3, r3, #10
     b62:	4313      	orrs	r3, r2
     b64:	606b      	str	r3, [r5, #4]
     b66:	e7ec      	b.n	b42 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     b68:	2341      	movs	r3, #65	; 0x41
     b6a:	9301      	str	r3, [sp, #4]
     b6c:	e772      	b.n	a54 <_i2c_master_read_packet+0x6c>
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	fffbffff 	.word	0xfffbffff
     b74:	0000099d 	.word	0x0000099d
     b78:	000009c9 	.word	0x000009c9
     b7c:	0000096d 	.word	0x0000096d
     b80:	0000ffff 	.word	0x0000ffff
     b84:	00000669 	.word	0x00000669

00000b88 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b88:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8a:	46de      	mov	lr, fp
     b8c:	4657      	mov	r7, sl
     b8e:	464e      	mov	r6, r9
     b90:	4645      	mov	r5, r8
     b92:	b5e0      	push	{r5, r6, r7, lr}
     b94:	b083      	sub	sp, #12
     b96:	0006      	movs	r6, r0
     b98:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b9a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     b9c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     b9e:	4b32      	ldr	r3, [pc, #200]	; (c68 <_i2c_master_write_packet+0xe0>)
     ba0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     ba2:	7a7b      	ldrb	r3, [r7, #9]
     ba4:	2b00      	cmp	r3, #0
     ba6:	d11d      	bne.n	be4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ba8:	686b      	ldr	r3, [r5, #4]
     baa:	4a30      	ldr	r2, [pc, #192]	; (c6c <_i2c_master_write_packet+0xe4>)
     bac:	4013      	ands	r3, r2
     bae:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     bb0:	7a3b      	ldrb	r3, [r7, #8]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d01b      	beq.n	bee <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bb6:	883b      	ldrh	r3, [r7, #0]
     bb8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bba:	7a7a      	ldrb	r2, [r7, #9]
     bbc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bbe:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     bc0:	2280      	movs	r2, #128	; 0x80
     bc2:	0212      	lsls	r2, r2, #8
     bc4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bc6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     bc8:	0030      	movs	r0, r6
     bca:	4b29      	ldr	r3, [pc, #164]	; (c70 <_i2c_master_write_packet+0xe8>)
     bcc:	4798      	blx	r3
     bce:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     bd0:	2800      	cmp	r0, #0
     bd2:	d013      	beq.n	bfc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     bd4:	9801      	ldr	r0, [sp, #4]
     bd6:	b003      	add	sp, #12
     bd8:	bc3c      	pop	{r2, r3, r4, r5}
     bda:	4690      	mov	r8, r2
     bdc:	4699      	mov	r9, r3
     bde:	46a2      	mov	sl, r4
     be0:	46ab      	mov	fp, r5
     be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     be4:	7ab9      	ldrb	r1, [r7, #10]
     be6:	0030      	movs	r0, r6
     be8:	4b22      	ldr	r3, [pc, #136]	; (c74 <_i2c_master_write_packet+0xec>)
     bea:	4798      	blx	r3
     bec:	e7dc      	b.n	ba8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bee:	883b      	ldrh	r3, [r7, #0]
     bf0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     bf2:	7a7a      	ldrb	r2, [r7, #9]
     bf4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     bf6:	4313      	orrs	r3, r2
     bf8:	626b      	str	r3, [r5, #36]	; 0x24
     bfa:	e7e5      	b.n	bc8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     bfc:	0030      	movs	r0, r6
     bfe:	4b1e      	ldr	r3, [pc, #120]	; (c78 <_i2c_master_write_packet+0xf0>)
     c00:	4798      	blx	r3
     c02:	1e03      	subs	r3, r0, #0
     c04:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     c06:	d1e5      	bne.n	bd4 <_i2c_master_write_packet+0x4c>
     c08:	46a0      	mov	r8, r4
     c0a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     c0c:	3320      	adds	r3, #32
     c0e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     c10:	4b15      	ldr	r3, [pc, #84]	; (c68 <_i2c_master_write_packet+0xe0>)
     c12:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     c14:	4b16      	ldr	r3, [pc, #88]	; (c70 <_i2c_master_write_packet+0xe8>)
     c16:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     c18:	4544      	cmp	r4, r8
     c1a:	d015      	beq.n	c48 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     c1c:	8b6b      	ldrh	r3, [r5, #26]
     c1e:	464a      	mov	r2, r9
     c20:	4213      	tst	r3, r2
     c22:	d01d      	beq.n	c60 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     c24:	0030      	movs	r0, r6
     c26:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	5d1a      	ldrb	r2, [r3, r4]
     c2c:	2328      	movs	r3, #40	; 0x28
     c2e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     c30:	0030      	movs	r0, r6
     c32:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     c34:	2800      	cmp	r0, #0
     c36:	d106      	bne.n	c46 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     c38:	8b6b      	ldrh	r3, [r5, #26]
     c3a:	3401      	adds	r4, #1
     c3c:	075b      	lsls	r3, r3, #29
     c3e:	d5eb      	bpl.n	c18 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     c40:	231e      	movs	r3, #30
     c42:	9301      	str	r3, [sp, #4]
     c44:	e000      	b.n	c48 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     c46:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     c48:	7ab3      	ldrb	r3, [r6, #10]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d0c2      	beq.n	bd4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     c4e:	0030      	movs	r0, r6
     c50:	4b05      	ldr	r3, [pc, #20]	; (c68 <_i2c_master_write_packet+0xe0>)
     c52:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c54:	686a      	ldr	r2, [r5, #4]
     c56:	23c0      	movs	r3, #192	; 0xc0
     c58:	029b      	lsls	r3, r3, #10
     c5a:	4313      	orrs	r3, r2
     c5c:	606b      	str	r3, [r5, #4]
     c5e:	e7b9      	b.n	bd4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     c60:	2341      	movs	r3, #65	; 0x41
     c62:	9301      	str	r3, [sp, #4]
     c64:	e7b6      	b.n	bd4 <_i2c_master_write_packet+0x4c>
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	00000669 	.word	0x00000669
     c6c:	fffbffff 	.word	0xfffbffff
     c70:	0000099d 	.word	0x0000099d
     c74:	000009c9 	.word	0x000009c9
     c78:	0000096d 	.word	0x0000096d

00000c7c <i2c_master_read_packet_wait>:
{
     c7c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     c7e:	8b83      	ldrh	r3, [r0, #28]
     c80:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     c82:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     c84:	2b00      	cmp	r3, #0
     c86:	d001      	beq.n	c8c <i2c_master_read_packet_wait+0x10>
}
     c88:	0010      	movs	r0, r2
     c8a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     c8c:	3301      	adds	r3, #1
     c8e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     c90:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     c92:	4b02      	ldr	r3, [pc, #8]	; (c9c <i2c_master_read_packet_wait+0x20>)
     c94:	4798      	blx	r3
     c96:	0002      	movs	r2, r0
     c98:	e7f6      	b.n	c88 <i2c_master_read_packet_wait+0xc>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	000009e9 	.word	0x000009e9

00000ca0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ca0:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     ca2:	8b83      	ldrh	r3, [r0, #28]
     ca4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     ca6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     ca8:	2b00      	cmp	r3, #0
     caa:	d001      	beq.n	cb0 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     cac:	0010      	movs	r0, r2
     cae:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     cb0:	3301      	adds	r3, #1
     cb2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     cb4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     cb6:	4b02      	ldr	r3, [pc, #8]	; (cc0 <i2c_master_write_packet_wait+0x20>)
     cb8:	4798      	blx	r3
     cba:	0002      	movs	r2, r0
     cbc:	e7f6      	b.n	cac <i2c_master_write_packet_wait+0xc>
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00000b89 	.word	0x00000b89

00000cc4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     cc4:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     cc6:	2207      	movs	r2, #7
     cc8:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     cca:	421a      	tst	r2, r3
     ccc:	d1fc      	bne.n	cc8 <_i2c_master_wait_for_sync+0x4>
}
     cce:	4770      	bx	lr

00000cd0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cd4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     cd6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     cd8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     cda:	8b83      	ldrh	r3, [r0, #28]
     cdc:	1aed      	subs	r5, r5, r3
     cde:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     ce0:	8b83      	ldrh	r3, [r0, #28]
     ce2:	3b01      	subs	r3, #1
     ce4:	b29b      	uxth	r3, r3
     ce6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     ce8:	0113      	lsls	r3, r2, #4
     cea:	d51d      	bpl.n	d28 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     cec:	7ac3      	ldrb	r3, [r0, #11]
     cee:	2b00      	cmp	r3, #0
     cf0:	d003      	beq.n	cfa <_i2c_master_read+0x2a>
     cf2:	8b83      	ldrh	r3, [r0, #28]
     cf4:	b29b      	uxth	r3, r3
     cf6:	2b01      	cmp	r3, #1
     cf8:	d010      	beq.n	d1c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     cfa:	8ba3      	ldrh	r3, [r4, #28]
     cfc:	b29b      	uxth	r3, r3
     cfe:	2b00      	cmp	r3, #0
     d00:	d102      	bne.n	d08 <_i2c_master_read+0x38>
		if (module->send_stop) {
     d02:	7aa3      	ldrb	r3, [r4, #10]
     d04:	2b00      	cmp	r3, #0
     d06:	d11c      	bne.n	d42 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     d08:	0020      	movs	r0, r4
     d0a:	4b12      	ldr	r3, [pc, #72]	; (d54 <_i2c_master_read+0x84>)
     d0c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     d0e:	6a23      	ldr	r3, [r4, #32]
     d10:	195d      	adds	r5, r3, r5
     d12:	2328      	movs	r3, #40	; 0x28
     d14:	5cf3      	ldrb	r3, [r6, r3]
     d16:	b2db      	uxtb	r3, r3
     d18:	702b      	strb	r3, [r5, #0]
}
     d1a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d1c:	6872      	ldr	r2, [r6, #4]
     d1e:	2380      	movs	r3, #128	; 0x80
     d20:	02db      	lsls	r3, r3, #11
     d22:	4313      	orrs	r3, r2
     d24:	6073      	str	r3, [r6, #4]
     d26:	e7e8      	b.n	cfa <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     d28:	7ac3      	ldrb	r3, [r0, #11]
     d2a:	2b00      	cmp	r3, #0
     d2c:	d0e5      	beq.n	cfa <_i2c_master_read+0x2a>
     d2e:	8b83      	ldrh	r3, [r0, #28]
     d30:	b29b      	uxth	r3, r3
     d32:	2b00      	cmp	r3, #0
     d34:	d1e1      	bne.n	cfa <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d36:	6872      	ldr	r2, [r6, #4]
     d38:	2380      	movs	r3, #128	; 0x80
     d3a:	02db      	lsls	r3, r3, #11
     d3c:	4313      	orrs	r3, r2
     d3e:	6073      	str	r3, [r6, #4]
     d40:	e7db      	b.n	cfa <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     d42:	0020      	movs	r0, r4
     d44:	4b03      	ldr	r3, [pc, #12]	; (d54 <_i2c_master_read+0x84>)
     d46:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d48:	6872      	ldr	r2, [r6, #4]
     d4a:	23c0      	movs	r3, #192	; 0xc0
     d4c:	029b      	lsls	r3, r3, #10
     d4e:	4313      	orrs	r3, r2
     d50:	6073      	str	r3, [r6, #4]
     d52:	e7d9      	b.n	d08 <_i2c_master_read+0x38>
     d54:	00000cc5 	.word	0x00000cc5

00000d58 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     d58:	b570      	push	{r4, r5, r6, lr}
     d5a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d5c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     d5e:	8b6b      	ldrh	r3, [r5, #26]
     d60:	075b      	lsls	r3, r3, #29
     d62:	d503      	bpl.n	d6c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     d64:	221e      	movs	r2, #30
     d66:	2325      	movs	r3, #37	; 0x25
     d68:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     d6a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     d6c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     d6e:	8b83      	ldrh	r3, [r0, #28]
     d70:	1af6      	subs	r6, r6, r3
     d72:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     d74:	8b83      	ldrh	r3, [r0, #28]
     d76:	3b01      	subs	r3, #1
     d78:	b29b      	uxth	r3, r3
     d7a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     d7c:	4b04      	ldr	r3, [pc, #16]	; (d90 <_i2c_master_write+0x38>)
     d7e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     d80:	6a23      	ldr	r3, [r4, #32]
     d82:	199e      	adds	r6, r3, r6
     d84:	7833      	ldrb	r3, [r6, #0]
     d86:	b2db      	uxtb	r3, r3
     d88:	2228      	movs	r2, #40	; 0x28
     d8a:	54ab      	strb	r3, [r5, r2]
     d8c:	e7ed      	b.n	d6a <_i2c_master_write+0x12>
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00000cc5 	.word	0x00000cc5

00000d94 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d96:	0005      	movs	r5, r0
     d98:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d9a:	6806      	ldr	r6, [r0, #0]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     d9c:	684b      	ldr	r3, [r1, #4]
     d9e:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     da0:	884b      	ldrh	r3, [r1, #2]
     da2:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     da4:	2201      	movs	r2, #1
     da6:	2324      	movs	r3, #36	; 0x24
     da8:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     daa:	3204      	adds	r2, #4
     dac:	3301      	adds	r3, #1
     dae:	54c2      	strb	r2, [r0, r3]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     db0:	6837      	ldr	r7, [r6, #0]
     db2:	013f      	lsls	r7, r7, #4
     db4:	0fff      	lsrs	r7, r7, #31

	/* Switch to high speed mode */
	if (packet->high_speed) {
     db6:	7a4b      	ldrb	r3, [r1, #9]
     db8:	2b00      	cmp	r3, #0
     dba:	d117      	bne.n	dec <_i2c_master_read_packet+0x58>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     dbc:	2f00      	cmp	r7, #0
     dbe:	d002      	beq.n	dc6 <_i2c_master_read_packet+0x32>
     dc0:	8863      	ldrh	r3, [r4, #2]
     dc2:	2b01      	cmp	r3, #1
     dc4:	d016      	beq.n	df4 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     dc6:	6873      	ldr	r3, [r6, #4]
     dc8:	4a20      	ldr	r2, [pc, #128]	; (e4c <_i2c_master_read_packet+0xb8>)
     dca:	4013      	ands	r3, r2
     dcc:	6073      	str	r3, [r6, #4]
	}

	if (packet->ten_bit_address) {
     dce:	7a23      	ldrb	r3, [r4, #8]
     dd0:	2b00      	cmp	r3, #0
     dd2:	d115      	bne.n	e00 <_i2c_master_read_packet+0x6c>
		} else {
			return tmp_status;
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     dd4:	2303      	movs	r3, #3
     dd6:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     dd8:	8823      	ldrh	r3, [r4, #0]
     dda:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     ddc:	7a62      	ldrb	r2, [r4, #9]
     dde:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     de0:	4313      	orrs	r3, r2
     de2:	2201      	movs	r2, #1
     de4:	4313      	orrs	r3, r2
     de6:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
     de8:	2000      	movs	r0, #0
}
     dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     dec:	7a89      	ldrb	r1, [r1, #10]
     dee:	4b18      	ldr	r3, [pc, #96]	; (e50 <_i2c_master_read_packet+0xbc>)
     df0:	4798      	blx	r3
     df2:	e7e3      	b.n	dbc <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     df4:	6872      	ldr	r2, [r6, #4]
     df6:	2380      	movs	r3, #128	; 0x80
     df8:	02db      	lsls	r3, r3, #11
     dfa:	4313      	orrs	r3, r2
     dfc:	6073      	str	r3, [r6, #4]
     dfe:	e7e6      	b.n	dce <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     e00:	8823      	ldrh	r3, [r4, #0]
     e02:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e04:	7a62      	ldrb	r2, [r4, #9]
     e06:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     e08:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e0a:	2280      	movs	r2, #128	; 0x80
     e0c:	0212      	lsls	r2, r2, #8
     e0e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     e10:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     e12:	0028      	movs	r0, r5
     e14:	4b0f      	ldr	r3, [pc, #60]	; (e54 <_i2c_master_read_packet+0xc0>)
     e16:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     e18:	6873      	ldr	r3, [r6, #4]
     e1a:	4a0c      	ldr	r2, [pc, #48]	; (e4c <_i2c_master_read_packet+0xb8>)
     e1c:	4013      	ands	r3, r2
     e1e:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     e20:	2800      	cmp	r0, #0
     e22:	d1e2      	bne.n	dea <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     e24:	0028      	movs	r0, r5
     e26:	4b0c      	ldr	r3, [pc, #48]	; (e58 <_i2c_master_read_packet+0xc4>)
     e28:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     e2a:	2800      	cmp	r0, #0
     e2c:	d1dd      	bne.n	dea <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     e2e:	2303      	movs	r3, #3
     e30:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     e32:	8823      	ldrh	r3, [r4, #0]
     e34:	0a1b      	lsrs	r3, r3, #8
     e36:	2278      	movs	r2, #120	; 0x78
     e38:	4313      	orrs	r3, r2
     e3a:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     e3c:	7a62      	ldrb	r2, [r4, #9]
     e3e:	0392      	lsls	r2, r2, #14
     e40:	2101      	movs	r1, #1
     e42:	430a      	orrs	r2, r1
     e44:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     e46:	6273      	str	r3, [r6, #36]	; 0x24
     e48:	e7cf      	b.n	dea <_i2c_master_read_packet+0x56>
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	fffbffff 	.word	0xfffbffff
     e50:	000009c9 	.word	0x000009c9
     e54:	0000099d 	.word	0x0000099d
     e58:	0000096d 	.word	0x0000096d

00000e5c <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     e5c:	1c93      	adds	r3, r2, #2
     e5e:	009b      	lsls	r3, r3, #2
     e60:	18c3      	adds	r3, r0, r3
     e62:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     e64:	7e03      	ldrb	r3, [r0, #24]
     e66:	2101      	movs	r1, #1
     e68:	4091      	lsls	r1, r2
     e6a:	430b      	orrs	r3, r1
     e6c:	b2db      	uxtb	r3, r3
     e6e:	7603      	strb	r3, [r0, #24]
}
     e70:	4770      	bx	lr
	...

00000e74 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e74:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     e76:	8b83      	ldrh	r3, [r0, #28]
     e78:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     e7a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     e7c:	2b00      	cmp	r3, #0
     e7e:	d001      	beq.n	e84 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     e80:	0010      	movs	r0, r2
     e82:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     e84:	3301      	adds	r3, #1
     e86:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     e88:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     e8a:	4b02      	ldr	r3, [pc, #8]	; (e94 <i2c_master_read_packet_job+0x20>)
     e8c:	4798      	blx	r3
     e8e:	0002      	movs	r2, r0
     e90:	e7f6      	b.n	e80 <i2c_master_read_packet_job+0xc>
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	00000d95 	.word	0x00000d95

00000e98 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     e98:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     e9a:	0080      	lsls	r0, r0, #2
     e9c:	4b75      	ldr	r3, [pc, #468]	; (1074 <_i2c_master_interrupt_handler+0x1dc>)
     e9e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ea0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     ea2:	682b      	ldr	r3, [r5, #0]
     ea4:	011b      	lsls	r3, r3, #4
     ea6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     ea8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     eaa:	7e26      	ldrb	r6, [r4, #24]
     eac:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     eae:	8b63      	ldrh	r3, [r4, #26]
     eb0:	b29b      	uxth	r3, r3
     eb2:	2b00      	cmp	r3, #0
     eb4:	d103      	bne.n	ebe <_i2c_master_interrupt_handler+0x26>
     eb6:	8ba3      	ldrh	r3, [r4, #28]
     eb8:	b29b      	uxth	r3, r3
     eba:	2b00      	cmp	r3, #0
     ebc:	d123      	bne.n	f06 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ebe:	8b63      	ldrh	r3, [r4, #26]
     ec0:	b29b      	uxth	r3, r3
     ec2:	2b00      	cmp	r3, #0
     ec4:	d008      	beq.n	ed8 <_i2c_master_interrupt_handler+0x40>
     ec6:	8ba3      	ldrh	r3, [r4, #28]
     ec8:	b29b      	uxth	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	d104      	bne.n	ed8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     ece:	3325      	adds	r3, #37	; 0x25
     ed0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ed2:	2b05      	cmp	r3, #5
     ed4:	d100      	bne.n	ed8 <_i2c_master_interrupt_handler+0x40>
     ed6:	e06d      	b.n	fb4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     ed8:	8b63      	ldrh	r3, [r4, #26]
     eda:	b29b      	uxth	r3, r3
     edc:	2b00      	cmp	r3, #0
     ede:	d024      	beq.n	f2a <_i2c_master_interrupt_handler+0x92>
     ee0:	8ba3      	ldrh	r3, [r4, #28]
     ee2:	b29b      	uxth	r3, r3
     ee4:	2b00      	cmp	r3, #0
     ee6:	d020      	beq.n	f2a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     ee8:	8b6b      	ldrh	r3, [r5, #26]
     eea:	069b      	lsls	r3, r3, #26
     eec:	d500      	bpl.n	ef0 <_i2c_master_interrupt_handler+0x58>
     eee:	e081      	b.n	ff4 <_i2c_master_interrupt_handler+0x15c>
     ef0:	2a00      	cmp	r2, #0
     ef2:	d004      	beq.n	efe <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     ef4:	8ba3      	ldrh	r3, [r4, #28]
     ef6:	b29b      	uxth	r3, r3
     ef8:	2b01      	cmp	r3, #1
     efa:	d100      	bne.n	efe <_i2c_master_interrupt_handler+0x66>
     efc:	e07a      	b.n	ff4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     efe:	2241      	movs	r2, #65	; 0x41
     f00:	2325      	movs	r3, #37	; 0x25
     f02:	54e2      	strb	r2, [r4, r3]
     f04:	e011      	b.n	f2a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     f06:	7e2b      	ldrb	r3, [r5, #24]
     f08:	07db      	lsls	r3, r3, #31
     f0a:	d507      	bpl.n	f1c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     f0c:	2301      	movs	r3, #1
     f0e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     f10:	8b6b      	ldrh	r3, [r5, #26]
     f12:	079b      	lsls	r3, r3, #30
     f14:	d52e      	bpl.n	f74 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     f16:	2241      	movs	r2, #65	; 0x41
     f18:	2325      	movs	r3, #37	; 0x25
     f1a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     f1c:	8ba3      	ldrh	r3, [r4, #28]
     f1e:	b29b      	uxth	r3, r3
     f20:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     f22:	2325      	movs	r3, #37	; 0x25
     f24:	5ce3      	ldrb	r3, [r4, r3]
     f26:	2b05      	cmp	r3, #5
     f28:	d038      	beq.n	f9c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     f2a:	8b63      	ldrh	r3, [r4, #26]
     f2c:	b29b      	uxth	r3, r3
     f2e:	2b00      	cmp	r3, #0
     f30:	d007      	beq.n	f42 <_i2c_master_interrupt_handler+0xaa>
     f32:	8ba3      	ldrh	r3, [r4, #28]
     f34:	b29b      	uxth	r3, r3
     f36:	2b00      	cmp	r3, #0
     f38:	d103      	bne.n	f42 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     f3a:	3325      	adds	r3, #37	; 0x25
     f3c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     f3e:	2b05      	cmp	r3, #5
     f40:	d064      	beq.n	100c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     f42:	2325      	movs	r3, #37	; 0x25
     f44:	5ce3      	ldrb	r3, [r4, r3]
     f46:	2b05      	cmp	r3, #5
     f48:	d013      	beq.n	f72 <_i2c_master_interrupt_handler+0xda>
     f4a:	2325      	movs	r3, #37	; 0x25
     f4c:	5ce3      	ldrb	r3, [r4, r3]
     f4e:	2b00      	cmp	r3, #0
     f50:	d00f      	beq.n	f72 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     f52:	2303      	movs	r3, #3
     f54:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     f56:	2300      	movs	r3, #0
     f58:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     f5a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     f5c:	3325      	adds	r3, #37	; 0x25
     f5e:	5ce3      	ldrb	r3, [r4, r3]
     f60:	2b41      	cmp	r3, #65	; 0x41
     f62:	d003      	beq.n	f6c <_i2c_master_interrupt_handler+0xd4>
     f64:	7aa3      	ldrb	r3, [r4, #10]
     f66:	2b00      	cmp	r3, #0
     f68:	d000      	beq.n	f6c <_i2c_master_interrupt_handler+0xd4>
     f6a:	e075      	b.n	1058 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     f6c:	0773      	lsls	r3, r6, #29
     f6e:	d500      	bpl.n	f72 <_i2c_master_interrupt_handler+0xda>
     f70:	e07b      	b.n	106a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     f72:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     f74:	8b6b      	ldrh	r3, [r5, #26]
     f76:	075b      	lsls	r3, r3, #29
     f78:	d5d0      	bpl.n	f1c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     f7a:	2218      	movs	r2, #24
     f7c:	2325      	movs	r3, #37	; 0x25
     f7e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     f80:	2300      	movs	r3, #0
     f82:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     f84:	7aa3      	ldrb	r3, [r4, #10]
     f86:	2b00      	cmp	r3, #0
     f88:	d0c8      	beq.n	f1c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     f8a:	0020      	movs	r0, r4
     f8c:	4b3a      	ldr	r3, [pc, #232]	; (1078 <_i2c_master_interrupt_handler+0x1e0>)
     f8e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f90:	686a      	ldr	r2, [r5, #4]
     f92:	23c0      	movs	r3, #192	; 0xc0
     f94:	029b      	lsls	r3, r3, #10
     f96:	4313      	orrs	r3, r2
     f98:	606b      	str	r3, [r5, #4]
     f9a:	e7bf      	b.n	f1c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     f9c:	331f      	adds	r3, #31
     f9e:	5ce3      	ldrb	r3, [r4, r3]
     fa0:	2b00      	cmp	r3, #0
     fa2:	d003      	beq.n	fac <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     fa4:	0020      	movs	r0, r4
     fa6:	4b35      	ldr	r3, [pc, #212]	; (107c <_i2c_master_interrupt_handler+0x1e4>)
     fa8:	4798      	blx	r3
     faa:	e7be      	b.n	f2a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     fac:	0020      	movs	r0, r4
     fae:	4b34      	ldr	r3, [pc, #208]	; (1080 <_i2c_master_interrupt_handler+0x1e8>)
     fb0:	4798      	blx	r3
     fb2:	e7ba      	b.n	f2a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     fb4:	331f      	adds	r3, #31
     fb6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     fb8:	2b00      	cmp	r3, #0
     fba:	d000      	beq.n	fbe <_i2c_master_interrupt_handler+0x126>
     fbc:	e78c      	b.n	ed8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     fbe:	3303      	adds	r3, #3
     fc0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     fc2:	2300      	movs	r3, #0
     fc4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     fc6:	3325      	adds	r3, #37	; 0x25
     fc8:	2200      	movs	r2, #0
     fca:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     fcc:	7aa3      	ldrb	r3, [r4, #10]
     fce:	2b00      	cmp	r3, #0
     fd0:	d107      	bne.n	fe2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     fd2:	2301      	movs	r3, #1
     fd4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     fd6:	07f3      	lsls	r3, r6, #31
     fd8:	d5a7      	bpl.n	f2a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     fda:	68e3      	ldr	r3, [r4, #12]
     fdc:	0020      	movs	r0, r4
     fde:	4798      	blx	r3
     fe0:	e7a3      	b.n	f2a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     fe2:	0020      	movs	r0, r4
     fe4:	4b24      	ldr	r3, [pc, #144]	; (1078 <_i2c_master_interrupt_handler+0x1e0>)
     fe6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     fe8:	686a      	ldr	r2, [r5, #4]
     fea:	23c0      	movs	r3, #192	; 0xc0
     fec:	029b      	lsls	r3, r3, #10
     fee:	4313      	orrs	r3, r2
     ff0:	606b      	str	r3, [r5, #4]
     ff2:	e7f0      	b.n	fd6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     ff4:	2324      	movs	r3, #36	; 0x24
     ff6:	5ce3      	ldrb	r3, [r4, r3]
     ff8:	2b00      	cmp	r3, #0
     ffa:	d103      	bne.n	1004 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     ffc:	0020      	movs	r0, r4
     ffe:	4b20      	ldr	r3, [pc, #128]	; (1080 <_i2c_master_interrupt_handler+0x1e8>)
    1000:	4798      	blx	r3
    1002:	e792      	b.n	f2a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1004:	0020      	movs	r0, r4
    1006:	4b1d      	ldr	r3, [pc, #116]	; (107c <_i2c_master_interrupt_handler+0x1e4>)
    1008:	4798      	blx	r3
    100a:	e78e      	b.n	f2a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    100c:	331f      	adds	r3, #31
    100e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1010:	2b01      	cmp	r3, #1
    1012:	d196      	bne.n	f42 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1014:	7e2b      	ldrb	r3, [r5, #24]
    1016:	079b      	lsls	r3, r3, #30
    1018:	d501      	bpl.n	101e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    101a:	2302      	movs	r3, #2
    101c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    101e:	2303      	movs	r3, #3
    1020:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1022:	2300      	movs	r3, #0
    1024:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1026:	3325      	adds	r3, #37	; 0x25
    1028:	2200      	movs	r2, #0
    102a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    102c:	07b3      	lsls	r3, r6, #30
    102e:	d503      	bpl.n	1038 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1030:	2324      	movs	r3, #36	; 0x24
    1032:	5ce3      	ldrb	r3, [r4, r3]
    1034:	2b01      	cmp	r3, #1
    1036:	d00b      	beq.n	1050 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1038:	07f3      	lsls	r3, r6, #31
    103a:	d400      	bmi.n	103e <_i2c_master_interrupt_handler+0x1a6>
    103c:	e781      	b.n	f42 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    103e:	2324      	movs	r3, #36	; 0x24
    1040:	5ce3      	ldrb	r3, [r4, r3]
    1042:	2b00      	cmp	r3, #0
    1044:	d000      	beq.n	1048 <_i2c_master_interrupt_handler+0x1b0>
    1046:	e77c      	b.n	f42 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1048:	68e3      	ldr	r3, [r4, #12]
    104a:	0020      	movs	r0, r4
    104c:	4798      	blx	r3
    104e:	e778      	b.n	f42 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1050:	6923      	ldr	r3, [r4, #16]
    1052:	0020      	movs	r0, r4
    1054:	4798      	blx	r3
    1056:	e774      	b.n	f42 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1058:	0020      	movs	r0, r4
    105a:	4b07      	ldr	r3, [pc, #28]	; (1078 <_i2c_master_interrupt_handler+0x1e0>)
    105c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    105e:	686a      	ldr	r2, [r5, #4]
    1060:	23e0      	movs	r3, #224	; 0xe0
    1062:	02db      	lsls	r3, r3, #11
    1064:	4313      	orrs	r3, r2
    1066:	606b      	str	r3, [r5, #4]
    1068:	e780      	b.n	f6c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    106a:	6963      	ldr	r3, [r4, #20]
    106c:	0020      	movs	r0, r4
    106e:	4798      	blx	r3
}
    1070:	e77f      	b.n	f72 <_i2c_master_interrupt_handler+0xda>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	200000ec 	.word	0x200000ec
    1078:	00000cc5 	.word	0x00000cc5
    107c:	00000cd1 	.word	0x00000cd1
    1080:	00000d59 	.word	0x00000d59

00001084 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1084:	b5f0      	push	{r4, r5, r6, r7, lr}
    1086:	46c6      	mov	lr, r8
    1088:	b500      	push	{lr}
    108a:	000c      	movs	r4, r1
    108c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    108e:	2800      	cmp	r0, #0
    1090:	d10f      	bne.n	10b2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1092:	2a00      	cmp	r2, #0
    1094:	dd11      	ble.n	10ba <_read+0x36>
    1096:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1098:	4e09      	ldr	r6, [pc, #36]	; (10c0 <_read+0x3c>)
    109a:	4d0a      	ldr	r5, [pc, #40]	; (10c4 <_read+0x40>)
    109c:	6830      	ldr	r0, [r6, #0]
    109e:	0021      	movs	r1, r4
    10a0:	682b      	ldr	r3, [r5, #0]
    10a2:	4798      	blx	r3
		ptr++;
    10a4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    10a6:	42bc      	cmp	r4, r7
    10a8:	d1f8      	bne.n	109c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    10aa:	4640      	mov	r0, r8
    10ac:	bc04      	pop	{r2}
    10ae:	4690      	mov	r8, r2
    10b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    10b2:	2301      	movs	r3, #1
    10b4:	425b      	negs	r3, r3
    10b6:	4698      	mov	r8, r3
    10b8:	e7f7      	b.n	10aa <_read+0x26>
	for (; len > 0; --len) {
    10ba:	4680      	mov	r8, r0
    10bc:	e7f5      	b.n	10aa <_read+0x26>
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	200000e8 	.word	0x200000e8
    10c4:	200000e0 	.word	0x200000e0

000010c8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    10c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ca:	46c6      	mov	lr, r8
    10cc:	b500      	push	{lr}
    10ce:	000e      	movs	r6, r1
    10d0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    10d2:	3801      	subs	r0, #1
    10d4:	2802      	cmp	r0, #2
    10d6:	d810      	bhi.n	10fa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    10d8:	2a00      	cmp	r2, #0
    10da:	d011      	beq.n	1100 <_write+0x38>
    10dc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    10de:	4b0c      	ldr	r3, [pc, #48]	; (1110 <_write+0x48>)
    10e0:	4698      	mov	r8, r3
    10e2:	4f0c      	ldr	r7, [pc, #48]	; (1114 <_write+0x4c>)
    10e4:	4643      	mov	r3, r8
    10e6:	6818      	ldr	r0, [r3, #0]
    10e8:	5d31      	ldrb	r1, [r6, r4]
    10ea:	683b      	ldr	r3, [r7, #0]
    10ec:	4798      	blx	r3
    10ee:	2800      	cmp	r0, #0
    10f0:	db08      	blt.n	1104 <_write+0x3c>
			return -1;
		}
		++nChars;
    10f2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    10f4:	42a5      	cmp	r5, r4
    10f6:	d1f5      	bne.n	10e4 <_write+0x1c>
    10f8:	e006      	b.n	1108 <_write+0x40>
		return -1;
    10fa:	2401      	movs	r4, #1
    10fc:	4264      	negs	r4, r4
    10fe:	e003      	b.n	1108 <_write+0x40>
	for (; len != 0; --len) {
    1100:	0014      	movs	r4, r2
    1102:	e001      	b.n	1108 <_write+0x40>
			return -1;
    1104:	2401      	movs	r4, #1
    1106:	4264      	negs	r4, r4
	}
	return nChars;
}
    1108:	0020      	movs	r0, r4
    110a:	bc04      	pop	{r2}
    110c:	4690      	mov	r8, r2
    110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1110:	200000e8 	.word	0x200000e8
    1114:	200000e4 	.word	0x200000e4

00001118 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1118:	b5f0      	push	{r4, r5, r6, r7, lr}
    111a:	46de      	mov	lr, fp
    111c:	4657      	mov	r7, sl
    111e:	464e      	mov	r6, r9
    1120:	4645      	mov	r5, r8
    1122:	b5e0      	push	{r5, r6, r7, lr}
    1124:	b091      	sub	sp, #68	; 0x44
    1126:	0005      	movs	r5, r0
    1128:	000c      	movs	r4, r1
    112a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    112c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    112e:	0008      	movs	r0, r1
    1130:	4bbc      	ldr	r3, [pc, #752]	; (1424 <usart_init+0x30c>)
    1132:	4798      	blx	r3
    1134:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1136:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1138:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    113a:	07db      	lsls	r3, r3, #31
    113c:	d506      	bpl.n	114c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    113e:	b011      	add	sp, #68	; 0x44
    1140:	bc3c      	pop	{r2, r3, r4, r5}
    1142:	4690      	mov	r8, r2
    1144:	4699      	mov	r9, r3
    1146:	46a2      	mov	sl, r4
    1148:	46ab      	mov	fp, r5
    114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    114c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    114e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1150:	079b      	lsls	r3, r3, #30
    1152:	d4f4      	bmi.n	113e <usart_init+0x26>
    1154:	49b4      	ldr	r1, [pc, #720]	; (1428 <usart_init+0x310>)
    1156:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1158:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    115a:	2301      	movs	r3, #1
    115c:	40bb      	lsls	r3, r7
    115e:	4303      	orrs	r3, r0
    1160:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1162:	a90f      	add	r1, sp, #60	; 0x3c
    1164:	272d      	movs	r7, #45	; 0x2d
    1166:	5df3      	ldrb	r3, [r6, r7]
    1168:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    116a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    116c:	b2d3      	uxtb	r3, r2
    116e:	9302      	str	r3, [sp, #8]
    1170:	0018      	movs	r0, r3
    1172:	4bae      	ldr	r3, [pc, #696]	; (142c <usart_init+0x314>)
    1174:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1176:	9802      	ldr	r0, [sp, #8]
    1178:	4bad      	ldr	r3, [pc, #692]	; (1430 <usart_init+0x318>)
    117a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    117c:	5df0      	ldrb	r0, [r6, r7]
    117e:	2100      	movs	r1, #0
    1180:	4bac      	ldr	r3, [pc, #688]	; (1434 <usart_init+0x31c>)
    1182:	4798      	blx	r3
	module->character_size = config->character_size;
    1184:	7af3      	ldrb	r3, [r6, #11]
    1186:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1188:	2324      	movs	r3, #36	; 0x24
    118a:	5cf3      	ldrb	r3, [r6, r3]
    118c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    118e:	2325      	movs	r3, #37	; 0x25
    1190:	5cf3      	ldrb	r3, [r6, r3]
    1192:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1194:	7ef3      	ldrb	r3, [r6, #27]
    1196:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1198:	7f33      	ldrb	r3, [r6, #28]
    119a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    119c:	682b      	ldr	r3, [r5, #0]
    119e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11a0:	0018      	movs	r0, r3
    11a2:	4ba0      	ldr	r3, [pc, #640]	; (1424 <usart_init+0x30c>)
    11a4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11a6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    11a8:	2200      	movs	r2, #0
    11aa:	230e      	movs	r3, #14
    11ac:	a906      	add	r1, sp, #24
    11ae:	468c      	mov	ip, r1
    11b0:	4463      	add	r3, ip
    11b2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    11b4:	8a32      	ldrh	r2, [r6, #16]
    11b6:	9202      	str	r2, [sp, #8]
    11b8:	2380      	movs	r3, #128	; 0x80
    11ba:	01db      	lsls	r3, r3, #7
    11bc:	429a      	cmp	r2, r3
    11be:	d100      	bne.n	11c2 <usart_init+0xaa>
    11c0:	e09e      	b.n	1300 <usart_init+0x1e8>
    11c2:	d90f      	bls.n	11e4 <usart_init+0xcc>
    11c4:	23c0      	movs	r3, #192	; 0xc0
    11c6:	01db      	lsls	r3, r3, #7
    11c8:	9a02      	ldr	r2, [sp, #8]
    11ca:	429a      	cmp	r2, r3
    11cc:	d100      	bne.n	11d0 <usart_init+0xb8>
    11ce:	e092      	b.n	12f6 <usart_init+0x1de>
    11d0:	2380      	movs	r3, #128	; 0x80
    11d2:	021b      	lsls	r3, r3, #8
    11d4:	429a      	cmp	r2, r3
    11d6:	d000      	beq.n	11da <usart_init+0xc2>
    11d8:	e11f      	b.n	141a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    11da:	2303      	movs	r3, #3
    11dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11de:	2300      	movs	r3, #0
    11e0:	9307      	str	r3, [sp, #28]
    11e2:	e008      	b.n	11f6 <usart_init+0xde>
	switch (config->sample_rate) {
    11e4:	2380      	movs	r3, #128	; 0x80
    11e6:	019b      	lsls	r3, r3, #6
    11e8:	429a      	cmp	r2, r3
    11ea:	d000      	beq.n	11ee <usart_init+0xd6>
    11ec:	e115      	b.n	141a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11ee:	2310      	movs	r3, #16
    11f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    11f2:	3b0f      	subs	r3, #15
    11f4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    11f6:	6833      	ldr	r3, [r6, #0]
    11f8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    11fa:	68f3      	ldr	r3, [r6, #12]
    11fc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    11fe:	6973      	ldr	r3, [r6, #20]
    1200:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1202:	7e33      	ldrb	r3, [r6, #24]
    1204:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1206:	2326      	movs	r3, #38	; 0x26
    1208:	5cf3      	ldrb	r3, [r6, r3]
    120a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    120c:	6873      	ldr	r3, [r6, #4]
    120e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1210:	2b00      	cmp	r3, #0
    1212:	d100      	bne.n	1216 <usart_init+0xfe>
    1214:	e0a0      	b.n	1358 <usart_init+0x240>
    1216:	2380      	movs	r3, #128	; 0x80
    1218:	055b      	lsls	r3, r3, #21
    121a:	4599      	cmp	r9, r3
    121c:	d100      	bne.n	1220 <usart_init+0x108>
    121e:	e084      	b.n	132a <usart_init+0x212>
	if(config->encoding_format_enable) {
    1220:	7e73      	ldrb	r3, [r6, #25]
    1222:	2b00      	cmp	r3, #0
    1224:	d002      	beq.n	122c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1226:	7eb3      	ldrb	r3, [r6, #26]
    1228:	4642      	mov	r2, r8
    122a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    122c:	682a      	ldr	r2, [r5, #0]
    122e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1230:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1232:	2b00      	cmp	r3, #0
    1234:	d1fc      	bne.n	1230 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1236:	330e      	adds	r3, #14
    1238:	aa06      	add	r2, sp, #24
    123a:	4694      	mov	ip, r2
    123c:	4463      	add	r3, ip
    123e:	881b      	ldrh	r3, [r3, #0]
    1240:	4642      	mov	r2, r8
    1242:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1244:	9b05      	ldr	r3, [sp, #20]
    1246:	9a03      	ldr	r2, [sp, #12]
    1248:	4313      	orrs	r3, r2
    124a:	9a04      	ldr	r2, [sp, #16]
    124c:	4313      	orrs	r3, r2
    124e:	464a      	mov	r2, r9
    1250:	4313      	orrs	r3, r2
    1252:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1254:	465b      	mov	r3, fp
    1256:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1258:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    125a:	4653      	mov	r3, sl
    125c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    125e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1260:	2327      	movs	r3, #39	; 0x27
    1262:	5cf3      	ldrb	r3, [r6, r3]
    1264:	2b00      	cmp	r3, #0
    1266:	d101      	bne.n	126c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1268:	3304      	adds	r3, #4
    126a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    126c:	7e73      	ldrb	r3, [r6, #25]
    126e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1270:	7f32      	ldrb	r2, [r6, #28]
    1272:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1274:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1276:	7f72      	ldrb	r2, [r6, #29]
    1278:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    127a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    127c:	2224      	movs	r2, #36	; 0x24
    127e:	5cb2      	ldrb	r2, [r6, r2]
    1280:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1282:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1284:	2225      	movs	r2, #37	; 0x25
    1286:	5cb2      	ldrb	r2, [r6, r2]
    1288:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    128a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    128c:	7ab1      	ldrb	r1, [r6, #10]
    128e:	7af2      	ldrb	r2, [r6, #11]
    1290:	4311      	orrs	r1, r2
    1292:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1294:	8933      	ldrh	r3, [r6, #8]
    1296:	2bff      	cmp	r3, #255	; 0xff
    1298:	d100      	bne.n	129c <usart_init+0x184>
    129a:	e081      	b.n	13a0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    129c:	2280      	movs	r2, #128	; 0x80
    129e:	0452      	lsls	r2, r2, #17
    12a0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    12a2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    12a4:	232c      	movs	r3, #44	; 0x2c
    12a6:	5cf3      	ldrb	r3, [r6, r3]
    12a8:	2b00      	cmp	r3, #0
    12aa:	d103      	bne.n	12b4 <usart_init+0x19c>
    12ac:	4b62      	ldr	r3, [pc, #392]	; (1438 <usart_init+0x320>)
    12ae:	789b      	ldrb	r3, [r3, #2]
    12b0:	079b      	lsls	r3, r3, #30
    12b2:	d501      	bpl.n	12b8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    12b4:	2380      	movs	r3, #128	; 0x80
    12b6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    12b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    12ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    12bc:	2b00      	cmp	r3, #0
    12be:	d1fc      	bne.n	12ba <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    12c0:	4643      	mov	r3, r8
    12c2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    12c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    12c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    12c8:	2b00      	cmp	r3, #0
    12ca:	d1fc      	bne.n	12c6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    12cc:	4643      	mov	r3, r8
    12ce:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12d0:	ab0e      	add	r3, sp, #56	; 0x38
    12d2:	2280      	movs	r2, #128	; 0x80
    12d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12d6:	2200      	movs	r2, #0
    12d8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    12da:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    12dc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    12de:	6b33      	ldr	r3, [r6, #48]	; 0x30
    12e0:	930a      	str	r3, [sp, #40]	; 0x28
    12e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    12e4:	930b      	str	r3, [sp, #44]	; 0x2c
    12e6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    12e8:	930c      	str	r3, [sp, #48]	; 0x30
    12ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    12ec:	9302      	str	r3, [sp, #8]
    12ee:	930d      	str	r3, [sp, #52]	; 0x34
    12f0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12f2:	ae0a      	add	r6, sp, #40	; 0x28
    12f4:	e063      	b.n	13be <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    12f6:	2308      	movs	r3, #8
    12f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    12fa:	3b07      	subs	r3, #7
    12fc:	9307      	str	r3, [sp, #28]
    12fe:	e77a      	b.n	11f6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1300:	6833      	ldr	r3, [r6, #0]
    1302:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1304:	68f3      	ldr	r3, [r6, #12]
    1306:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1308:	6973      	ldr	r3, [r6, #20]
    130a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    130c:	7e33      	ldrb	r3, [r6, #24]
    130e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1310:	2326      	movs	r3, #38	; 0x26
    1312:	5cf3      	ldrb	r3, [r6, r3]
    1314:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1316:	6873      	ldr	r3, [r6, #4]
    1318:	4699      	mov	r9, r3
	switch (transfer_mode)
    131a:	2b00      	cmp	r3, #0
    131c:	d018      	beq.n	1350 <usart_init+0x238>
    131e:	2380      	movs	r3, #128	; 0x80
    1320:	055b      	lsls	r3, r3, #21
    1322:	4599      	cmp	r9, r3
    1324:	d001      	beq.n	132a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1326:	2000      	movs	r0, #0
    1328:	e025      	b.n	1376 <usart_init+0x25e>
			if (!config->use_external_clock) {
    132a:	2327      	movs	r3, #39	; 0x27
    132c:	5cf3      	ldrb	r3, [r6, r3]
    132e:	2b00      	cmp	r3, #0
    1330:	d000      	beq.n	1334 <usart_init+0x21c>
    1332:	e775      	b.n	1220 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1334:	6a33      	ldr	r3, [r6, #32]
    1336:	001f      	movs	r7, r3
    1338:	b2c0      	uxtb	r0, r0
    133a:	4b40      	ldr	r3, [pc, #256]	; (143c <usart_init+0x324>)
    133c:	4798      	blx	r3
    133e:	0001      	movs	r1, r0
    1340:	220e      	movs	r2, #14
    1342:	ab06      	add	r3, sp, #24
    1344:	469c      	mov	ip, r3
    1346:	4462      	add	r2, ip
    1348:	0038      	movs	r0, r7
    134a:	4b3d      	ldr	r3, [pc, #244]	; (1440 <usart_init+0x328>)
    134c:	4798      	blx	r3
    134e:	e012      	b.n	1376 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1350:	2308      	movs	r3, #8
    1352:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1354:	2300      	movs	r3, #0
    1356:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1358:	2327      	movs	r3, #39	; 0x27
    135a:	5cf3      	ldrb	r3, [r6, r3]
    135c:	2b00      	cmp	r3, #0
    135e:	d00e      	beq.n	137e <usart_init+0x266>
				status_code =
    1360:	9b06      	ldr	r3, [sp, #24]
    1362:	9300      	str	r3, [sp, #0]
    1364:	9b07      	ldr	r3, [sp, #28]
    1366:	220e      	movs	r2, #14
    1368:	a906      	add	r1, sp, #24
    136a:	468c      	mov	ip, r1
    136c:	4462      	add	r2, ip
    136e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1370:	6a30      	ldr	r0, [r6, #32]
    1372:	4f34      	ldr	r7, [pc, #208]	; (1444 <usart_init+0x32c>)
    1374:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1376:	2800      	cmp	r0, #0
    1378:	d000      	beq.n	137c <usart_init+0x264>
    137a:	e6e0      	b.n	113e <usart_init+0x26>
    137c:	e750      	b.n	1220 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    137e:	6a33      	ldr	r3, [r6, #32]
    1380:	001f      	movs	r7, r3
    1382:	b2c0      	uxtb	r0, r0
    1384:	4b2d      	ldr	r3, [pc, #180]	; (143c <usart_init+0x324>)
    1386:	4798      	blx	r3
    1388:	0001      	movs	r1, r0
				status_code =
    138a:	9b06      	ldr	r3, [sp, #24]
    138c:	9300      	str	r3, [sp, #0]
    138e:	9b07      	ldr	r3, [sp, #28]
    1390:	220e      	movs	r2, #14
    1392:	a806      	add	r0, sp, #24
    1394:	4684      	mov	ip, r0
    1396:	4462      	add	r2, ip
    1398:	0038      	movs	r0, r7
    139a:	4f2a      	ldr	r7, [pc, #168]	; (1444 <usart_init+0x32c>)
    139c:	47b8      	blx	r7
    139e:	e7ea      	b.n	1376 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    13a0:	7ef3      	ldrb	r3, [r6, #27]
    13a2:	2b00      	cmp	r3, #0
    13a4:	d100      	bne.n	13a8 <usart_init+0x290>
    13a6:	e77d      	b.n	12a4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    13a8:	2380      	movs	r3, #128	; 0x80
    13aa:	04db      	lsls	r3, r3, #19
    13ac:	431f      	orrs	r7, r3
    13ae:	e779      	b.n	12a4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    13b0:	0020      	movs	r0, r4
    13b2:	4b25      	ldr	r3, [pc, #148]	; (1448 <usart_init+0x330>)
    13b4:	4798      	blx	r3
    13b6:	e007      	b.n	13c8 <usart_init+0x2b0>
    13b8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    13ba:	2f04      	cmp	r7, #4
    13bc:	d00d      	beq.n	13da <usart_init+0x2c2>
    13be:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    13c0:	00bb      	lsls	r3, r7, #2
    13c2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    13c4:	2800      	cmp	r0, #0
    13c6:	d0f3      	beq.n	13b0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    13c8:	1c43      	adds	r3, r0, #1
    13ca:	d0f5      	beq.n	13b8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    13cc:	a90e      	add	r1, sp, #56	; 0x38
    13ce:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    13d0:	0c00      	lsrs	r0, r0, #16
    13d2:	b2c0      	uxtb	r0, r0
    13d4:	4b1d      	ldr	r3, [pc, #116]	; (144c <usart_init+0x334>)
    13d6:	4798      	blx	r3
    13d8:	e7ee      	b.n	13b8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    13da:	2300      	movs	r3, #0
    13dc:	60eb      	str	r3, [r5, #12]
    13de:	612b      	str	r3, [r5, #16]
    13e0:	616b      	str	r3, [r5, #20]
    13e2:	61ab      	str	r3, [r5, #24]
    13e4:	61eb      	str	r3, [r5, #28]
    13e6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    13e8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    13ea:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    13ec:	2200      	movs	r2, #0
    13ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    13f0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    13f2:	3330      	adds	r3, #48	; 0x30
    13f4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    13f6:	3301      	adds	r3, #1
    13f8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    13fa:	3301      	adds	r3, #1
    13fc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    13fe:	3301      	adds	r3, #1
    1400:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1402:	6828      	ldr	r0, [r5, #0]
    1404:	4b07      	ldr	r3, [pc, #28]	; (1424 <usart_init+0x30c>)
    1406:	4798      	blx	r3
    1408:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    140a:	4911      	ldr	r1, [pc, #68]	; (1450 <usart_init+0x338>)
    140c:	4b11      	ldr	r3, [pc, #68]	; (1454 <usart_init+0x33c>)
    140e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1410:	00a4      	lsls	r4, r4, #2
    1412:	4b11      	ldr	r3, [pc, #68]	; (1458 <usart_init+0x340>)
    1414:	50e5      	str	r5, [r4, r3]
	return status_code;
    1416:	2000      	movs	r0, #0
    1418:	e691      	b.n	113e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    141a:	2310      	movs	r3, #16
    141c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    141e:	2300      	movs	r3, #0
    1420:	9307      	str	r3, [sp, #28]
    1422:	e6e8      	b.n	11f6 <usart_init+0xde>
    1424:	00001a3d 	.word	0x00001a3d
    1428:	40000400 	.word	0x40000400
    142c:	00002095 	.word	0x00002095
    1430:	00002009 	.word	0x00002009
    1434:	00001879 	.word	0x00001879
    1438:	41002000 	.word	0x41002000
    143c:	000020b1 	.word	0x000020b1
    1440:	000017bb 	.word	0x000017bb
    1444:	000017e5 	.word	0x000017e5
    1448:	000018c5 	.word	0x000018c5
    144c:	0000218d 	.word	0x0000218d
    1450:	0000156d 	.word	0x0000156d
    1454:	00001a79 	.word	0x00001a79
    1458:	200000ec 	.word	0x200000ec

0000145c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    145c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    145e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1460:	2a00      	cmp	r2, #0
    1462:	d101      	bne.n	1468 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1464:	0018      	movs	r0, r3
    1466:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1468:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    146a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    146c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    146e:	2a00      	cmp	r2, #0
    1470:	d1f8      	bne.n	1464 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1472:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1474:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1476:	2a00      	cmp	r2, #0
    1478:	d1fc      	bne.n	1474 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    147a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    147c:	2102      	movs	r1, #2
    147e:	7e1a      	ldrb	r2, [r3, #24]
    1480:	420a      	tst	r2, r1
    1482:	d0fc      	beq.n	147e <usart_write_wait+0x22>
	return STATUS_OK;
    1484:	2300      	movs	r3, #0
    1486:	e7ed      	b.n	1464 <usart_write_wait+0x8>

00001488 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1488:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    148a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    148c:	2a00      	cmp	r2, #0
    148e:	d101      	bne.n	1494 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1490:	0018      	movs	r0, r3
    1492:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1494:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1496:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1498:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    149a:	2a00      	cmp	r2, #0
    149c:	d1f8      	bne.n	1490 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    149e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    14a0:	7e10      	ldrb	r0, [r2, #24]
    14a2:	0740      	lsls	r0, r0, #29
    14a4:	d5f4      	bpl.n	1490 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    14a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14a8:	2b00      	cmp	r3, #0
    14aa:	d1fc      	bne.n	14a6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14ac:	8b53      	ldrh	r3, [r2, #26]
    14ae:	b2db      	uxtb	r3, r3
	if (error_code) {
    14b0:	0698      	lsls	r0, r3, #26
    14b2:	d01d      	beq.n	14f0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    14b4:	0798      	lsls	r0, r3, #30
    14b6:	d503      	bpl.n	14c0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    14b8:	2302      	movs	r3, #2
    14ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    14bc:	3318      	adds	r3, #24
    14be:	e7e7      	b.n	1490 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    14c0:	0758      	lsls	r0, r3, #29
    14c2:	d503      	bpl.n	14cc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    14c4:	2304      	movs	r3, #4
    14c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    14c8:	331a      	adds	r3, #26
    14ca:	e7e1      	b.n	1490 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    14cc:	07d8      	lsls	r0, r3, #31
    14ce:	d503      	bpl.n	14d8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    14d0:	2301      	movs	r3, #1
    14d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    14d4:	3312      	adds	r3, #18
    14d6:	e7db      	b.n	1490 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    14d8:	06d8      	lsls	r0, r3, #27
    14da:	d503      	bpl.n	14e4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    14dc:	2310      	movs	r3, #16
    14de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    14e0:	3332      	adds	r3, #50	; 0x32
    14e2:	e7d5      	b.n	1490 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    14e4:	069b      	lsls	r3, r3, #26
    14e6:	d503      	bpl.n	14f0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    14e8:	2320      	movs	r3, #32
    14ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    14ec:	3321      	adds	r3, #33	; 0x21
    14ee:	e7cf      	b.n	1490 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    14f0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    14f2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    14f4:	2300      	movs	r3, #0
    14f6:	e7cb      	b.n	1490 <usart_read_wait+0x8>

000014f8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    14f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14fa:	0006      	movs	r6, r0
    14fc:	000c      	movs	r4, r1
    14fe:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1500:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1502:	4b0a      	ldr	r3, [pc, #40]	; (152c <_usart_write_buffer+0x34>)
    1504:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1506:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1508:	b29b      	uxth	r3, r3
    150a:	2b00      	cmp	r3, #0
    150c:	d003      	beq.n	1516 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    150e:	4b08      	ldr	r3, [pc, #32]	; (1530 <_usart_write_buffer+0x38>)
    1510:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1512:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    1516:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1518:	4b05      	ldr	r3, [pc, #20]	; (1530 <_usart_write_buffer+0x38>)
    151a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    151c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    151e:	2205      	movs	r2, #5
    1520:	2333      	movs	r3, #51	; 0x33
    1522:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1524:	3b32      	subs	r3, #50	; 0x32
    1526:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    1528:	2000      	movs	r0, #0
    152a:	e7f3      	b.n	1514 <_usart_write_buffer+0x1c>
    152c:	00001be1 	.word	0x00001be1
    1530:	00001c21 	.word	0x00001c21

00001534 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1534:	1c93      	adds	r3, r2, #2
    1536:	009b      	lsls	r3, r3, #2
    1538:	18c3      	adds	r3, r0, r3
    153a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    153c:	2130      	movs	r1, #48	; 0x30
    153e:	2301      	movs	r3, #1
    1540:	4093      	lsls	r3, r2
    1542:	001a      	movs	r2, r3
    1544:	5c43      	ldrb	r3, [r0, r1]
    1546:	4313      	orrs	r3, r2
    1548:	5443      	strb	r3, [r0, r1]
}
    154a:	4770      	bx	lr

0000154c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    154c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    154e:	2317      	movs	r3, #23
	if (length == 0) {
    1550:	2a00      	cmp	r2, #0
    1552:	d101      	bne.n	1558 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1554:	0018      	movs	r0, r3
    1556:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    1558:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    155a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    155c:	2c00      	cmp	r4, #0
    155e:	d0f9      	beq.n	1554 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    1560:	4b01      	ldr	r3, [pc, #4]	; (1568 <usart_write_buffer_job+0x1c>)
    1562:	4798      	blx	r3
    1564:	0003      	movs	r3, r0
    1566:	e7f5      	b.n	1554 <usart_write_buffer_job+0x8>
    1568:	000014f9 	.word	0x000014f9

0000156c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    156e:	0080      	lsls	r0, r0, #2
    1570:	4b62      	ldr	r3, [pc, #392]	; (16fc <_usart_interrupt_handler+0x190>)
    1572:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1574:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1576:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1578:	2b00      	cmp	r3, #0
    157a:	d1fc      	bne.n	1576 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    157c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    157e:	7da6      	ldrb	r6, [r4, #22]
    1580:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1582:	2330      	movs	r3, #48	; 0x30
    1584:	5ceb      	ldrb	r3, [r5, r3]
    1586:	2231      	movs	r2, #49	; 0x31
    1588:	5caf      	ldrb	r7, [r5, r2]
    158a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    158c:	07f3      	lsls	r3, r6, #31
    158e:	d522      	bpl.n	15d6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1590:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1592:	b29b      	uxth	r3, r3
    1594:	2b00      	cmp	r3, #0
    1596:	d01c      	beq.n	15d2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1598:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    159a:	7813      	ldrb	r3, [r2, #0]
    159c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    159e:	1c51      	adds	r1, r2, #1
    15a0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    15a2:	7969      	ldrb	r1, [r5, #5]
    15a4:	2901      	cmp	r1, #1
    15a6:	d00e      	beq.n	15c6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    15a8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    15aa:	05db      	lsls	r3, r3, #23
    15ac:	0ddb      	lsrs	r3, r3, #23
    15ae:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    15b0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    15b2:	3b01      	subs	r3, #1
    15b4:	b29b      	uxth	r3, r3
    15b6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    15b8:	2b00      	cmp	r3, #0
    15ba:	d10c      	bne.n	15d6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    15bc:	3301      	adds	r3, #1
    15be:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    15c0:	3301      	adds	r3, #1
    15c2:	75a3      	strb	r3, [r4, #22]
    15c4:	e007      	b.n	15d6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    15c6:	7851      	ldrb	r1, [r2, #1]
    15c8:	0209      	lsls	r1, r1, #8
    15ca:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    15cc:	3202      	adds	r2, #2
    15ce:	62aa      	str	r2, [r5, #40]	; 0x28
    15d0:	e7eb      	b.n	15aa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    15d2:	2301      	movs	r3, #1
    15d4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    15d6:	07b3      	lsls	r3, r6, #30
    15d8:	d506      	bpl.n	15e8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    15da:	2302      	movs	r3, #2
    15dc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    15de:	2200      	movs	r2, #0
    15e0:	3331      	adds	r3, #49	; 0x31
    15e2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    15e4:	07fb      	lsls	r3, r7, #31
    15e6:	d41a      	bmi.n	161e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    15e8:	0773      	lsls	r3, r6, #29
    15ea:	d565      	bpl.n	16b8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    15ec:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    15ee:	b29b      	uxth	r3, r3
    15f0:	2b00      	cmp	r3, #0
    15f2:	d05f      	beq.n	16b4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15f4:	8b63      	ldrh	r3, [r4, #26]
    15f6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    15f8:	071a      	lsls	r2, r3, #28
    15fa:	d414      	bmi.n	1626 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15fc:	223f      	movs	r2, #63	; 0x3f
    15fe:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1600:	2b00      	cmp	r3, #0
    1602:	d034      	beq.n	166e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1604:	079a      	lsls	r2, r3, #30
    1606:	d511      	bpl.n	162c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1608:	221a      	movs	r2, #26
    160a:	2332      	movs	r3, #50	; 0x32
    160c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    160e:	3b30      	subs	r3, #48	; 0x30
    1610:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1612:	077b      	lsls	r3, r7, #29
    1614:	d550      	bpl.n	16b8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1616:	0028      	movs	r0, r5
    1618:	696b      	ldr	r3, [r5, #20]
    161a:	4798      	blx	r3
    161c:	e04c      	b.n	16b8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    161e:	0028      	movs	r0, r5
    1620:	68eb      	ldr	r3, [r5, #12]
    1622:	4798      	blx	r3
    1624:	e7e0      	b.n	15e8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1626:	2237      	movs	r2, #55	; 0x37
    1628:	4013      	ands	r3, r2
    162a:	e7e9      	b.n	1600 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    162c:	075a      	lsls	r2, r3, #29
    162e:	d505      	bpl.n	163c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1630:	221e      	movs	r2, #30
    1632:	2332      	movs	r3, #50	; 0x32
    1634:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1636:	3b2e      	subs	r3, #46	; 0x2e
    1638:	8363      	strh	r3, [r4, #26]
    163a:	e7ea      	b.n	1612 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    163c:	07da      	lsls	r2, r3, #31
    163e:	d505      	bpl.n	164c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1640:	2213      	movs	r2, #19
    1642:	2332      	movs	r3, #50	; 0x32
    1644:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1646:	3b31      	subs	r3, #49	; 0x31
    1648:	8363      	strh	r3, [r4, #26]
    164a:	e7e2      	b.n	1612 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    164c:	06da      	lsls	r2, r3, #27
    164e:	d505      	bpl.n	165c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1650:	2242      	movs	r2, #66	; 0x42
    1652:	2332      	movs	r3, #50	; 0x32
    1654:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1656:	3b22      	subs	r3, #34	; 0x22
    1658:	8363      	strh	r3, [r4, #26]
    165a:	e7da      	b.n	1612 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    165c:	2220      	movs	r2, #32
    165e:	421a      	tst	r2, r3
    1660:	d0d7      	beq.n	1612 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1662:	3221      	adds	r2, #33	; 0x21
    1664:	2332      	movs	r3, #50	; 0x32
    1666:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1668:	3b12      	subs	r3, #18
    166a:	8363      	strh	r3, [r4, #26]
    166c:	e7d1      	b.n	1612 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    166e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1670:	05db      	lsls	r3, r3, #23
    1672:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1674:	b2da      	uxtb	r2, r3
    1676:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1678:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    167a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    167c:	1c51      	adds	r1, r2, #1
    167e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1680:	7969      	ldrb	r1, [r5, #5]
    1682:	2901      	cmp	r1, #1
    1684:	d010      	beq.n	16a8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1686:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1688:	3b01      	subs	r3, #1
    168a:	b29b      	uxth	r3, r3
    168c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    168e:	2b00      	cmp	r3, #0
    1690:	d112      	bne.n	16b8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1692:	3304      	adds	r3, #4
    1694:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1696:	2200      	movs	r2, #0
    1698:	332e      	adds	r3, #46	; 0x2e
    169a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    169c:	07bb      	lsls	r3, r7, #30
    169e:	d50b      	bpl.n	16b8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    16a0:	0028      	movs	r0, r5
    16a2:	692b      	ldr	r3, [r5, #16]
    16a4:	4798      	blx	r3
    16a6:	e007      	b.n	16b8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    16a8:	0a1b      	lsrs	r3, r3, #8
    16aa:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    16ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    16ae:	3301      	adds	r3, #1
    16b0:	626b      	str	r3, [r5, #36]	; 0x24
    16b2:	e7e8      	b.n	1686 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    16b4:	2304      	movs	r3, #4
    16b6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    16b8:	06f3      	lsls	r3, r6, #27
    16ba:	d504      	bpl.n	16c6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    16bc:	2310      	movs	r3, #16
    16be:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    16c0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    16c2:	06fb      	lsls	r3, r7, #27
    16c4:	d40e      	bmi.n	16e4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    16c6:	06b3      	lsls	r3, r6, #26
    16c8:	d504      	bpl.n	16d4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    16ca:	2320      	movs	r3, #32
    16cc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    16ce:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    16d0:	073b      	lsls	r3, r7, #28
    16d2:	d40b      	bmi.n	16ec <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    16d4:	0733      	lsls	r3, r6, #28
    16d6:	d504      	bpl.n	16e2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    16d8:	2308      	movs	r3, #8
    16da:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    16dc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    16de:	06bb      	lsls	r3, r7, #26
    16e0:	d408      	bmi.n	16f4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    16e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    16e4:	0028      	movs	r0, r5
    16e6:	69eb      	ldr	r3, [r5, #28]
    16e8:	4798      	blx	r3
    16ea:	e7ec      	b.n	16c6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    16ec:	0028      	movs	r0, r5
    16ee:	69ab      	ldr	r3, [r5, #24]
    16f0:	4798      	blx	r3
    16f2:	e7ef      	b.n	16d4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    16f4:	6a2b      	ldr	r3, [r5, #32]
    16f6:	0028      	movs	r0, r5
    16f8:	4798      	blx	r3
}
    16fa:	e7f2      	b.n	16e2 <_usart_interrupt_handler+0x176>
    16fc:	200000ec 	.word	0x200000ec

00001700 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1700:	b5f0      	push	{r4, r5, r6, r7, lr}
    1702:	46de      	mov	lr, fp
    1704:	4657      	mov	r7, sl
    1706:	464e      	mov	r6, r9
    1708:	4645      	mov	r5, r8
    170a:	b5e0      	push	{r5, r6, r7, lr}
    170c:	b087      	sub	sp, #28
    170e:	4680      	mov	r8, r0
    1710:	9104      	str	r1, [sp, #16]
    1712:	0016      	movs	r6, r2
    1714:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1716:	2200      	movs	r2, #0
    1718:	2300      	movs	r3, #0
    171a:	2100      	movs	r1, #0
    171c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    171e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1720:	2001      	movs	r0, #1
    1722:	0021      	movs	r1, r4
    1724:	9600      	str	r6, [sp, #0]
    1726:	9701      	str	r7, [sp, #4]
    1728:	465c      	mov	r4, fp
    172a:	9403      	str	r4, [sp, #12]
    172c:	4644      	mov	r4, r8
    172e:	9405      	str	r4, [sp, #20]
    1730:	e013      	b.n	175a <long_division+0x5a>
    1732:	2420      	movs	r4, #32
    1734:	1a64      	subs	r4, r4, r1
    1736:	0005      	movs	r5, r0
    1738:	40e5      	lsrs	r5, r4
    173a:	46a8      	mov	r8, r5
    173c:	e014      	b.n	1768 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    173e:	9c00      	ldr	r4, [sp, #0]
    1740:	9d01      	ldr	r5, [sp, #4]
    1742:	1b12      	subs	r2, r2, r4
    1744:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1746:	465c      	mov	r4, fp
    1748:	464d      	mov	r5, r9
    174a:	432c      	orrs	r4, r5
    174c:	46a3      	mov	fp, r4
    174e:	9c03      	ldr	r4, [sp, #12]
    1750:	4645      	mov	r5, r8
    1752:	432c      	orrs	r4, r5
    1754:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1756:	3901      	subs	r1, #1
    1758:	d325      	bcc.n	17a6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    175a:	2420      	movs	r4, #32
    175c:	4264      	negs	r4, r4
    175e:	190c      	adds	r4, r1, r4
    1760:	d4e7      	bmi.n	1732 <long_division+0x32>
    1762:	0005      	movs	r5, r0
    1764:	40a5      	lsls	r5, r4
    1766:	46a8      	mov	r8, r5
    1768:	0004      	movs	r4, r0
    176a:	408c      	lsls	r4, r1
    176c:	46a1      	mov	r9, r4
		r = r << 1;
    176e:	1892      	adds	r2, r2, r2
    1770:	415b      	adcs	r3, r3
    1772:	0014      	movs	r4, r2
    1774:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1776:	9e05      	ldr	r6, [sp, #20]
    1778:	464f      	mov	r7, r9
    177a:	403e      	ands	r6, r7
    177c:	46b4      	mov	ip, r6
    177e:	9e04      	ldr	r6, [sp, #16]
    1780:	4647      	mov	r7, r8
    1782:	403e      	ands	r6, r7
    1784:	46b2      	mov	sl, r6
    1786:	4666      	mov	r6, ip
    1788:	4657      	mov	r7, sl
    178a:	433e      	orrs	r6, r7
    178c:	d003      	beq.n	1796 <long_division+0x96>
			r |= 0x01;
    178e:	0006      	movs	r6, r0
    1790:	4326      	orrs	r6, r4
    1792:	0032      	movs	r2, r6
    1794:	002b      	movs	r3, r5
		if (r >= d) {
    1796:	9c00      	ldr	r4, [sp, #0]
    1798:	9d01      	ldr	r5, [sp, #4]
    179a:	429d      	cmp	r5, r3
    179c:	d8db      	bhi.n	1756 <long_division+0x56>
    179e:	d1ce      	bne.n	173e <long_division+0x3e>
    17a0:	4294      	cmp	r4, r2
    17a2:	d8d8      	bhi.n	1756 <long_division+0x56>
    17a4:	e7cb      	b.n	173e <long_division+0x3e>
    17a6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    17a8:	4658      	mov	r0, fp
    17aa:	0019      	movs	r1, r3
    17ac:	b007      	add	sp, #28
    17ae:	bc3c      	pop	{r2, r3, r4, r5}
    17b0:	4690      	mov	r8, r2
    17b2:	4699      	mov	r9, r3
    17b4:	46a2      	mov	sl, r4
    17b6:	46ab      	mov	fp, r5
    17b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000017ba <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    17ba:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    17bc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    17be:	2340      	movs	r3, #64	; 0x40
    17c0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    17c2:	4281      	cmp	r1, r0
    17c4:	d202      	bcs.n	17cc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    17c6:	0018      	movs	r0, r3
    17c8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    17ca:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    17cc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    17ce:	1c63      	adds	r3, r4, #1
    17d0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    17d2:	4288      	cmp	r0, r1
    17d4:	d9f9      	bls.n	17ca <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    17d6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    17d8:	2cff      	cmp	r4, #255	; 0xff
    17da:	d8f4      	bhi.n	17c6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    17dc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    17de:	2300      	movs	r3, #0
    17e0:	e7f1      	b.n	17c6 <_sercom_get_sync_baud_val+0xc>
	...

000017e4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    17e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e6:	b083      	sub	sp, #12
    17e8:	000f      	movs	r7, r1
    17ea:	0016      	movs	r6, r2
    17ec:	aa08      	add	r2, sp, #32
    17ee:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    17f0:	0004      	movs	r4, r0
    17f2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    17f4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    17f6:	42bc      	cmp	r4, r7
    17f8:	d902      	bls.n	1800 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    17fa:	0010      	movs	r0, r2
    17fc:	b003      	add	sp, #12
    17fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1800:	2b00      	cmp	r3, #0
    1802:	d114      	bne.n	182e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1804:	0002      	movs	r2, r0
    1806:	0008      	movs	r0, r1
    1808:	2100      	movs	r1, #0
    180a:	4c19      	ldr	r4, [pc, #100]	; (1870 <_sercom_get_async_baud_val+0x8c>)
    180c:	47a0      	blx	r4
    180e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1810:	003a      	movs	r2, r7
    1812:	2300      	movs	r3, #0
    1814:	2000      	movs	r0, #0
    1816:	4c17      	ldr	r4, [pc, #92]	; (1874 <_sercom_get_async_baud_val+0x90>)
    1818:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    181a:	2200      	movs	r2, #0
    181c:	2301      	movs	r3, #1
    181e:	1a12      	subs	r2, r2, r0
    1820:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1822:	0c12      	lsrs	r2, r2, #16
    1824:	041b      	lsls	r3, r3, #16
    1826:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1828:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    182a:	2200      	movs	r2, #0
    182c:	e7e5      	b.n	17fa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    182e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1830:	2b01      	cmp	r3, #1
    1832:	d1f9      	bne.n	1828 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1834:	000a      	movs	r2, r1
    1836:	2300      	movs	r3, #0
    1838:	2100      	movs	r1, #0
    183a:	4c0d      	ldr	r4, [pc, #52]	; (1870 <_sercom_get_async_baud_val+0x8c>)
    183c:	47a0      	blx	r4
    183e:	0002      	movs	r2, r0
    1840:	000b      	movs	r3, r1
    1842:	9200      	str	r2, [sp, #0]
    1844:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1846:	0038      	movs	r0, r7
    1848:	2100      	movs	r1, #0
    184a:	4c0a      	ldr	r4, [pc, #40]	; (1874 <_sercom_get_async_baud_val+0x90>)
    184c:	47a0      	blx	r4
    184e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1850:	2380      	movs	r3, #128	; 0x80
    1852:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1854:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1856:	4298      	cmp	r0, r3
    1858:	d8cf      	bhi.n	17fa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    185a:	0f79      	lsrs	r1, r7, #29
    185c:	00f8      	lsls	r0, r7, #3
    185e:	9a00      	ldr	r2, [sp, #0]
    1860:	9b01      	ldr	r3, [sp, #4]
    1862:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1864:	00ea      	lsls	r2, r5, #3
    1866:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1868:	b2d2      	uxtb	r2, r2
    186a:	0352      	lsls	r2, r2, #13
    186c:	432a      	orrs	r2, r5
    186e:	e7db      	b.n	1828 <_sercom_get_async_baud_val+0x44>
    1870:	0000281d 	.word	0x0000281d
    1874:	00001701 	.word	0x00001701

00001878 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1878:	b510      	push	{r4, lr}
    187a:	b082      	sub	sp, #8
    187c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    187e:	4b0e      	ldr	r3, [pc, #56]	; (18b8 <sercom_set_gclk_generator+0x40>)
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d007      	beq.n	1896 <sercom_set_gclk_generator+0x1e>
    1886:	2900      	cmp	r1, #0
    1888:	d105      	bne.n	1896 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    188a:	4b0b      	ldr	r3, [pc, #44]	; (18b8 <sercom_set_gclk_generator+0x40>)
    188c:	785b      	ldrb	r3, [r3, #1]
    188e:	4283      	cmp	r3, r0
    1890:	d010      	beq.n	18b4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1892:	201d      	movs	r0, #29
    1894:	e00c      	b.n	18b0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1896:	a901      	add	r1, sp, #4
    1898:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    189a:	2013      	movs	r0, #19
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <sercom_set_gclk_generator+0x44>)
    189e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    18a0:	2013      	movs	r0, #19
    18a2:	4b07      	ldr	r3, [pc, #28]	; (18c0 <sercom_set_gclk_generator+0x48>)
    18a4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    18a6:	4b04      	ldr	r3, [pc, #16]	; (18b8 <sercom_set_gclk_generator+0x40>)
    18a8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    18aa:	2201      	movs	r2, #1
    18ac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    18ae:	2000      	movs	r0, #0
}
    18b0:	b002      	add	sp, #8
    18b2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    18b4:	2000      	movs	r0, #0
    18b6:	e7fb      	b.n	18b0 <sercom_set_gclk_generator+0x38>
    18b8:	2000008c 	.word	0x2000008c
    18bc:	00002095 	.word	0x00002095
    18c0:	00002009 	.word	0x00002009

000018c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    18c4:	4b40      	ldr	r3, [pc, #256]	; (19c8 <_sercom_get_default_pad+0x104>)
    18c6:	4298      	cmp	r0, r3
    18c8:	d031      	beq.n	192e <_sercom_get_default_pad+0x6a>
    18ca:	d90a      	bls.n	18e2 <_sercom_get_default_pad+0x1e>
    18cc:	4b3f      	ldr	r3, [pc, #252]	; (19cc <_sercom_get_default_pad+0x108>)
    18ce:	4298      	cmp	r0, r3
    18d0:	d04d      	beq.n	196e <_sercom_get_default_pad+0xaa>
    18d2:	4b3f      	ldr	r3, [pc, #252]	; (19d0 <_sercom_get_default_pad+0x10c>)
    18d4:	4298      	cmp	r0, r3
    18d6:	d05a      	beq.n	198e <_sercom_get_default_pad+0xca>
    18d8:	4b3e      	ldr	r3, [pc, #248]	; (19d4 <_sercom_get_default_pad+0x110>)
    18da:	4298      	cmp	r0, r3
    18dc:	d037      	beq.n	194e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    18de:	2000      	movs	r0, #0
}
    18e0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    18e2:	4b3d      	ldr	r3, [pc, #244]	; (19d8 <_sercom_get_default_pad+0x114>)
    18e4:	4298      	cmp	r0, r3
    18e6:	d00c      	beq.n	1902 <_sercom_get_default_pad+0x3e>
    18e8:	4b3c      	ldr	r3, [pc, #240]	; (19dc <_sercom_get_default_pad+0x118>)
    18ea:	4298      	cmp	r0, r3
    18ec:	d1f7      	bne.n	18de <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18ee:	2901      	cmp	r1, #1
    18f0:	d017      	beq.n	1922 <_sercom_get_default_pad+0x5e>
    18f2:	2900      	cmp	r1, #0
    18f4:	d05d      	beq.n	19b2 <_sercom_get_default_pad+0xee>
    18f6:	2902      	cmp	r1, #2
    18f8:	d015      	beq.n	1926 <_sercom_get_default_pad+0x62>
    18fa:	2903      	cmp	r1, #3
    18fc:	d015      	beq.n	192a <_sercom_get_default_pad+0x66>
	return 0;
    18fe:	2000      	movs	r0, #0
    1900:	e7ee      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1902:	2901      	cmp	r1, #1
    1904:	d007      	beq.n	1916 <_sercom_get_default_pad+0x52>
    1906:	2900      	cmp	r1, #0
    1908:	d051      	beq.n	19ae <_sercom_get_default_pad+0xea>
    190a:	2902      	cmp	r1, #2
    190c:	d005      	beq.n	191a <_sercom_get_default_pad+0x56>
    190e:	2903      	cmp	r1, #3
    1910:	d005      	beq.n	191e <_sercom_get_default_pad+0x5a>
	return 0;
    1912:	2000      	movs	r0, #0
    1914:	e7e4      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1916:	4832      	ldr	r0, [pc, #200]	; (19e0 <_sercom_get_default_pad+0x11c>)
    1918:	e7e2      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    191a:	4832      	ldr	r0, [pc, #200]	; (19e4 <_sercom_get_default_pad+0x120>)
    191c:	e7e0      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    191e:	4832      	ldr	r0, [pc, #200]	; (19e8 <_sercom_get_default_pad+0x124>)
    1920:	e7de      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1922:	4832      	ldr	r0, [pc, #200]	; (19ec <_sercom_get_default_pad+0x128>)
    1924:	e7dc      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1926:	4832      	ldr	r0, [pc, #200]	; (19f0 <_sercom_get_default_pad+0x12c>)
    1928:	e7da      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    192a:	4832      	ldr	r0, [pc, #200]	; (19f4 <_sercom_get_default_pad+0x130>)
    192c:	e7d8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    192e:	2901      	cmp	r1, #1
    1930:	d007      	beq.n	1942 <_sercom_get_default_pad+0x7e>
    1932:	2900      	cmp	r1, #0
    1934:	d03f      	beq.n	19b6 <_sercom_get_default_pad+0xf2>
    1936:	2902      	cmp	r1, #2
    1938:	d005      	beq.n	1946 <_sercom_get_default_pad+0x82>
    193a:	2903      	cmp	r1, #3
    193c:	d005      	beq.n	194a <_sercom_get_default_pad+0x86>
	return 0;
    193e:	2000      	movs	r0, #0
    1940:	e7ce      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1942:	482d      	ldr	r0, [pc, #180]	; (19f8 <_sercom_get_default_pad+0x134>)
    1944:	e7cc      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1946:	482d      	ldr	r0, [pc, #180]	; (19fc <_sercom_get_default_pad+0x138>)
    1948:	e7ca      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    194a:	482d      	ldr	r0, [pc, #180]	; (1a00 <_sercom_get_default_pad+0x13c>)
    194c:	e7c8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    194e:	2901      	cmp	r1, #1
    1950:	d007      	beq.n	1962 <_sercom_get_default_pad+0x9e>
    1952:	2900      	cmp	r1, #0
    1954:	d031      	beq.n	19ba <_sercom_get_default_pad+0xf6>
    1956:	2902      	cmp	r1, #2
    1958:	d005      	beq.n	1966 <_sercom_get_default_pad+0xa2>
    195a:	2903      	cmp	r1, #3
    195c:	d005      	beq.n	196a <_sercom_get_default_pad+0xa6>
	return 0;
    195e:	2000      	movs	r0, #0
    1960:	e7be      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1962:	4828      	ldr	r0, [pc, #160]	; (1a04 <_sercom_get_default_pad+0x140>)
    1964:	e7bc      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1966:	4828      	ldr	r0, [pc, #160]	; (1a08 <_sercom_get_default_pad+0x144>)
    1968:	e7ba      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    196a:	4828      	ldr	r0, [pc, #160]	; (1a0c <_sercom_get_default_pad+0x148>)
    196c:	e7b8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    196e:	2901      	cmp	r1, #1
    1970:	d007      	beq.n	1982 <_sercom_get_default_pad+0xbe>
    1972:	2900      	cmp	r1, #0
    1974:	d023      	beq.n	19be <_sercom_get_default_pad+0xfa>
    1976:	2902      	cmp	r1, #2
    1978:	d005      	beq.n	1986 <_sercom_get_default_pad+0xc2>
    197a:	2903      	cmp	r1, #3
    197c:	d005      	beq.n	198a <_sercom_get_default_pad+0xc6>
	return 0;
    197e:	2000      	movs	r0, #0
    1980:	e7ae      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1982:	4823      	ldr	r0, [pc, #140]	; (1a10 <_sercom_get_default_pad+0x14c>)
    1984:	e7ac      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    1986:	4823      	ldr	r0, [pc, #140]	; (1a14 <_sercom_get_default_pad+0x150>)
    1988:	e7aa      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    198a:	4823      	ldr	r0, [pc, #140]	; (1a18 <_sercom_get_default_pad+0x154>)
    198c:	e7a8      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    198e:	2901      	cmp	r1, #1
    1990:	d007      	beq.n	19a2 <_sercom_get_default_pad+0xde>
    1992:	2900      	cmp	r1, #0
    1994:	d015      	beq.n	19c2 <_sercom_get_default_pad+0xfe>
    1996:	2902      	cmp	r1, #2
    1998:	d005      	beq.n	19a6 <_sercom_get_default_pad+0xe2>
    199a:	2903      	cmp	r1, #3
    199c:	d005      	beq.n	19aa <_sercom_get_default_pad+0xe6>
	return 0;
    199e:	2000      	movs	r0, #0
    19a0:	e79e      	b.n	18e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    19a2:	481e      	ldr	r0, [pc, #120]	; (1a1c <_sercom_get_default_pad+0x158>)
    19a4:	e79c      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19a6:	481e      	ldr	r0, [pc, #120]	; (1a20 <_sercom_get_default_pad+0x15c>)
    19a8:	e79a      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19aa:	481e      	ldr	r0, [pc, #120]	; (1a24 <_sercom_get_default_pad+0x160>)
    19ac:	e798      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19ae:	481e      	ldr	r0, [pc, #120]	; (1a28 <_sercom_get_default_pad+0x164>)
    19b0:	e796      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19b2:	2003      	movs	r0, #3
    19b4:	e794      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19b6:	481d      	ldr	r0, [pc, #116]	; (1a2c <_sercom_get_default_pad+0x168>)
    19b8:	e792      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19ba:	481d      	ldr	r0, [pc, #116]	; (1a30 <_sercom_get_default_pad+0x16c>)
    19bc:	e790      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19be:	481d      	ldr	r0, [pc, #116]	; (1a34 <_sercom_get_default_pad+0x170>)
    19c0:	e78e      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19c2:	481d      	ldr	r0, [pc, #116]	; (1a38 <_sercom_get_default_pad+0x174>)
    19c4:	e78c      	b.n	18e0 <_sercom_get_default_pad+0x1c>
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	42001000 	.word	0x42001000
    19cc:	42001800 	.word	0x42001800
    19d0:	42001c00 	.word	0x42001c00
    19d4:	42001400 	.word	0x42001400
    19d8:	42000800 	.word	0x42000800
    19dc:	42000c00 	.word	0x42000c00
    19e0:	00050003 	.word	0x00050003
    19e4:	00060003 	.word	0x00060003
    19e8:	00070003 	.word	0x00070003
    19ec:	00010003 	.word	0x00010003
    19f0:	001e0003 	.word	0x001e0003
    19f4:	001f0003 	.word	0x001f0003
    19f8:	00090003 	.word	0x00090003
    19fc:	000a0003 	.word	0x000a0003
    1a00:	000b0003 	.word	0x000b0003
    1a04:	00110003 	.word	0x00110003
    1a08:	00120003 	.word	0x00120003
    1a0c:	00130003 	.word	0x00130003
    1a10:	000d0003 	.word	0x000d0003
    1a14:	000e0003 	.word	0x000e0003
    1a18:	000f0003 	.word	0x000f0003
    1a1c:	00170003 	.word	0x00170003
    1a20:	00180003 	.word	0x00180003
    1a24:	00190003 	.word	0x00190003
    1a28:	00040003 	.word	0x00040003
    1a2c:	00080003 	.word	0x00080003
    1a30:	00100003 	.word	0x00100003
    1a34:	000c0003 	.word	0x000c0003
    1a38:	00160003 	.word	0x00160003

00001a3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1a3c:	b530      	push	{r4, r5, lr}
    1a3e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1a40:	4b0b      	ldr	r3, [pc, #44]	; (1a70 <_sercom_get_sercom_inst_index+0x34>)
    1a42:	466a      	mov	r2, sp
    1a44:	cb32      	ldmia	r3!, {r1, r4, r5}
    1a46:	c232      	stmia	r2!, {r1, r4, r5}
    1a48:	cb32      	ldmia	r3!, {r1, r4, r5}
    1a4a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1a4c:	9b00      	ldr	r3, [sp, #0]
    1a4e:	4283      	cmp	r3, r0
    1a50:	d00b      	beq.n	1a6a <_sercom_get_sercom_inst_index+0x2e>
    1a52:	2301      	movs	r3, #1
    1a54:	009a      	lsls	r2, r3, #2
    1a56:	4669      	mov	r1, sp
    1a58:	5852      	ldr	r2, [r2, r1]
    1a5a:	4282      	cmp	r2, r0
    1a5c:	d006      	beq.n	1a6c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a5e:	3301      	adds	r3, #1
    1a60:	2b06      	cmp	r3, #6
    1a62:	d1f7      	bne.n	1a54 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1a64:	2000      	movs	r0, #0
}
    1a66:	b007      	add	sp, #28
    1a68:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a6a:	2300      	movs	r3, #0
			return i;
    1a6c:	b2d8      	uxtb	r0, r3
    1a6e:	e7fa      	b.n	1a66 <_sercom_get_sercom_inst_index+0x2a>
    1a70:	000052ac 	.word	0x000052ac

00001a74 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1a74:	4770      	bx	lr
	...

00001a78 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1a78:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1a7a:	4b0a      	ldr	r3, [pc, #40]	; (1aa4 <_sercom_set_handler+0x2c>)
    1a7c:	781b      	ldrb	r3, [r3, #0]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d10c      	bne.n	1a9c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a82:	4f09      	ldr	r7, [pc, #36]	; (1aa8 <_sercom_set_handler+0x30>)
    1a84:	4e09      	ldr	r6, [pc, #36]	; (1aac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1a86:	4d0a      	ldr	r5, [pc, #40]	; (1ab0 <_sercom_set_handler+0x38>)
    1a88:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a8a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1a8c:	195a      	adds	r2, r3, r5
    1a8e:	6014      	str	r4, [r2, #0]
    1a90:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a92:	2b18      	cmp	r3, #24
    1a94:	d1f9      	bne.n	1a8a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1a96:	2201      	movs	r2, #1
    1a98:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <_sercom_set_handler+0x2c>)
    1a9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1a9c:	0080      	lsls	r0, r0, #2
    1a9e:	4b02      	ldr	r3, [pc, #8]	; (1aa8 <_sercom_set_handler+0x30>)
    1aa0:	50c1      	str	r1, [r0, r3]
}
    1aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aa4:	2000008e 	.word	0x2000008e
    1aa8:	20000090 	.word	0x20000090
    1aac:	00001a75 	.word	0x00001a75
    1ab0:	200000ec 	.word	0x200000ec

00001ab4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1ab4:	b500      	push	{lr}
    1ab6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1ab8:	2309      	movs	r3, #9
    1aba:	466a      	mov	r2, sp
    1abc:	7013      	strb	r3, [r2, #0]
    1abe:	3301      	adds	r3, #1
    1ac0:	7053      	strb	r3, [r2, #1]
    1ac2:	3301      	adds	r3, #1
    1ac4:	7093      	strb	r3, [r2, #2]
    1ac6:	3301      	adds	r3, #1
    1ac8:	70d3      	strb	r3, [r2, #3]
    1aca:	3301      	adds	r3, #1
    1acc:	7113      	strb	r3, [r2, #4]
    1ace:	3301      	adds	r3, #1
    1ad0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1ad2:	4b03      	ldr	r3, [pc, #12]	; (1ae0 <_sercom_get_interrupt_vector+0x2c>)
    1ad4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ad6:	466b      	mov	r3, sp
    1ad8:	5618      	ldrsb	r0, [r3, r0]
}
    1ada:	b003      	add	sp, #12
    1adc:	bd00      	pop	{pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	00001a3d 	.word	0x00001a3d

00001ae4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ae4:	b510      	push	{r4, lr}
    1ae6:	4b02      	ldr	r3, [pc, #8]	; (1af0 <SERCOM0_Handler+0xc>)
    1ae8:	681b      	ldr	r3, [r3, #0]
    1aea:	2000      	movs	r0, #0
    1aec:	4798      	blx	r3
    1aee:	bd10      	pop	{r4, pc}
    1af0:	20000090 	.word	0x20000090

00001af4 <SERCOM1_Handler>:
    1af4:	b510      	push	{r4, lr}
    1af6:	4b02      	ldr	r3, [pc, #8]	; (1b00 <SERCOM1_Handler+0xc>)
    1af8:	685b      	ldr	r3, [r3, #4]
    1afa:	2001      	movs	r0, #1
    1afc:	4798      	blx	r3
    1afe:	bd10      	pop	{r4, pc}
    1b00:	20000090 	.word	0x20000090

00001b04 <SERCOM2_Handler>:
    1b04:	b510      	push	{r4, lr}
    1b06:	4b02      	ldr	r3, [pc, #8]	; (1b10 <SERCOM2_Handler+0xc>)
    1b08:	689b      	ldr	r3, [r3, #8]
    1b0a:	2002      	movs	r0, #2
    1b0c:	4798      	blx	r3
    1b0e:	bd10      	pop	{r4, pc}
    1b10:	20000090 	.word	0x20000090

00001b14 <SERCOM3_Handler>:
    1b14:	b510      	push	{r4, lr}
    1b16:	4b02      	ldr	r3, [pc, #8]	; (1b20 <SERCOM3_Handler+0xc>)
    1b18:	68db      	ldr	r3, [r3, #12]
    1b1a:	2003      	movs	r0, #3
    1b1c:	4798      	blx	r3
    1b1e:	bd10      	pop	{r4, pc}
    1b20:	20000090 	.word	0x20000090

00001b24 <SERCOM4_Handler>:
    1b24:	b510      	push	{r4, lr}
    1b26:	4b02      	ldr	r3, [pc, #8]	; (1b30 <SERCOM4_Handler+0xc>)
    1b28:	691b      	ldr	r3, [r3, #16]
    1b2a:	2004      	movs	r0, #4
    1b2c:	4798      	blx	r3
    1b2e:	bd10      	pop	{r4, pc}
    1b30:	20000090 	.word	0x20000090

00001b34 <SERCOM5_Handler>:
    1b34:	b510      	push	{r4, lr}
    1b36:	4b02      	ldr	r3, [pc, #8]	; (1b40 <SERCOM5_Handler+0xc>)
    1b38:	695b      	ldr	r3, [r3, #20]
    1b3a:	2005      	movs	r0, #5
    1b3c:	4798      	blx	r3
    1b3e:	bd10      	pop	{r4, pc}
    1b40:	20000090 	.word	0x20000090

00001b44 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1b44:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1b46:	2000      	movs	r0, #0
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <delay_init+0x28>)
    1b4a:	4798      	blx	r3
    1b4c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1b4e:	4c08      	ldr	r4, [pc, #32]	; (1b70 <delay_init+0x2c>)
    1b50:	21fa      	movs	r1, #250	; 0xfa
    1b52:	0089      	lsls	r1, r1, #2
    1b54:	47a0      	blx	r4
    1b56:	4b07      	ldr	r3, [pc, #28]	; (1b74 <delay_init+0x30>)
    1b58:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1b5a:	4907      	ldr	r1, [pc, #28]	; (1b78 <delay_init+0x34>)
    1b5c:	0028      	movs	r0, r5
    1b5e:	47a0      	blx	r4
    1b60:	4b06      	ldr	r3, [pc, #24]	; (1b7c <delay_init+0x38>)
    1b62:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1b64:	2205      	movs	r2, #5
    1b66:	4b06      	ldr	r3, [pc, #24]	; (1b80 <delay_init+0x3c>)
    1b68:	601a      	str	r2, [r3, #0]
}
    1b6a:	bd70      	pop	{r4, r5, r6, pc}
    1b6c:	00001f7d 	.word	0x00001f7d
    1b70:	00002705 	.word	0x00002705
    1b74:	20000000 	.word	0x20000000
    1b78:	000f4240 	.word	0x000f4240
    1b7c:	20000004 	.word	0x20000004
    1b80:	e000e010 	.word	0xe000e010

00001b84 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1b84:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1b86:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <delay_cycles_us+0x24>)
    1b88:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1b8a:	4a08      	ldr	r2, [pc, #32]	; (1bac <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1b8c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1b8e:	2180      	movs	r1, #128	; 0x80
    1b90:	0249      	lsls	r1, r1, #9
	while (n--) {
    1b92:	3801      	subs	r0, #1
    1b94:	d307      	bcc.n	1ba6 <delay_cycles_us+0x22>
	if (n > 0) {
    1b96:	2c00      	cmp	r4, #0
    1b98:	d0fb      	beq.n	1b92 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1b9a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1b9c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1b9e:	6813      	ldr	r3, [r2, #0]
    1ba0:	420b      	tst	r3, r1
    1ba2:	d0fc      	beq.n	1b9e <delay_cycles_us+0x1a>
    1ba4:	e7f5      	b.n	1b92 <delay_cycles_us+0xe>
	}
}
    1ba6:	bd30      	pop	{r4, r5, pc}
    1ba8:	20000004 	.word	0x20000004
    1bac:	e000e010 	.word	0xe000e010

00001bb0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1bb0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1bb2:	4b08      	ldr	r3, [pc, #32]	; (1bd4 <delay_cycles_ms+0x24>)
    1bb4:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    1bb6:	4a08      	ldr	r2, [pc, #32]	; (1bd8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1bb8:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bba:	2180      	movs	r1, #128	; 0x80
    1bbc:	0249      	lsls	r1, r1, #9
	while (n--) {
    1bbe:	3801      	subs	r0, #1
    1bc0:	d307      	bcc.n	1bd2 <delay_cycles_ms+0x22>
	if (n > 0) {
    1bc2:	2c00      	cmp	r4, #0
    1bc4:	d0fb      	beq.n	1bbe <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1bc6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1bc8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bca:	6813      	ldr	r3, [r2, #0]
    1bcc:	420b      	tst	r3, r1
    1bce:	d0fc      	beq.n	1bca <delay_cycles_ms+0x1a>
    1bd0:	e7f5      	b.n	1bbe <delay_cycles_ms+0xe>
	}
}
    1bd2:	bd30      	pop	{r4, r5, pc}
    1bd4:	20000000 	.word	0x20000000
    1bd8:	e000e010 	.word	0xe000e010

00001bdc <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1bdc:	4770      	bx	lr
	...

00001be0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1be0:	4b0c      	ldr	r3, [pc, #48]	; (1c14 <cpu_irq_enter_critical+0x34>)
    1be2:	681b      	ldr	r3, [r3, #0]
    1be4:	2b00      	cmp	r3, #0
    1be6:	d106      	bne.n	1bf6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1be8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1bec:	2b00      	cmp	r3, #0
    1bee:	d007      	beq.n	1c00 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1bf0:	2200      	movs	r2, #0
    1bf2:	4b09      	ldr	r3, [pc, #36]	; (1c18 <cpu_irq_enter_critical+0x38>)
    1bf4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1bf6:	4a07      	ldr	r2, [pc, #28]	; (1c14 <cpu_irq_enter_critical+0x34>)
    1bf8:	6813      	ldr	r3, [r2, #0]
    1bfa:	3301      	adds	r3, #1
    1bfc:	6013      	str	r3, [r2, #0]
}
    1bfe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c00:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1c02:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c06:	2200      	movs	r2, #0
    1c08:	4b04      	ldr	r3, [pc, #16]	; (1c1c <cpu_irq_enter_critical+0x3c>)
    1c0a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c0c:	3201      	adds	r2, #1
    1c0e:	4b02      	ldr	r3, [pc, #8]	; (1c18 <cpu_irq_enter_critical+0x38>)
    1c10:	701a      	strb	r2, [r3, #0]
    1c12:	e7f0      	b.n	1bf6 <cpu_irq_enter_critical+0x16>
    1c14:	200000a8 	.word	0x200000a8
    1c18:	200000ac 	.word	0x200000ac
    1c1c:	20000008 	.word	0x20000008

00001c20 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1c20:	4b08      	ldr	r3, [pc, #32]	; (1c44 <cpu_irq_leave_critical+0x24>)
    1c22:	681a      	ldr	r2, [r3, #0]
    1c24:	3a01      	subs	r2, #1
    1c26:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1c28:	681b      	ldr	r3, [r3, #0]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d109      	bne.n	1c42 <cpu_irq_leave_critical+0x22>
    1c2e:	4b06      	ldr	r3, [pc, #24]	; (1c48 <cpu_irq_leave_critical+0x28>)
    1c30:	781b      	ldrb	r3, [r3, #0]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d005      	beq.n	1c42 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1c36:	2201      	movs	r2, #1
    1c38:	4b04      	ldr	r3, [pc, #16]	; (1c4c <cpu_irq_leave_critical+0x2c>)
    1c3a:	701a      	strb	r2, [r3, #0]
    1c3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c40:	b662      	cpsie	i
	}
}
    1c42:	4770      	bx	lr
    1c44:	200000a8 	.word	0x200000a8
    1c48:	200000ac 	.word	0x200000ac
    1c4c:	20000008 	.word	0x20000008

00001c50 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1c50:	b510      	push	{r4, lr}
	switch (clock_source) {
    1c52:	2808      	cmp	r0, #8
    1c54:	d803      	bhi.n	1c5e <system_clock_source_get_hz+0xe>
    1c56:	0080      	lsls	r0, r0, #2
    1c58:	4b1b      	ldr	r3, [pc, #108]	; (1cc8 <system_clock_source_get_hz+0x78>)
    1c5a:	581b      	ldr	r3, [r3, r0]
    1c5c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1c5e:	2000      	movs	r0, #0
    1c60:	e030      	b.n	1cc4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1c62:	4b1a      	ldr	r3, [pc, #104]	; (1ccc <system_clock_source_get_hz+0x7c>)
    1c64:	6918      	ldr	r0, [r3, #16]
    1c66:	e02d      	b.n	1cc4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1c68:	4b19      	ldr	r3, [pc, #100]	; (1cd0 <system_clock_source_get_hz+0x80>)
    1c6a:	6a1b      	ldr	r3, [r3, #32]
    1c6c:	059b      	lsls	r3, r3, #22
    1c6e:	0f9b      	lsrs	r3, r3, #30
    1c70:	4818      	ldr	r0, [pc, #96]	; (1cd4 <system_clock_source_get_hz+0x84>)
    1c72:	40d8      	lsrs	r0, r3
    1c74:	e026      	b.n	1cc4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1c76:	4b15      	ldr	r3, [pc, #84]	; (1ccc <system_clock_source_get_hz+0x7c>)
    1c78:	6958      	ldr	r0, [r3, #20]
    1c7a:	e023      	b.n	1cc4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c7c:	4b13      	ldr	r3, [pc, #76]	; (1ccc <system_clock_source_get_hz+0x7c>)
    1c7e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1c80:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c82:	079b      	lsls	r3, r3, #30
    1c84:	d51e      	bpl.n	1cc4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c86:	4912      	ldr	r1, [pc, #72]	; (1cd0 <system_clock_source_get_hz+0x80>)
    1c88:	2210      	movs	r2, #16
    1c8a:	68cb      	ldr	r3, [r1, #12]
    1c8c:	421a      	tst	r2, r3
    1c8e:	d0fc      	beq.n	1c8a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1c90:	4b0e      	ldr	r3, [pc, #56]	; (1ccc <system_clock_source_get_hz+0x7c>)
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	075b      	lsls	r3, r3, #29
    1c96:	d401      	bmi.n	1c9c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1c98:	480f      	ldr	r0, [pc, #60]	; (1cd8 <system_clock_source_get_hz+0x88>)
    1c9a:	e013      	b.n	1cc4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c9c:	2000      	movs	r0, #0
    1c9e:	4b0f      	ldr	r3, [pc, #60]	; (1cdc <system_clock_source_get_hz+0x8c>)
    1ca0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1ca2:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <system_clock_source_get_hz+0x7c>)
    1ca4:	689b      	ldr	r3, [r3, #8]
    1ca6:	041b      	lsls	r3, r3, #16
    1ca8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1caa:	4358      	muls	r0, r3
    1cac:	e00a      	b.n	1cc4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1cae:	2350      	movs	r3, #80	; 0x50
    1cb0:	4a07      	ldr	r2, [pc, #28]	; (1cd0 <system_clock_source_get_hz+0x80>)
    1cb2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1cb4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1cb6:	075b      	lsls	r3, r3, #29
    1cb8:	d504      	bpl.n	1cc4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1cba:	4b04      	ldr	r3, [pc, #16]	; (1ccc <system_clock_source_get_hz+0x7c>)
    1cbc:	68d8      	ldr	r0, [r3, #12]
    1cbe:	e001      	b.n	1cc4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1cc0:	2080      	movs	r0, #128	; 0x80
    1cc2:	0200      	lsls	r0, r0, #8
	}
}
    1cc4:	bd10      	pop	{r4, pc}
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	000052c4 	.word	0x000052c4
    1ccc:	200000b0 	.word	0x200000b0
    1cd0:	40000800 	.word	0x40000800
    1cd4:	007a1200 	.word	0x007a1200
    1cd8:	02dc6c00 	.word	0x02dc6c00
    1cdc:	000020b1 	.word	0x000020b1

00001ce0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1ce0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1ce2:	490c      	ldr	r1, [pc, #48]	; (1d14 <system_clock_source_osc8m_set_config+0x34>)
    1ce4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1ce6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ce8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1cea:	7840      	ldrb	r0, [r0, #1]
    1cec:	2201      	movs	r2, #1
    1cee:	4010      	ands	r0, r2
    1cf0:	0180      	lsls	r0, r0, #6
    1cf2:	2640      	movs	r6, #64	; 0x40
    1cf4:	43b3      	bics	r3, r6
    1cf6:	4303      	orrs	r3, r0
    1cf8:	402a      	ands	r2, r5
    1cfa:	01d2      	lsls	r2, r2, #7
    1cfc:	2080      	movs	r0, #128	; 0x80
    1cfe:	4383      	bics	r3, r0
    1d00:	4313      	orrs	r3, r2
    1d02:	2203      	movs	r2, #3
    1d04:	4022      	ands	r2, r4
    1d06:	0212      	lsls	r2, r2, #8
    1d08:	4803      	ldr	r0, [pc, #12]	; (1d18 <system_clock_source_osc8m_set_config+0x38>)
    1d0a:	4003      	ands	r3, r0
    1d0c:	4313      	orrs	r3, r2
    1d0e:	620b      	str	r3, [r1, #32]
}
    1d10:	bd70      	pop	{r4, r5, r6, pc}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	40000800 	.word	0x40000800
    1d18:	fffffcff 	.word	0xfffffcff

00001d1c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d1c:	2808      	cmp	r0, #8
    1d1e:	d803      	bhi.n	1d28 <system_clock_source_enable+0xc>
    1d20:	0080      	lsls	r0, r0, #2
    1d22:	4b25      	ldr	r3, [pc, #148]	; (1db8 <system_clock_source_enable+0x9c>)
    1d24:	581b      	ldr	r3, [r3, r0]
    1d26:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d28:	2017      	movs	r0, #23
    1d2a:	e044      	b.n	1db6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d2c:	4a23      	ldr	r2, [pc, #140]	; (1dbc <system_clock_source_enable+0xa0>)
    1d2e:	6a13      	ldr	r3, [r2, #32]
    1d30:	2102      	movs	r1, #2
    1d32:	430b      	orrs	r3, r1
    1d34:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d36:	2000      	movs	r0, #0
    1d38:	e03d      	b.n	1db6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d3a:	4a20      	ldr	r2, [pc, #128]	; (1dbc <system_clock_source_enable+0xa0>)
    1d3c:	6993      	ldr	r3, [r2, #24]
    1d3e:	2102      	movs	r1, #2
    1d40:	430b      	orrs	r3, r1
    1d42:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1d44:	2000      	movs	r0, #0
		break;
    1d46:	e036      	b.n	1db6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d48:	4a1c      	ldr	r2, [pc, #112]	; (1dbc <system_clock_source_enable+0xa0>)
    1d4a:	8a13      	ldrh	r3, [r2, #16]
    1d4c:	2102      	movs	r1, #2
    1d4e:	430b      	orrs	r3, r1
    1d50:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1d52:	2000      	movs	r0, #0
		break;
    1d54:	e02f      	b.n	1db6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d56:	4a19      	ldr	r2, [pc, #100]	; (1dbc <system_clock_source_enable+0xa0>)
    1d58:	8a93      	ldrh	r3, [r2, #20]
    1d5a:	2102      	movs	r1, #2
    1d5c:	430b      	orrs	r3, r1
    1d5e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1d60:	2000      	movs	r0, #0
		break;
    1d62:	e028      	b.n	1db6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d64:	4916      	ldr	r1, [pc, #88]	; (1dc0 <system_clock_source_enable+0xa4>)
    1d66:	680b      	ldr	r3, [r1, #0]
    1d68:	2202      	movs	r2, #2
    1d6a:	4313      	orrs	r3, r2
    1d6c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d6e:	4b13      	ldr	r3, [pc, #76]	; (1dbc <system_clock_source_enable+0xa0>)
    1d70:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d72:	0019      	movs	r1, r3
    1d74:	320e      	adds	r2, #14
    1d76:	68cb      	ldr	r3, [r1, #12]
    1d78:	421a      	tst	r2, r3
    1d7a:	d0fc      	beq.n	1d76 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d7c:	4a10      	ldr	r2, [pc, #64]	; (1dc0 <system_clock_source_enable+0xa4>)
    1d7e:	6891      	ldr	r1, [r2, #8]
    1d80:	4b0e      	ldr	r3, [pc, #56]	; (1dbc <system_clock_source_enable+0xa0>)
    1d82:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d84:	6852      	ldr	r2, [r2, #4]
    1d86:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1d88:	2200      	movs	r2, #0
    1d8a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d8c:	0019      	movs	r1, r3
    1d8e:	3210      	adds	r2, #16
    1d90:	68cb      	ldr	r3, [r1, #12]
    1d92:	421a      	tst	r2, r3
    1d94:	d0fc      	beq.n	1d90 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d96:	4b0a      	ldr	r3, [pc, #40]	; (1dc0 <system_clock_source_enable+0xa4>)
    1d98:	681b      	ldr	r3, [r3, #0]
    1d9a:	b29b      	uxth	r3, r3
    1d9c:	4a07      	ldr	r2, [pc, #28]	; (1dbc <system_clock_source_enable+0xa0>)
    1d9e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1da0:	2000      	movs	r0, #0
    1da2:	e008      	b.n	1db6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1da4:	4905      	ldr	r1, [pc, #20]	; (1dbc <system_clock_source_enable+0xa0>)
    1da6:	2244      	movs	r2, #68	; 0x44
    1da8:	5c8b      	ldrb	r3, [r1, r2]
    1daa:	2002      	movs	r0, #2
    1dac:	4303      	orrs	r3, r0
    1dae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1db0:	2000      	movs	r0, #0
		break;
    1db2:	e000      	b.n	1db6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1db4:	2000      	movs	r0, #0
}
    1db6:	4770      	bx	lr
    1db8:	000052e8 	.word	0x000052e8
    1dbc:	40000800 	.word	0x40000800
    1dc0:	200000b0 	.word	0x200000b0

00001dc4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1dc4:	b530      	push	{r4, r5, lr}
    1dc6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1dc8:	22c2      	movs	r2, #194	; 0xc2
    1dca:	00d2      	lsls	r2, r2, #3
    1dcc:	4b1a      	ldr	r3, [pc, #104]	; (1e38 <system_clock_init+0x74>)
    1dce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dd0:	4a1a      	ldr	r2, [pc, #104]	; (1e3c <system_clock_init+0x78>)
    1dd2:	6853      	ldr	r3, [r2, #4]
    1dd4:	211e      	movs	r1, #30
    1dd6:	438b      	bics	r3, r1
    1dd8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1dda:	2301      	movs	r3, #1
    1ddc:	466a      	mov	r2, sp
    1dde:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1de0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1de2:	4d17      	ldr	r5, [pc, #92]	; (1e40 <system_clock_init+0x7c>)
    1de4:	b2e0      	uxtb	r0, r4
    1de6:	4669      	mov	r1, sp
    1de8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dea:	3401      	adds	r4, #1
    1dec:	2c25      	cmp	r4, #37	; 0x25
    1dee:	d1f9      	bne.n	1de4 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1df0:	a803      	add	r0, sp, #12
    1df2:	2400      	movs	r4, #0
    1df4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1df6:	2501      	movs	r5, #1
    1df8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1dfa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1dfc:	4b11      	ldr	r3, [pc, #68]	; (1e44 <system_clock_init+0x80>)
    1dfe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e00:	2006      	movs	r0, #6
    1e02:	4b11      	ldr	r3, [pc, #68]	; (1e48 <system_clock_init+0x84>)
    1e04:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e06:	4b11      	ldr	r3, [pc, #68]	; (1e4c <system_clock_init+0x88>)
    1e08:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1e0a:	4b11      	ldr	r3, [pc, #68]	; (1e50 <system_clock_init+0x8c>)
    1e0c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1e0e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1e10:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1e12:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e14:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1e16:	466b      	mov	r3, sp
    1e18:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e1a:	2306      	movs	r3, #6
    1e1c:	466a      	mov	r2, sp
    1e1e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1e20:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1e22:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e24:	4669      	mov	r1, sp
    1e26:	2000      	movs	r0, #0
    1e28:	4b0a      	ldr	r3, [pc, #40]	; (1e54 <system_clock_init+0x90>)
    1e2a:	4798      	blx	r3
    1e2c:	2000      	movs	r0, #0
    1e2e:	4b0a      	ldr	r3, [pc, #40]	; (1e58 <system_clock_init+0x94>)
    1e30:	4798      	blx	r3
#endif
}
    1e32:	b005      	add	sp, #20
    1e34:	bd30      	pop	{r4, r5, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	40000800 	.word	0x40000800
    1e3c:	41004000 	.word	0x41004000
    1e40:	00002095 	.word	0x00002095
    1e44:	00001ce1 	.word	0x00001ce1
    1e48:	00001d1d 	.word	0x00001d1d
    1e4c:	00001e5d 	.word	0x00001e5d
    1e50:	40000400 	.word	0x40000400
    1e54:	00001e81 	.word	0x00001e81
    1e58:	00001f39 	.word	0x00001f39

00001e5c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1e5c:	4a06      	ldr	r2, [pc, #24]	; (1e78 <system_gclk_init+0x1c>)
    1e5e:	6993      	ldr	r3, [r2, #24]
    1e60:	2108      	movs	r1, #8
    1e62:	430b      	orrs	r3, r1
    1e64:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e66:	2201      	movs	r2, #1
    1e68:	4b04      	ldr	r3, [pc, #16]	; (1e7c <system_gclk_init+0x20>)
    1e6a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1e6c:	0019      	movs	r1, r3
    1e6e:	780b      	ldrb	r3, [r1, #0]
    1e70:	4213      	tst	r3, r2
    1e72:	d1fc      	bne.n	1e6e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	40000400 	.word	0x40000400
    1e7c:	40000c00 	.word	0x40000c00

00001e80 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1e80:	b570      	push	{r4, r5, r6, lr}
    1e82:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1e84:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1e86:	780d      	ldrb	r5, [r1, #0]
    1e88:	022d      	lsls	r5, r5, #8
    1e8a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1e8c:	784b      	ldrb	r3, [r1, #1]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d002      	beq.n	1e98 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1e92:	2380      	movs	r3, #128	; 0x80
    1e94:	02db      	lsls	r3, r3, #11
    1e96:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1e98:	7a4b      	ldrb	r3, [r1, #9]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d002      	beq.n	1ea4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1e9e:	2380      	movs	r3, #128	; 0x80
    1ea0:	031b      	lsls	r3, r3, #12
    1ea2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ea4:	6848      	ldr	r0, [r1, #4]
    1ea6:	2801      	cmp	r0, #1
    1ea8:	d910      	bls.n	1ecc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1eaa:	1e43      	subs	r3, r0, #1
    1eac:	4218      	tst	r0, r3
    1eae:	d134      	bne.n	1f1a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1eb0:	2802      	cmp	r0, #2
    1eb2:	d930      	bls.n	1f16 <system_gclk_gen_set_config+0x96>
    1eb4:	2302      	movs	r3, #2
    1eb6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1eb8:	3201      	adds	r2, #1
						mask <<= 1) {
    1eba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1ebc:	4298      	cmp	r0, r3
    1ebe:	d8fb      	bhi.n	1eb8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1ec0:	0212      	lsls	r2, r2, #8
    1ec2:	4332      	orrs	r2, r6
    1ec4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1ec6:	2380      	movs	r3, #128	; 0x80
    1ec8:	035b      	lsls	r3, r3, #13
    1eca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ecc:	7a0b      	ldrb	r3, [r1, #8]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d002      	beq.n	1ed8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ed2:	2380      	movs	r3, #128	; 0x80
    1ed4:	039b      	lsls	r3, r3, #14
    1ed6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ed8:	4a13      	ldr	r2, [pc, #76]	; (1f28 <system_gclk_gen_set_config+0xa8>)
    1eda:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1edc:	b25b      	sxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	dbfb      	blt.n	1eda <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1ee2:	4b12      	ldr	r3, [pc, #72]	; (1f2c <system_gclk_gen_set_config+0xac>)
    1ee4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ee6:	4b12      	ldr	r3, [pc, #72]	; (1f30 <system_gclk_gen_set_config+0xb0>)
    1ee8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1eea:	4a0f      	ldr	r2, [pc, #60]	; (1f28 <system_gclk_gen_set_config+0xa8>)
    1eec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1eee:	b25b      	sxtb	r3, r3
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	dbfb      	blt.n	1eec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ef4:	4b0c      	ldr	r3, [pc, #48]	; (1f28 <system_gclk_gen_set_config+0xa8>)
    1ef6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ef8:	001a      	movs	r2, r3
    1efa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1efc:	b25b      	sxtb	r3, r3
    1efe:	2b00      	cmp	r3, #0
    1f00:	dbfb      	blt.n	1efa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f02:	4a09      	ldr	r2, [pc, #36]	; (1f28 <system_gclk_gen_set_config+0xa8>)
    1f04:	6853      	ldr	r3, [r2, #4]
    1f06:	2180      	movs	r1, #128	; 0x80
    1f08:	0249      	lsls	r1, r1, #9
    1f0a:	400b      	ands	r3, r1
    1f0c:	431d      	orrs	r5, r3
    1f0e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1f10:	4b08      	ldr	r3, [pc, #32]	; (1f34 <system_gclk_gen_set_config+0xb4>)
    1f12:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f14:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1f16:	2200      	movs	r2, #0
    1f18:	e7d2      	b.n	1ec0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1f1a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1f1c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1f1e:	2380      	movs	r3, #128	; 0x80
    1f20:	029b      	lsls	r3, r3, #10
    1f22:	431d      	orrs	r5, r3
    1f24:	e7d2      	b.n	1ecc <system_gclk_gen_set_config+0x4c>
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	40000c00 	.word	0x40000c00
    1f2c:	00001be1 	.word	0x00001be1
    1f30:	40000c08 	.word	0x40000c08
    1f34:	00001c21 	.word	0x00001c21

00001f38 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f38:	b510      	push	{r4, lr}
    1f3a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f3c:	4a0b      	ldr	r2, [pc, #44]	; (1f6c <system_gclk_gen_enable+0x34>)
    1f3e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f40:	b25b      	sxtb	r3, r3
    1f42:	2b00      	cmp	r3, #0
    1f44:	dbfb      	blt.n	1f3e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1f46:	4b0a      	ldr	r3, [pc, #40]	; (1f70 <system_gclk_gen_enable+0x38>)
    1f48:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f4a:	4b0a      	ldr	r3, [pc, #40]	; (1f74 <system_gclk_gen_enable+0x3c>)
    1f4c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f4e:	4a07      	ldr	r2, [pc, #28]	; (1f6c <system_gclk_gen_enable+0x34>)
    1f50:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f52:	b25b      	sxtb	r3, r3
    1f54:	2b00      	cmp	r3, #0
    1f56:	dbfb      	blt.n	1f50 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f58:	4a04      	ldr	r2, [pc, #16]	; (1f6c <system_gclk_gen_enable+0x34>)
    1f5a:	6851      	ldr	r1, [r2, #4]
    1f5c:	2380      	movs	r3, #128	; 0x80
    1f5e:	025b      	lsls	r3, r3, #9
    1f60:	430b      	orrs	r3, r1
    1f62:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1f64:	4b04      	ldr	r3, [pc, #16]	; (1f78 <system_gclk_gen_enable+0x40>)
    1f66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f68:	bd10      	pop	{r4, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	40000c00 	.word	0x40000c00
    1f70:	00001be1 	.word	0x00001be1
    1f74:	40000c04 	.word	0x40000c04
    1f78:	00001c21 	.word	0x00001c21

00001f7c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1f7c:	b570      	push	{r4, r5, r6, lr}
    1f7e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f80:	4a1a      	ldr	r2, [pc, #104]	; (1fec <system_gclk_gen_get_hz+0x70>)
    1f82:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f84:	b25b      	sxtb	r3, r3
    1f86:	2b00      	cmp	r3, #0
    1f88:	dbfb      	blt.n	1f82 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1f8a:	4b19      	ldr	r3, [pc, #100]	; (1ff0 <system_gclk_gen_get_hz+0x74>)
    1f8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f8e:	4b19      	ldr	r3, [pc, #100]	; (1ff4 <system_gclk_gen_get_hz+0x78>)
    1f90:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f92:	4a16      	ldr	r2, [pc, #88]	; (1fec <system_gclk_gen_get_hz+0x70>)
    1f94:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f96:	b25b      	sxtb	r3, r3
    1f98:	2b00      	cmp	r3, #0
    1f9a:	dbfb      	blt.n	1f94 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1f9c:	4e13      	ldr	r6, [pc, #76]	; (1fec <system_gclk_gen_get_hz+0x70>)
    1f9e:	6870      	ldr	r0, [r6, #4]
    1fa0:	04c0      	lsls	r0, r0, #19
    1fa2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fa4:	4b14      	ldr	r3, [pc, #80]	; (1ff8 <system_gclk_gen_get_hz+0x7c>)
    1fa6:	4798      	blx	r3
    1fa8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1faa:	4b12      	ldr	r3, [pc, #72]	; (1ff4 <system_gclk_gen_get_hz+0x78>)
    1fac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1fae:	6876      	ldr	r6, [r6, #4]
    1fb0:	02f6      	lsls	r6, r6, #11
    1fb2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fb4:	4b11      	ldr	r3, [pc, #68]	; (1ffc <system_gclk_gen_get_hz+0x80>)
    1fb6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb8:	4a0c      	ldr	r2, [pc, #48]	; (1fec <system_gclk_gen_get_hz+0x70>)
    1fba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fbc:	b25b      	sxtb	r3, r3
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	dbfb      	blt.n	1fba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1fc2:	4b0a      	ldr	r3, [pc, #40]	; (1fec <system_gclk_gen_get_hz+0x70>)
    1fc4:	689c      	ldr	r4, [r3, #8]
    1fc6:	0224      	lsls	r4, r4, #8
    1fc8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1fca:	4b0d      	ldr	r3, [pc, #52]	; (2000 <STACK_SIZE>)
    1fcc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1fce:	2e00      	cmp	r6, #0
    1fd0:	d107      	bne.n	1fe2 <system_gclk_gen_get_hz+0x66>
    1fd2:	2c01      	cmp	r4, #1
    1fd4:	d907      	bls.n	1fe6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1fd6:	0021      	movs	r1, r4
    1fd8:	0028      	movs	r0, r5
    1fda:	4b0a      	ldr	r3, [pc, #40]	; (2004 <STACK_SIZE+0x4>)
    1fdc:	4798      	blx	r3
    1fde:	0005      	movs	r5, r0
    1fe0:	e001      	b.n	1fe6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1fe2:	3401      	adds	r4, #1
    1fe4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1fe6:	0028      	movs	r0, r5
    1fe8:	bd70      	pop	{r4, r5, r6, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	40000c00 	.word	0x40000c00
    1ff0:	00001be1 	.word	0x00001be1
    1ff4:	40000c04 	.word	0x40000c04
    1ff8:	00001c51 	.word	0x00001c51
    1ffc:	40000c08 	.word	0x40000c08
    2000:	00001c21 	.word	0x00001c21
    2004:	00002705 	.word	0x00002705

00002008 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2008:	b510      	push	{r4, lr}
    200a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    200c:	4b06      	ldr	r3, [pc, #24]	; (2028 <system_gclk_chan_enable+0x20>)
    200e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2010:	4b06      	ldr	r3, [pc, #24]	; (202c <system_gclk_chan_enable+0x24>)
    2012:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2014:	4a06      	ldr	r2, [pc, #24]	; (2030 <system_gclk_chan_enable+0x28>)
    2016:	8853      	ldrh	r3, [r2, #2]
    2018:	2180      	movs	r1, #128	; 0x80
    201a:	01c9      	lsls	r1, r1, #7
    201c:	430b      	orrs	r3, r1
    201e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2020:	4b04      	ldr	r3, [pc, #16]	; (2034 <system_gclk_chan_enable+0x2c>)
    2022:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2024:	bd10      	pop	{r4, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	00001be1 	.word	0x00001be1
    202c:	40000c02 	.word	0x40000c02
    2030:	40000c00 	.word	0x40000c00
    2034:	00001c21 	.word	0x00001c21

00002038 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2038:	b510      	push	{r4, lr}
    203a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    203c:	4b0f      	ldr	r3, [pc, #60]	; (207c <system_gclk_chan_disable+0x44>)
    203e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2040:	4b0f      	ldr	r3, [pc, #60]	; (2080 <system_gclk_chan_disable+0x48>)
    2042:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2044:	4a0f      	ldr	r2, [pc, #60]	; (2084 <system_gclk_chan_disable+0x4c>)
    2046:	8853      	ldrh	r3, [r2, #2]
    2048:	051b      	lsls	r3, r3, #20
    204a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    204c:	8853      	ldrh	r3, [r2, #2]
    204e:	490e      	ldr	r1, [pc, #56]	; (2088 <system_gclk_chan_disable+0x50>)
    2050:	400b      	ands	r3, r1
    2052:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2054:	8853      	ldrh	r3, [r2, #2]
    2056:	490d      	ldr	r1, [pc, #52]	; (208c <system_gclk_chan_disable+0x54>)
    2058:	400b      	ands	r3, r1
    205a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    205c:	0011      	movs	r1, r2
    205e:	2280      	movs	r2, #128	; 0x80
    2060:	01d2      	lsls	r2, r2, #7
    2062:	884b      	ldrh	r3, [r1, #2]
    2064:	4213      	tst	r3, r2
    2066:	d1fc      	bne.n	2062 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2068:	4906      	ldr	r1, [pc, #24]	; (2084 <system_gclk_chan_disable+0x4c>)
    206a:	884a      	ldrh	r2, [r1, #2]
    206c:	0203      	lsls	r3, r0, #8
    206e:	4806      	ldr	r0, [pc, #24]	; (2088 <system_gclk_chan_disable+0x50>)
    2070:	4002      	ands	r2, r0
    2072:	4313      	orrs	r3, r2
    2074:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2076:	4b06      	ldr	r3, [pc, #24]	; (2090 <system_gclk_chan_disable+0x58>)
    2078:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    207a:	bd10      	pop	{r4, pc}
    207c:	00001be1 	.word	0x00001be1
    2080:	40000c02 	.word	0x40000c02
    2084:	40000c00 	.word	0x40000c00
    2088:	fffff0ff 	.word	0xfffff0ff
    208c:	ffffbfff 	.word	0xffffbfff
    2090:	00001c21 	.word	0x00001c21

00002094 <system_gclk_chan_set_config>:
{
    2094:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2096:	780c      	ldrb	r4, [r1, #0]
    2098:	0224      	lsls	r4, r4, #8
    209a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    209c:	4b02      	ldr	r3, [pc, #8]	; (20a8 <system_gclk_chan_set_config+0x14>)
    209e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    20a0:	b2a4      	uxth	r4, r4
    20a2:	4b02      	ldr	r3, [pc, #8]	; (20ac <system_gclk_chan_set_config+0x18>)
    20a4:	805c      	strh	r4, [r3, #2]
}
    20a6:	bd10      	pop	{r4, pc}
    20a8:	00002039 	.word	0x00002039
    20ac:	40000c00 	.word	0x40000c00

000020b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    20b0:	b510      	push	{r4, lr}
    20b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20b4:	4b06      	ldr	r3, [pc, #24]	; (20d0 <system_gclk_chan_get_hz+0x20>)
    20b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20b8:	4b06      	ldr	r3, [pc, #24]	; (20d4 <system_gclk_chan_get_hz+0x24>)
    20ba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    20bc:	4b06      	ldr	r3, [pc, #24]	; (20d8 <system_gclk_chan_get_hz+0x28>)
    20be:	885c      	ldrh	r4, [r3, #2]
    20c0:	0524      	lsls	r4, r4, #20
    20c2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    20c4:	4b05      	ldr	r3, [pc, #20]	; (20dc <system_gclk_chan_get_hz+0x2c>)
    20c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    20c8:	0020      	movs	r0, r4
    20ca:	4b05      	ldr	r3, [pc, #20]	; (20e0 <system_gclk_chan_get_hz+0x30>)
    20cc:	4798      	blx	r3
}
    20ce:	bd10      	pop	{r4, pc}
    20d0:	00001be1 	.word	0x00001be1
    20d4:	40000c02 	.word	0x40000c02
    20d8:	40000c00 	.word	0x40000c00
    20dc:	00001c21 	.word	0x00001c21
    20e0:	00001f7d 	.word	0x00001f7d

000020e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    20e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    20e6:	78d3      	ldrb	r3, [r2, #3]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d135      	bne.n	2158 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    20ec:	7813      	ldrb	r3, [r2, #0]
    20ee:	2b80      	cmp	r3, #128	; 0x80
    20f0:	d029      	beq.n	2146 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    20f2:	061b      	lsls	r3, r3, #24
    20f4:	2480      	movs	r4, #128	; 0x80
    20f6:	0264      	lsls	r4, r4, #9
    20f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    20fa:	7854      	ldrb	r4, [r2, #1]
    20fc:	2502      	movs	r5, #2
    20fe:	43ac      	bics	r4, r5
    2100:	d106      	bne.n	2110 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2102:	7894      	ldrb	r4, [r2, #2]
    2104:	2c00      	cmp	r4, #0
    2106:	d120      	bne.n	214a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2108:	2480      	movs	r4, #128	; 0x80
    210a:	02a4      	lsls	r4, r4, #10
    210c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    210e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2110:	7854      	ldrb	r4, [r2, #1]
    2112:	3c01      	subs	r4, #1
    2114:	2c01      	cmp	r4, #1
    2116:	d91c      	bls.n	2152 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2118:	040d      	lsls	r5, r1, #16
    211a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    211c:	24a0      	movs	r4, #160	; 0xa0
    211e:	05e4      	lsls	r4, r4, #23
    2120:	432c      	orrs	r4, r5
    2122:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2124:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2126:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2128:	24d0      	movs	r4, #208	; 0xd0
    212a:	0624      	lsls	r4, r4, #24
    212c:	432c      	orrs	r4, r5
    212e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2130:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2132:	78d4      	ldrb	r4, [r2, #3]
    2134:	2c00      	cmp	r4, #0
    2136:	d122      	bne.n	217e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2138:	035b      	lsls	r3, r3, #13
    213a:	d51c      	bpl.n	2176 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    213c:	7893      	ldrb	r3, [r2, #2]
    213e:	2b01      	cmp	r3, #1
    2140:	d01e      	beq.n	2180 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2142:	6141      	str	r1, [r0, #20]
    2144:	e017      	b.n	2176 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2146:	2300      	movs	r3, #0
    2148:	e7d7      	b.n	20fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    214a:	24c0      	movs	r4, #192	; 0xc0
    214c:	02e4      	lsls	r4, r4, #11
    214e:	4323      	orrs	r3, r4
    2150:	e7dd      	b.n	210e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2152:	4c0d      	ldr	r4, [pc, #52]	; (2188 <_system_pinmux_config+0xa4>)
    2154:	4023      	ands	r3, r4
    2156:	e7df      	b.n	2118 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2158:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    215a:	040c      	lsls	r4, r1, #16
    215c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    215e:	23a0      	movs	r3, #160	; 0xa0
    2160:	05db      	lsls	r3, r3, #23
    2162:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2164:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2166:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2168:	23d0      	movs	r3, #208	; 0xd0
    216a:	061b      	lsls	r3, r3, #24
    216c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    216e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2170:	78d3      	ldrb	r3, [r2, #3]
    2172:	2b00      	cmp	r3, #0
    2174:	d103      	bne.n	217e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2176:	7853      	ldrb	r3, [r2, #1]
    2178:	3b01      	subs	r3, #1
    217a:	2b01      	cmp	r3, #1
    217c:	d902      	bls.n	2184 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    217e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2180:	6181      	str	r1, [r0, #24]
    2182:	e7f8      	b.n	2176 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2184:	6081      	str	r1, [r0, #8]
}
    2186:	e7fa      	b.n	217e <_system_pinmux_config+0x9a>
    2188:	fffbffff 	.word	0xfffbffff

0000218c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    218c:	b510      	push	{r4, lr}
    218e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2190:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2192:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2194:	2900      	cmp	r1, #0
    2196:	d104      	bne.n	21a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2198:	0943      	lsrs	r3, r0, #5
    219a:	01db      	lsls	r3, r3, #7
    219c:	4905      	ldr	r1, [pc, #20]	; (21b4 <system_pinmux_pin_set_config+0x28>)
    219e:	468c      	mov	ip, r1
    21a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    21a2:	241f      	movs	r4, #31
    21a4:	4020      	ands	r0, r4
    21a6:	2101      	movs	r1, #1
    21a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    21aa:	0018      	movs	r0, r3
    21ac:	4b02      	ldr	r3, [pc, #8]	; (21b8 <system_pinmux_pin_set_config+0x2c>)
    21ae:	4798      	blx	r3
}
    21b0:	bd10      	pop	{r4, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	41004400 	.word	0x41004400
    21b8:	000020e5 	.word	0x000020e5

000021bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    21bc:	4770      	bx	lr
	...

000021c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    21c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    21c2:	4b05      	ldr	r3, [pc, #20]	; (21d8 <system_init+0x18>)
    21c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    21c6:	4b05      	ldr	r3, [pc, #20]	; (21dc <system_init+0x1c>)
    21c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    21ca:	4b05      	ldr	r3, [pc, #20]	; (21e0 <system_init+0x20>)
    21cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <system_init+0x24>)
    21d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <system_init+0x28>)
    21d4:	4798      	blx	r3
}
    21d6:	bd10      	pop	{r4, pc}
    21d8:	00001dc5 	.word	0x00001dc5
    21dc:	00001bdd 	.word	0x00001bdd
    21e0:	000021bd 	.word	0x000021bd
    21e4:	000021bd 	.word	0x000021bd
    21e8:	000021bd 	.word	0x000021bd

000021ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    21ec:	e7fe      	b.n	21ec <Dummy_Handler>
	...

000021f0 <Reset_Handler>:
{
    21f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    21f2:	4a2a      	ldr	r2, [pc, #168]	; (229c <Reset_Handler+0xac>)
    21f4:	4b2a      	ldr	r3, [pc, #168]	; (22a0 <Reset_Handler+0xb0>)
    21f6:	429a      	cmp	r2, r3
    21f8:	d011      	beq.n	221e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    21fa:	001a      	movs	r2, r3
    21fc:	4b29      	ldr	r3, [pc, #164]	; (22a4 <Reset_Handler+0xb4>)
    21fe:	429a      	cmp	r2, r3
    2200:	d20d      	bcs.n	221e <Reset_Handler+0x2e>
    2202:	4a29      	ldr	r2, [pc, #164]	; (22a8 <Reset_Handler+0xb8>)
    2204:	3303      	adds	r3, #3
    2206:	1a9b      	subs	r3, r3, r2
    2208:	089b      	lsrs	r3, r3, #2
    220a:	3301      	adds	r3, #1
    220c:	009b      	lsls	r3, r3, #2
    220e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2210:	4823      	ldr	r0, [pc, #140]	; (22a0 <Reset_Handler+0xb0>)
    2212:	4922      	ldr	r1, [pc, #136]	; (229c <Reset_Handler+0xac>)
    2214:	588c      	ldr	r4, [r1, r2]
    2216:	5084      	str	r4, [r0, r2]
    2218:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    221a:	429a      	cmp	r2, r3
    221c:	d1fa      	bne.n	2214 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    221e:	4a23      	ldr	r2, [pc, #140]	; (22ac <Reset_Handler+0xbc>)
    2220:	4b23      	ldr	r3, [pc, #140]	; (22b0 <Reset_Handler+0xc0>)
    2222:	429a      	cmp	r2, r3
    2224:	d20a      	bcs.n	223c <Reset_Handler+0x4c>
    2226:	43d3      	mvns	r3, r2
    2228:	4921      	ldr	r1, [pc, #132]	; (22b0 <Reset_Handler+0xc0>)
    222a:	185b      	adds	r3, r3, r1
    222c:	2103      	movs	r1, #3
    222e:	438b      	bics	r3, r1
    2230:	3304      	adds	r3, #4
    2232:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2234:	2100      	movs	r1, #0
    2236:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2238:	4293      	cmp	r3, r2
    223a:	d1fc      	bne.n	2236 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    223c:	4a1d      	ldr	r2, [pc, #116]	; (22b4 <Reset_Handler+0xc4>)
    223e:	21ff      	movs	r1, #255	; 0xff
    2240:	4b1d      	ldr	r3, [pc, #116]	; (22b8 <Reset_Handler+0xc8>)
    2242:	438b      	bics	r3, r1
    2244:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2246:	39fd      	subs	r1, #253	; 0xfd
    2248:	2390      	movs	r3, #144	; 0x90
    224a:	005b      	lsls	r3, r3, #1
    224c:	4a1b      	ldr	r2, [pc, #108]	; (22bc <Reset_Handler+0xcc>)
    224e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2250:	4a1b      	ldr	r2, [pc, #108]	; (22c0 <Reset_Handler+0xd0>)
    2252:	78d3      	ldrb	r3, [r2, #3]
    2254:	2503      	movs	r5, #3
    2256:	43ab      	bics	r3, r5
    2258:	2402      	movs	r4, #2
    225a:	4323      	orrs	r3, r4
    225c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    225e:	78d3      	ldrb	r3, [r2, #3]
    2260:	270c      	movs	r7, #12
    2262:	43bb      	bics	r3, r7
    2264:	2608      	movs	r6, #8
    2266:	4333      	orrs	r3, r6
    2268:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    226a:	4b16      	ldr	r3, [pc, #88]	; (22c4 <Reset_Handler+0xd4>)
    226c:	7b98      	ldrb	r0, [r3, #14]
    226e:	2230      	movs	r2, #48	; 0x30
    2270:	4390      	bics	r0, r2
    2272:	2220      	movs	r2, #32
    2274:	4310      	orrs	r0, r2
    2276:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2278:	7b99      	ldrb	r1, [r3, #14]
    227a:	43b9      	bics	r1, r7
    227c:	4331      	orrs	r1, r6
    227e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2280:	7b9a      	ldrb	r2, [r3, #14]
    2282:	43aa      	bics	r2, r5
    2284:	4322      	orrs	r2, r4
    2286:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2288:	4a0f      	ldr	r2, [pc, #60]	; (22c8 <Reset_Handler+0xd8>)
    228a:	6853      	ldr	r3, [r2, #4]
    228c:	2180      	movs	r1, #128	; 0x80
    228e:	430b      	orrs	r3, r1
    2290:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2292:	4b0e      	ldr	r3, [pc, #56]	; (22cc <Reset_Handler+0xdc>)
    2294:	4798      	blx	r3
        main();
    2296:	4b0e      	ldr	r3, [pc, #56]	; (22d0 <Reset_Handler+0xe0>)
    2298:	4798      	blx	r3
    229a:	e7fe      	b.n	229a <Reset_Handler+0xaa>
    229c:	00005494 	.word	0x00005494
    22a0:	20000000 	.word	0x20000000
    22a4:	20000070 	.word	0x20000070
    22a8:	20000004 	.word	0x20000004
    22ac:	20000070 	.word	0x20000070
    22b0:	200001a4 	.word	0x200001a4
    22b4:	e000ed00 	.word	0xe000ed00
    22b8:	00000000 	.word	0x00000000
    22bc:	41007000 	.word	0x41007000
    22c0:	41005000 	.word	0x41005000
    22c4:	41004800 	.word	0x41004800
    22c8:	41004000 	.word	0x41004000
    22cc:	00004139 	.word	0x00004139
    22d0:	000026f1 	.word	0x000026f1

000022d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    22d4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    22d6:	4a06      	ldr	r2, [pc, #24]	; (22f0 <_sbrk+0x1c>)
    22d8:	6812      	ldr	r2, [r2, #0]
    22da:	2a00      	cmp	r2, #0
    22dc:	d004      	beq.n	22e8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    22de:	4a04      	ldr	r2, [pc, #16]	; (22f0 <_sbrk+0x1c>)
    22e0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    22e2:	18c3      	adds	r3, r0, r3
    22e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    22e6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    22e8:	4902      	ldr	r1, [pc, #8]	; (22f4 <_sbrk+0x20>)
    22ea:	4a01      	ldr	r2, [pc, #4]	; (22f0 <_sbrk+0x1c>)
    22ec:	6011      	str	r1, [r2, #0]
    22ee:	e7f6      	b.n	22de <_sbrk+0xa>
    22f0:	200000c8 	.word	0x200000c8
    22f4:	200021a8 	.word	0x200021a8

000022f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    22f8:	2001      	movs	r0, #1
    22fa:	4240      	negs	r0, r0
    22fc:	4770      	bx	lr

000022fe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    22fe:	2380      	movs	r3, #128	; 0x80
    2300:	019b      	lsls	r3, r3, #6
    2302:	604b      	str	r3, [r1, #4]

	return 0;
}
    2304:	2000      	movs	r0, #0
    2306:	4770      	bx	lr

00002308 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2308:	2001      	movs	r0, #1
    230a:	4770      	bx	lr

0000230c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    230c:	2000      	movs	r0, #0
    230e:	4770      	bx	lr

00002310 <usart_write_callback>:
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
void usart_write_callback(struct usart_module *const usart_module)
{
//	port_pin_toggle_output_level(LED_0_PIN);
}
    2310:	4770      	bx	lr
	...

00002314 <usart_read_callback>:
{usart_write_buffer_job(&usart_instance,
    2314:	b510      	push	{r4, lr}
    2316:	2205      	movs	r2, #5
    2318:	4902      	ldr	r1, [pc, #8]	; (2324 <usart_read_callback+0x10>)
    231a:	4803      	ldr	r0, [pc, #12]	; (2328 <usart_read_callback+0x14>)
    231c:	4b03      	ldr	r3, [pc, #12]	; (232c <usart_read_callback+0x18>)
    231e:	4798      	blx	r3
}
    2320:	bd10      	pop	{r4, pc}
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	20000138 	.word	0x20000138
    2328:	20000104 	.word	0x20000104
    232c:	0000154d 	.word	0x0000154d

00002330 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2330:	b570      	push	{r4, r5, r6, lr}
    2332:	b082      	sub	sp, #8
    2334:	0005      	movs	r5, r0
    2336:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2338:	2200      	movs	r2, #0
    233a:	466b      	mov	r3, sp
    233c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    233e:	4c06      	ldr	r4, [pc, #24]	; (2358 <usart_serial_getchar+0x28>)
    2340:	466b      	mov	r3, sp
    2342:	1d99      	adds	r1, r3, #6
    2344:	0028      	movs	r0, r5
    2346:	47a0      	blx	r4
    2348:	2800      	cmp	r0, #0
    234a:	d1f9      	bne.n	2340 <usart_serial_getchar+0x10>

	*c = temp;
    234c:	466b      	mov	r3, sp
    234e:	3306      	adds	r3, #6
    2350:	881b      	ldrh	r3, [r3, #0]
    2352:	7033      	strb	r3, [r6, #0]
}
    2354:	b002      	add	sp, #8
    2356:	bd70      	pop	{r4, r5, r6, pc}
    2358:	00001489 	.word	0x00001489

0000235c <usart_serial_putchar>:
{
    235c:	b570      	push	{r4, r5, r6, lr}
    235e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2360:	b28c      	uxth	r4, r1
    2362:	4e03      	ldr	r6, [pc, #12]	; (2370 <usart_serial_putchar+0x14>)
    2364:	0021      	movs	r1, r4
    2366:	0028      	movs	r0, r5
    2368:	47b0      	blx	r6
    236a:	2800      	cmp	r0, #0
    236c:	d1fa      	bne.n	2364 <usart_serial_putchar+0x8>
}
    236e:	bd70      	pop	{r4, r5, r6, pc}
    2370:	0000145d 	.word	0x0000145d

00002374 <i2c_write_complete_callback>:
	i2c_master_enable(&i2c_master_instance);
}


void i2c_write_complete_callback(struct i2c_master_module *const module)
{
    2374:	b510      	push	{r4, lr}
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
    2376:	4902      	ldr	r1, [pc, #8]	; (2380 <i2c_write_complete_callback+0xc>)
    2378:	4802      	ldr	r0, [pc, #8]	; (2384 <i2c_write_complete_callback+0x10>)
    237a:	4b03      	ldr	r3, [pc, #12]	; (2388 <i2c_write_complete_callback+0x14>)
    237c:	4798      	blx	r3
}
    237e:	bd10      	pop	{r4, pc}
    2380:	20000174 	.word	0x20000174
    2384:	2000014c 	.word	0x2000014c
    2388:	00000e75 	.word	0x00000e75

0000238c <configure_usart>:
{
    238c:	b5f0      	push	{r4, r5, r6, r7, lr}
    238e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2390:	2380      	movs	r3, #128	; 0x80
    2392:	05db      	lsls	r3, r3, #23
    2394:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2396:	2300      	movs	r3, #0
    2398:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    239a:	22ff      	movs	r2, #255	; 0xff
    239c:	4669      	mov	r1, sp
    239e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    23a0:	2200      	movs	r2, #0
    23a2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    23a4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    23a6:	2196      	movs	r1, #150	; 0x96
    23a8:	0189      	lsls	r1, r1, #6
    23aa:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    23ac:	2401      	movs	r4, #1
    23ae:	2124      	movs	r1, #36	; 0x24
    23b0:	4668      	mov	r0, sp
    23b2:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    23b4:	3101      	adds	r1, #1
    23b6:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    23b8:	3101      	adds	r1, #1
    23ba:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    23bc:	3101      	adds	r1, #1
    23be:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    23c0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    23c2:	3105      	adds	r1, #5
    23c4:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    23c6:	3101      	adds	r1, #1
    23c8:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    23ca:	930c      	str	r3, [sp, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    23cc:	930d      	str	r3, [sp, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    23ce:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    23d0:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    23d2:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    23d4:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    23d6:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    23d8:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    23da:	2313      	movs	r3, #19
    23dc:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    23de:	7742      	strb	r2, [r0, #29]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    23e0:	23c4      	movs	r3, #196	; 0xc4
    23e2:	039b      	lsls	r3, r3, #14
    23e4:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
    23e6:	4b17      	ldr	r3, [pc, #92]	; (2444 <configure_usart+0xb8>)
    23e8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;
    23ea:	4b17      	ldr	r3, [pc, #92]	; (2448 <configure_usart+0xbc>)
    23ec:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    23ee:	4d17      	ldr	r5, [pc, #92]	; (244c <configure_usart+0xc0>)
    23f0:	4b17      	ldr	r3, [pc, #92]	; (2450 <configure_usart+0xc4>)
    23f2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    23f4:	4a17      	ldr	r2, [pc, #92]	; (2454 <configure_usart+0xc8>)
    23f6:	4b18      	ldr	r3, [pc, #96]	; (2458 <configure_usart+0xcc>)
    23f8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    23fa:	4a18      	ldr	r2, [pc, #96]	; (245c <configure_usart+0xd0>)
    23fc:	4b18      	ldr	r3, [pc, #96]	; (2460 <configure_usart+0xd4>)
    23fe:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2400:	466a      	mov	r2, sp
    2402:	4918      	ldr	r1, [pc, #96]	; (2464 <configure_usart+0xd8>)
    2404:	0028      	movs	r0, r5
    2406:	4b18      	ldr	r3, [pc, #96]	; (2468 <configure_usart+0xdc>)
    2408:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    240a:	4f18      	ldr	r7, [pc, #96]	; (246c <configure_usart+0xe0>)
    240c:	683b      	ldr	r3, [r7, #0]
    240e:	6898      	ldr	r0, [r3, #8]
    2410:	2100      	movs	r1, #0
    2412:	4e17      	ldr	r6, [pc, #92]	; (2470 <configure_usart+0xe4>)
    2414:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2416:	683b      	ldr	r3, [r7, #0]
    2418:	6858      	ldr	r0, [r3, #4]
    241a:	2100      	movs	r1, #0
    241c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    241e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2420:	0030      	movs	r0, r6
    2422:	4b14      	ldr	r3, [pc, #80]	; (2474 <configure_usart+0xe8>)
    2424:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2426:	231f      	movs	r3, #31
    2428:	4018      	ands	r0, r3
    242a:	4084      	lsls	r4, r0
    242c:	4b12      	ldr	r3, [pc, #72]	; (2478 <configure_usart+0xec>)
    242e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2430:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2432:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2434:	2b00      	cmp	r3, #0
    2436:	d1fc      	bne.n	2432 <configure_usart+0xa6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2438:	6833      	ldr	r3, [r6, #0]
    243a:	2202      	movs	r2, #2
    243c:	4313      	orrs	r3, r2
    243e:	6033      	str	r3, [r6, #0]
}
    2440:	b011      	add	sp, #68	; 0x44
    2442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2444:	00140003 	.word	0x00140003
    2448:	00150003 	.word	0x00150003
    244c:	20000104 	.word	0x20000104
    2450:	200000e8 	.word	0x200000e8
    2454:	0000235d 	.word	0x0000235d
    2458:	200000e4 	.word	0x200000e4
    245c:	00002331 	.word	0x00002331
    2460:	200000e0 	.word	0x200000e0
    2464:	42001400 	.word	0x42001400
    2468:	00001119 	.word	0x00001119
    246c:	2000000c 	.word	0x2000000c
    2470:	000041d9 	.word	0x000041d9
    2474:	00001ab5 	.word	0x00001ab5
    2478:	e000e100 	.word	0xe000e100

0000247c <configure_usart_callbacks>:
{
    247c:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    247e:	4c08      	ldr	r4, [pc, #32]	; (24a0 <configure_usart_callbacks+0x24>)
    2480:	2200      	movs	r2, #0
    2482:	4908      	ldr	r1, [pc, #32]	; (24a4 <configure_usart_callbacks+0x28>)
    2484:	0020      	movs	r0, r4
    2486:	4d08      	ldr	r5, [pc, #32]	; (24a8 <configure_usart_callbacks+0x2c>)
    2488:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    248a:	2201      	movs	r2, #1
    248c:	4907      	ldr	r1, [pc, #28]	; (24ac <configure_usart_callbacks+0x30>)
    248e:	0020      	movs	r0, r4
    2490:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2492:	2231      	movs	r2, #49	; 0x31
    2494:	5ca3      	ldrb	r3, [r4, r2]
    2496:	2103      	movs	r1, #3
    2498:	430b      	orrs	r3, r1
    249a:	54a3      	strb	r3, [r4, r2]
}
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	20000104 	.word	0x20000104
    24a4:	00002311 	.word	0x00002311
    24a8:	00001535 	.word	0x00001535
    24ac:	00002315 	.word	0x00002315

000024b0 <configure_i2c>:
{
    24b0:	b530      	push	{r4, r5, lr}
    24b2:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    24b4:	ab01      	add	r3, sp, #4
    24b6:	2164      	movs	r1, #100	; 0x64
    24b8:	9101      	str	r1, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    24ba:	4a21      	ldr	r2, [pc, #132]	; (2540 <configure_i2c+0x90>)
    24bc:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    24be:	2200      	movs	r2, #0
    24c0:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    24c2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    24c4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    24c6:	2080      	movs	r0, #128	; 0x80
    24c8:	0380      	lsls	r0, r0, #14
    24ca:	9005      	str	r0, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    24cc:	2001      	movs	r0, #1
    24ce:	4240      	negs	r0, r0
    24d0:	8298      	strh	r0, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    24d2:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    24d4:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    24d6:	3025      	adds	r0, #37	; 0x25
    24d8:	541a      	strb	r2, [r3, r0]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    24da:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    24dc:	3008      	adds	r0, #8
    24de:	541a      	strb	r2, [r3, r0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    24e0:	3001      	adds	r0, #1
    24e2:	541a      	strb	r2, [r3, r0]
	config->master_scl_low_extend_timeout  = false;
    24e4:	3001      	adds	r0, #1
    24e6:	541a      	strb	r2, [r3, r0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    24e8:	32d7      	adds	r2, #215	; 0xd7
    24ea:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.buffer_timeout = 100;
    24ec:	82d9      	strh	r1, [r3, #22]
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)	!= STATUS_OK);
    24ee:	4d15      	ldr	r5, [pc, #84]	; (2544 <configure_i2c+0x94>)
    24f0:	4c15      	ldr	r4, [pc, #84]	; (2548 <configure_i2c+0x98>)
    24f2:	aa01      	add	r2, sp, #4
    24f4:	4915      	ldr	r1, [pc, #84]	; (254c <configure_i2c+0x9c>)
    24f6:	0028      	movs	r0, r5
    24f8:	47a0      	blx	r4
    24fa:	2800      	cmp	r0, #0
    24fc:	d1f9      	bne.n	24f2 <configure_i2c+0x42>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    24fe:	4b11      	ldr	r3, [pc, #68]	; (2544 <configure_i2c+0x94>)
    2500:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2502:	2207      	movs	r2, #7
    2504:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2506:	421a      	tst	r2, r3
    2508:	d1fc      	bne.n	2504 <configure_i2c+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    250a:	6823      	ldr	r3, [r4, #0]
    250c:	2202      	movs	r2, #2
    250e:	4313      	orrs	r3, r2
    2510:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2512:	4d0c      	ldr	r5, [pc, #48]	; (2544 <configure_i2c+0x94>)
    2514:	6828      	ldr	r0, [r5, #0]
    2516:	4b0e      	ldr	r3, [pc, #56]	; (2550 <configure_i2c+0xa0>)
    2518:	4798      	blx	r3
    251a:	231f      	movs	r3, #31
    251c:	4018      	ands	r0, r3
    251e:	3b1e      	subs	r3, #30
    2520:	4083      	lsls	r3, r0
    2522:	4a0c      	ldr	r2, [pc, #48]	; (2554 <configure_i2c+0xa4>)
    2524:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2526:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2528:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    252a:	2110      	movs	r1, #16
    252c:	8b62      	ldrh	r2, [r4, #26]
    252e:	420a      	tst	r2, r1
    2530:	d104      	bne.n	253c <configure_i2c+0x8c>
		timeout_counter++;
    2532:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2534:	4283      	cmp	r3, r0
    2536:	d3f9      	bcc.n	252c <configure_i2c+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2538:	2310      	movs	r3, #16
    253a:	8363      	strh	r3, [r4, #26]
}
    253c:	b00f      	add	sp, #60	; 0x3c
    253e:	bd30      	pop	{r4, r5, pc}
    2540:	00000d48 	.word	0x00000d48
    2544:	2000014c 	.word	0x2000014c
    2548:	00000675 	.word	0x00000675
    254c:	42001000 	.word	0x42001000
    2550:	00001ab5 	.word	0x00001ab5
    2554:	e000e100 	.word	0xe000e100

00002558 <configure_i2c_callbacks>:

void configure_i2c_callbacks(void)
{
    2558:	b510      	push	{r4, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2c_master_instance,
    255a:	4c05      	ldr	r4, [pc, #20]	; (2570 <configure_i2c_callbacks+0x18>)
    255c:	2200      	movs	r2, #0
    255e:	4905      	ldr	r1, [pc, #20]	; (2574 <configure_i2c_callbacks+0x1c>)
    2560:	0020      	movs	r0, r4
    2562:	4b05      	ldr	r3, [pc, #20]	; (2578 <configure_i2c_callbacks+0x20>)
    2564:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    2566:	7e63      	ldrb	r3, [r4, #25]
    2568:	2201      	movs	r2, #1
    256a:	4313      	orrs	r3, r2
    256c:	7663      	strb	r3, [r4, #25]
	i2c_write_complete_callback,
	I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_master_instance,
	I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    256e:	bd10      	pop	{r4, pc}
    2570:	2000014c 	.word	0x2000014c
    2574:	00002375 	.word	0x00002375
    2578:	00000e5d 	.word	0x00000e5d

0000257c <i2c_accel>:
		//			printf(rd_packet.data);
	}
}

void i2c_accel()
{
    257c:	b570      	push	{r4, r5, r6, lr}
	wr_packet.address=0x53;
    257e:	4917      	ldr	r1, [pc, #92]	; (25dc <i2c_accel+0x60>)
    2580:	2253      	movs	r2, #83	; 0x53
    2582:	800a      	strh	r2, [r1, #0]
	wr_packet.data_length=1;
    2584:	2301      	movs	r3, #1
    2586:	804b      	strh	r3, [r1, #2]
	wr_packet.data=wr_buffer;
    2588:	4815      	ldr	r0, [pc, #84]	; (25e0 <i2c_accel+0x64>)
    258a:	6048      	str	r0, [r1, #4]
	rd_packet.address=0x53;
    258c:	4c15      	ldr	r4, [pc, #84]	; (25e4 <i2c_accel+0x68>)
    258e:	8022      	strh	r2, [r4, #0]
	rd_packet.data_length=1;
    2590:	8063      	strh	r3, [r4, #2]
	rd_packet.data=rd_buffer;
    2592:	4b15      	ldr	r3, [pc, #84]	; (25e8 <i2c_accel+0x6c>)
    2594:	6063      	str	r3, [r4, #4]
	enum status_code i2c_status_job_write = i2c_master_write_packet_wait(&i2c_master_instance, &wr_packet);
    2596:	4d15      	ldr	r5, [pc, #84]	; (25ec <i2c_accel+0x70>)
    2598:	0028      	movs	r0, r5
    259a:	4b15      	ldr	r3, [pc, #84]	; (25f0 <i2c_accel+0x74>)
    259c:	4798      	blx	r3
    259e:	0006      	movs	r6, r0
	delay_us(10);
    25a0:	200a      	movs	r0, #10
    25a2:	4b14      	ldr	r3, [pc, #80]	; (25f4 <i2c_accel+0x78>)
    25a4:	4798      	blx	r3
	enum status_code i2c_status_job_read = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    25a6:	0021      	movs	r1, r4
    25a8:	0028      	movs	r0, r5
    25aa:	4b13      	ldr	r3, [pc, #76]	; (25f8 <i2c_accel+0x7c>)
    25ac:	4798      	blx	r3
    25ae:	0004      	movs	r4, r0
	printf("I2C write status %x= %d\n\r", 0x53, i2c_status_job_write);
    25b0:	0032      	movs	r2, r6
    25b2:	2153      	movs	r1, #83	; 0x53
    25b4:	4811      	ldr	r0, [pc, #68]	; (25fc <i2c_accel+0x80>)
    25b6:	4d12      	ldr	r5, [pc, #72]	; (2600 <i2c_accel+0x84>)
    25b8:	47a8      	blx	r5
	printf("I2C read status %x= %d\n\r", 0x53, i2c_status_job_read);
    25ba:	0022      	movs	r2, r4
    25bc:	2153      	movs	r1, #83	; 0x53
    25be:	4811      	ldr	r0, [pc, #68]	; (2604 <i2c_accel+0x88>)
    25c0:	47a8      	blx	r5
	if(i2c_status_job_read == 0) printf(" Return Value: 0x%x\n\r", rd_buffer[0]);
    25c2:	2c00      	cmp	r4, #0
    25c4:	d003      	beq.n	25ce <i2c_accel+0x52>
	//i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
	delay_ms(1);
    25c6:	2001      	movs	r0, #1
    25c8:	4b0f      	ldr	r3, [pc, #60]	; (2608 <i2c_accel+0x8c>)
    25ca:	4798      	blx	r3
}
    25cc:	bd70      	pop	{r4, r5, r6, pc}
	if(i2c_status_job_read == 0) printf(" Return Value: 0x%x\n\r", rd_buffer[0]);
    25ce:	4b06      	ldr	r3, [pc, #24]	; (25e8 <i2c_accel+0x6c>)
    25d0:	7819      	ldrb	r1, [r3, #0]
    25d2:	480e      	ldr	r0, [pc, #56]	; (260c <i2c_accel+0x90>)
    25d4:	4b0a      	ldr	r3, [pc, #40]	; (2600 <i2c_accel+0x84>)
    25d6:	4798      	blx	r3
    25d8:	e7f5      	b.n	25c6 <i2c_accel+0x4a>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	20000140 	.word	0x20000140
    25e0:	200000d0 	.word	0x200000d0
    25e4:	20000174 	.word	0x20000174
    25e8:	200000cc 	.word	0x200000cc
    25ec:	2000014c 	.word	0x2000014c
    25f0:	00000ca1 	.word	0x00000ca1
    25f4:	00001b85 	.word	0x00001b85
    25f8:	00000c7d 	.word	0x00000c7d
    25fc:	0000530c 	.word	0x0000530c
    2600:	000041a5 	.word	0x000041a5
    2604:	00005328 	.word	0x00005328
    2608:	00001bb1 	.word	0x00001bb1
    260c:	00005344 	.word	0x00005344

00002610 <init_adc>:


struct adc_module adc_instance;

void init_adc(void)
{
    2610:	b510      	push	{r4, lr}
    2612:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    2614:	4668      	mov	r0, sp
    2616:	4b11      	ldr	r3, [pc, #68]	; (265c <init_adc+0x4c>)
    2618:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_INT1V;
    261a:	2300      	movs	r3, #0
    261c:	466a      	mov	r2, sp
    261e:	7053      	strb	r3, [r2, #1]
	adc_init(&adc_instance, ADC, &config_adc);
    2620:	4c0f      	ldr	r4, [pc, #60]	; (2660 <init_adc+0x50>)
    2622:	4910      	ldr	r1, [pc, #64]	; (2664 <init_adc+0x54>)
    2624:	0020      	movs	r0, r4
    2626:	4b10      	ldr	r3, [pc, #64]	; (2668 <init_adc+0x58>)
    2628:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    262a:	6822      	ldr	r2, [r4, #0]
    262c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    262e:	b25b      	sxtb	r3, r3
    2630:	2b00      	cmp	r3, #0
    2632:	dbfb      	blt.n	262c <init_adc+0x1c>
    2634:	2180      	movs	r1, #128	; 0x80
    2636:	0409      	lsls	r1, r1, #16
    2638:	4b0c      	ldr	r3, [pc, #48]	; (266c <init_adc+0x5c>)
    263a:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    263c:	230f      	movs	r3, #15
    263e:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2640:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2642:	7813      	ldrb	r3, [r2, #0]
    2644:	2102      	movs	r1, #2
    2646:	430b      	orrs	r3, r1
    2648:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    264a:	4b05      	ldr	r3, [pc, #20]	; (2660 <init_adc+0x50>)
    264c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    264e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2650:	b25b      	sxtb	r3, r3
    2652:	2b00      	cmp	r3, #0
    2654:	dbfb      	blt.n	264e <init_adc+0x3e>
	adc_enable(&adc_instance);	
}
    2656:	b00c      	add	sp, #48	; 0x30
    2658:	bd10      	pop	{r4, pc}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	00000115 	.word	0x00000115
    2660:	20000180 	.word	0x20000180
    2664:	42004000 	.word	0x42004000
    2668:	0000015d 	.word	0x0000015d
    266c:	e000e100 	.word	0xe000e100

00002670 <config_port_pin>:
	adc_init(&adc_instance, ADC, &config_adc_temp);
	adc_enable(&adc_instance);
}

void config_port_pin(void)
{
    2670:	b500      	push	{lr}
    2672:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2674:	a901      	add	r1, sp, #4
    2676:	2300      	movs	r3, #0
    2678:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    267a:	2201      	movs	r2, #1
    267c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    267e:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	port_pin_set_config(PIN_PA10, &config_port_pin);
    2680:	200a      	movs	r0, #10
    2682:	4b04      	ldr	r3, [pc, #16]	; (2694 <config_port_pin+0x24>)
    2684:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2686:	2280      	movs	r2, #128	; 0x80
    2688:	00d2      	lsls	r2, r2, #3
    268a:	4b03      	ldr	r3, [pc, #12]	; (2698 <config_port_pin+0x28>)
    268c:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA10, false);
}
    268e:	b003      	add	sp, #12
    2690:	bd00      	pop	{pc}
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	00000645 	.word	0x00000645
    2698:	41004400 	.word	0x41004400

0000269c <config_all>:

void config_all()
{
    269c:	b510      	push	{r4, lr}
	system_init();
    269e:	4b0b      	ldr	r3, [pc, #44]	; (26cc <config_all+0x30>)
    26a0:	4798      	blx	r3
	
	configure_usart();
    26a2:	4b0b      	ldr	r3, [pc, #44]	; (26d0 <config_all+0x34>)
    26a4:	4798      	blx	r3
	configure_usart_callbacks();
    26a6:	4b0b      	ldr	r3, [pc, #44]	; (26d4 <config_all+0x38>)
    26a8:	4798      	blx	r3

	configure_i2c();
    26aa:	4b0b      	ldr	r3, [pc, #44]	; (26d8 <config_all+0x3c>)
    26ac:	4798      	blx	r3
	configure_i2c_callbacks();
    26ae:	4b0b      	ldr	r3, [pc, #44]	; (26dc <config_all+0x40>)
    26b0:	4798      	blx	r3

	init_adc();
    26b2:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <config_all+0x44>)
    26b4:	4798      	blx	r3

	config_port_pin();
    26b6:	4b0b      	ldr	r3, [pc, #44]	; (26e4 <config_all+0x48>)
    26b8:	4798      	blx	r3

	delay_init();
    26ba:	4b0b      	ldr	r3, [pc, #44]	; (26e8 <config_all+0x4c>)
    26bc:	4798      	blx	r3
	cpu_irq_enable();
    26be:	2201      	movs	r2, #1
    26c0:	4b0a      	ldr	r3, [pc, #40]	; (26ec <config_all+0x50>)
    26c2:	701a      	strb	r2, [r3, #0]
    26c4:	f3bf 8f5f 	dmb	sy
    26c8:	b662      	cpsie	i
	
	system_interrupt_enable_global();
}
    26ca:	bd10      	pop	{r4, pc}
    26cc:	000021c1 	.word	0x000021c1
    26d0:	0000238d 	.word	0x0000238d
    26d4:	0000247d 	.word	0x0000247d
    26d8:	000024b1 	.word	0x000024b1
    26dc:	00002559 	.word	0x00002559
    26e0:	00002611 	.word	0x00002611
    26e4:	00002671 	.word	0x00002671
    26e8:	00001b45 	.word	0x00001b45
    26ec:	20000008 	.word	0x20000008

000026f0 <main>:

int main (void)
{
    26f0:	b510      	push	{r4, lr}

	config_all();
    26f2:	4b02      	ldr	r3, [pc, #8]	; (26fc <main+0xc>)
    26f4:	4798      	blx	r3
		printf("TEMP: %d\n", result_temp);
		*/
		//printf("\n");
		//fgets(name, MAX_INPUT_SIZE, stdin);
		//printf(name);
		i2c_accel(); //I2C Accel not working; wrong type of "read job vs wait"?
    26f6:	4c02      	ldr	r4, [pc, #8]	; (2700 <main+0x10>)
    26f8:	47a0      	blx	r4
    26fa:	e7fd      	b.n	26f8 <main+0x8>
    26fc:	0000269d 	.word	0x0000269d
    2700:	0000257d 	.word	0x0000257d

00002704 <__udivsi3>:
    2704:	2200      	movs	r2, #0
    2706:	0843      	lsrs	r3, r0, #1
    2708:	428b      	cmp	r3, r1
    270a:	d374      	bcc.n	27f6 <__udivsi3+0xf2>
    270c:	0903      	lsrs	r3, r0, #4
    270e:	428b      	cmp	r3, r1
    2710:	d35f      	bcc.n	27d2 <__udivsi3+0xce>
    2712:	0a03      	lsrs	r3, r0, #8
    2714:	428b      	cmp	r3, r1
    2716:	d344      	bcc.n	27a2 <__udivsi3+0x9e>
    2718:	0b03      	lsrs	r3, r0, #12
    271a:	428b      	cmp	r3, r1
    271c:	d328      	bcc.n	2770 <__udivsi3+0x6c>
    271e:	0c03      	lsrs	r3, r0, #16
    2720:	428b      	cmp	r3, r1
    2722:	d30d      	bcc.n	2740 <__udivsi3+0x3c>
    2724:	22ff      	movs	r2, #255	; 0xff
    2726:	0209      	lsls	r1, r1, #8
    2728:	ba12      	rev	r2, r2
    272a:	0c03      	lsrs	r3, r0, #16
    272c:	428b      	cmp	r3, r1
    272e:	d302      	bcc.n	2736 <__udivsi3+0x32>
    2730:	1212      	asrs	r2, r2, #8
    2732:	0209      	lsls	r1, r1, #8
    2734:	d065      	beq.n	2802 <__udivsi3+0xfe>
    2736:	0b03      	lsrs	r3, r0, #12
    2738:	428b      	cmp	r3, r1
    273a:	d319      	bcc.n	2770 <__udivsi3+0x6c>
    273c:	e000      	b.n	2740 <__udivsi3+0x3c>
    273e:	0a09      	lsrs	r1, r1, #8
    2740:	0bc3      	lsrs	r3, r0, #15
    2742:	428b      	cmp	r3, r1
    2744:	d301      	bcc.n	274a <__udivsi3+0x46>
    2746:	03cb      	lsls	r3, r1, #15
    2748:	1ac0      	subs	r0, r0, r3
    274a:	4152      	adcs	r2, r2
    274c:	0b83      	lsrs	r3, r0, #14
    274e:	428b      	cmp	r3, r1
    2750:	d301      	bcc.n	2756 <__udivsi3+0x52>
    2752:	038b      	lsls	r3, r1, #14
    2754:	1ac0      	subs	r0, r0, r3
    2756:	4152      	adcs	r2, r2
    2758:	0b43      	lsrs	r3, r0, #13
    275a:	428b      	cmp	r3, r1
    275c:	d301      	bcc.n	2762 <__udivsi3+0x5e>
    275e:	034b      	lsls	r3, r1, #13
    2760:	1ac0      	subs	r0, r0, r3
    2762:	4152      	adcs	r2, r2
    2764:	0b03      	lsrs	r3, r0, #12
    2766:	428b      	cmp	r3, r1
    2768:	d301      	bcc.n	276e <__udivsi3+0x6a>
    276a:	030b      	lsls	r3, r1, #12
    276c:	1ac0      	subs	r0, r0, r3
    276e:	4152      	adcs	r2, r2
    2770:	0ac3      	lsrs	r3, r0, #11
    2772:	428b      	cmp	r3, r1
    2774:	d301      	bcc.n	277a <__udivsi3+0x76>
    2776:	02cb      	lsls	r3, r1, #11
    2778:	1ac0      	subs	r0, r0, r3
    277a:	4152      	adcs	r2, r2
    277c:	0a83      	lsrs	r3, r0, #10
    277e:	428b      	cmp	r3, r1
    2780:	d301      	bcc.n	2786 <__udivsi3+0x82>
    2782:	028b      	lsls	r3, r1, #10
    2784:	1ac0      	subs	r0, r0, r3
    2786:	4152      	adcs	r2, r2
    2788:	0a43      	lsrs	r3, r0, #9
    278a:	428b      	cmp	r3, r1
    278c:	d301      	bcc.n	2792 <__udivsi3+0x8e>
    278e:	024b      	lsls	r3, r1, #9
    2790:	1ac0      	subs	r0, r0, r3
    2792:	4152      	adcs	r2, r2
    2794:	0a03      	lsrs	r3, r0, #8
    2796:	428b      	cmp	r3, r1
    2798:	d301      	bcc.n	279e <__udivsi3+0x9a>
    279a:	020b      	lsls	r3, r1, #8
    279c:	1ac0      	subs	r0, r0, r3
    279e:	4152      	adcs	r2, r2
    27a0:	d2cd      	bcs.n	273e <__udivsi3+0x3a>
    27a2:	09c3      	lsrs	r3, r0, #7
    27a4:	428b      	cmp	r3, r1
    27a6:	d301      	bcc.n	27ac <__udivsi3+0xa8>
    27a8:	01cb      	lsls	r3, r1, #7
    27aa:	1ac0      	subs	r0, r0, r3
    27ac:	4152      	adcs	r2, r2
    27ae:	0983      	lsrs	r3, r0, #6
    27b0:	428b      	cmp	r3, r1
    27b2:	d301      	bcc.n	27b8 <__udivsi3+0xb4>
    27b4:	018b      	lsls	r3, r1, #6
    27b6:	1ac0      	subs	r0, r0, r3
    27b8:	4152      	adcs	r2, r2
    27ba:	0943      	lsrs	r3, r0, #5
    27bc:	428b      	cmp	r3, r1
    27be:	d301      	bcc.n	27c4 <__udivsi3+0xc0>
    27c0:	014b      	lsls	r3, r1, #5
    27c2:	1ac0      	subs	r0, r0, r3
    27c4:	4152      	adcs	r2, r2
    27c6:	0903      	lsrs	r3, r0, #4
    27c8:	428b      	cmp	r3, r1
    27ca:	d301      	bcc.n	27d0 <__udivsi3+0xcc>
    27cc:	010b      	lsls	r3, r1, #4
    27ce:	1ac0      	subs	r0, r0, r3
    27d0:	4152      	adcs	r2, r2
    27d2:	08c3      	lsrs	r3, r0, #3
    27d4:	428b      	cmp	r3, r1
    27d6:	d301      	bcc.n	27dc <__udivsi3+0xd8>
    27d8:	00cb      	lsls	r3, r1, #3
    27da:	1ac0      	subs	r0, r0, r3
    27dc:	4152      	adcs	r2, r2
    27de:	0883      	lsrs	r3, r0, #2
    27e0:	428b      	cmp	r3, r1
    27e2:	d301      	bcc.n	27e8 <__udivsi3+0xe4>
    27e4:	008b      	lsls	r3, r1, #2
    27e6:	1ac0      	subs	r0, r0, r3
    27e8:	4152      	adcs	r2, r2
    27ea:	0843      	lsrs	r3, r0, #1
    27ec:	428b      	cmp	r3, r1
    27ee:	d301      	bcc.n	27f4 <__udivsi3+0xf0>
    27f0:	004b      	lsls	r3, r1, #1
    27f2:	1ac0      	subs	r0, r0, r3
    27f4:	4152      	adcs	r2, r2
    27f6:	1a41      	subs	r1, r0, r1
    27f8:	d200      	bcs.n	27fc <__udivsi3+0xf8>
    27fa:	4601      	mov	r1, r0
    27fc:	4152      	adcs	r2, r2
    27fe:	4610      	mov	r0, r2
    2800:	4770      	bx	lr
    2802:	e7ff      	b.n	2804 <__udivsi3+0x100>
    2804:	b501      	push	{r0, lr}
    2806:	2000      	movs	r0, #0
    2808:	f000 f806 	bl	2818 <__aeabi_idiv0>
    280c:	bd02      	pop	{r1, pc}
    280e:	46c0      	nop			; (mov r8, r8)

00002810 <__aeabi_uidivmod>:
    2810:	2900      	cmp	r1, #0
    2812:	d0f7      	beq.n	2804 <__udivsi3+0x100>
    2814:	e776      	b.n	2704 <__udivsi3>
    2816:	4770      	bx	lr

00002818 <__aeabi_idiv0>:
    2818:	4770      	bx	lr
    281a:	46c0      	nop			; (mov r8, r8)

0000281c <__aeabi_lmul>:
    281c:	b5f0      	push	{r4, r5, r6, r7, lr}
    281e:	46ce      	mov	lr, r9
    2820:	4647      	mov	r7, r8
    2822:	0415      	lsls	r5, r2, #16
    2824:	0c2d      	lsrs	r5, r5, #16
    2826:	002e      	movs	r6, r5
    2828:	b580      	push	{r7, lr}
    282a:	0407      	lsls	r7, r0, #16
    282c:	0c14      	lsrs	r4, r2, #16
    282e:	0c3f      	lsrs	r7, r7, #16
    2830:	4699      	mov	r9, r3
    2832:	0c03      	lsrs	r3, r0, #16
    2834:	437e      	muls	r6, r7
    2836:	435d      	muls	r5, r3
    2838:	4367      	muls	r7, r4
    283a:	4363      	muls	r3, r4
    283c:	197f      	adds	r7, r7, r5
    283e:	0c34      	lsrs	r4, r6, #16
    2840:	19e4      	adds	r4, r4, r7
    2842:	469c      	mov	ip, r3
    2844:	42a5      	cmp	r5, r4
    2846:	d903      	bls.n	2850 <__aeabi_lmul+0x34>
    2848:	2380      	movs	r3, #128	; 0x80
    284a:	025b      	lsls	r3, r3, #9
    284c:	4698      	mov	r8, r3
    284e:	44c4      	add	ip, r8
    2850:	464b      	mov	r3, r9
    2852:	4351      	muls	r1, r2
    2854:	4343      	muls	r3, r0
    2856:	0436      	lsls	r6, r6, #16
    2858:	0c36      	lsrs	r6, r6, #16
    285a:	0c25      	lsrs	r5, r4, #16
    285c:	0424      	lsls	r4, r4, #16
    285e:	4465      	add	r5, ip
    2860:	19a4      	adds	r4, r4, r6
    2862:	1859      	adds	r1, r3, r1
    2864:	1949      	adds	r1, r1, r5
    2866:	0020      	movs	r0, r4
    2868:	bc0c      	pop	{r2, r3}
    286a:	4690      	mov	r8, r2
    286c:	4699      	mov	r9, r3
    286e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002870 <__aeabi_dadd>:
    2870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2872:	4645      	mov	r5, r8
    2874:	46de      	mov	lr, fp
    2876:	4657      	mov	r7, sl
    2878:	464e      	mov	r6, r9
    287a:	030c      	lsls	r4, r1, #12
    287c:	b5e0      	push	{r5, r6, r7, lr}
    287e:	004e      	lsls	r6, r1, #1
    2880:	0fc9      	lsrs	r1, r1, #31
    2882:	4688      	mov	r8, r1
    2884:	000d      	movs	r5, r1
    2886:	0a61      	lsrs	r1, r4, #9
    2888:	0f44      	lsrs	r4, r0, #29
    288a:	430c      	orrs	r4, r1
    288c:	00c7      	lsls	r7, r0, #3
    288e:	0319      	lsls	r1, r3, #12
    2890:	0058      	lsls	r0, r3, #1
    2892:	0fdb      	lsrs	r3, r3, #31
    2894:	469b      	mov	fp, r3
    2896:	0a4b      	lsrs	r3, r1, #9
    2898:	0f51      	lsrs	r1, r2, #29
    289a:	430b      	orrs	r3, r1
    289c:	0d76      	lsrs	r6, r6, #21
    289e:	0d40      	lsrs	r0, r0, #21
    28a0:	0019      	movs	r1, r3
    28a2:	00d2      	lsls	r2, r2, #3
    28a4:	45d8      	cmp	r8, fp
    28a6:	d100      	bne.n	28aa <__aeabi_dadd+0x3a>
    28a8:	e0ae      	b.n	2a08 <__aeabi_dadd+0x198>
    28aa:	1a35      	subs	r5, r6, r0
    28ac:	2d00      	cmp	r5, #0
    28ae:	dc00      	bgt.n	28b2 <__aeabi_dadd+0x42>
    28b0:	e0f6      	b.n	2aa0 <__aeabi_dadd+0x230>
    28b2:	2800      	cmp	r0, #0
    28b4:	d10f      	bne.n	28d6 <__aeabi_dadd+0x66>
    28b6:	4313      	orrs	r3, r2
    28b8:	d100      	bne.n	28bc <__aeabi_dadd+0x4c>
    28ba:	e0db      	b.n	2a74 <__aeabi_dadd+0x204>
    28bc:	1e6b      	subs	r3, r5, #1
    28be:	2b00      	cmp	r3, #0
    28c0:	d000      	beq.n	28c4 <__aeabi_dadd+0x54>
    28c2:	e137      	b.n	2b34 <__aeabi_dadd+0x2c4>
    28c4:	1aba      	subs	r2, r7, r2
    28c6:	4297      	cmp	r7, r2
    28c8:	41bf      	sbcs	r7, r7
    28ca:	1a64      	subs	r4, r4, r1
    28cc:	427f      	negs	r7, r7
    28ce:	1be4      	subs	r4, r4, r7
    28d0:	2601      	movs	r6, #1
    28d2:	0017      	movs	r7, r2
    28d4:	e024      	b.n	2920 <__aeabi_dadd+0xb0>
    28d6:	4bc6      	ldr	r3, [pc, #792]	; (2bf0 <__aeabi_dadd+0x380>)
    28d8:	429e      	cmp	r6, r3
    28da:	d04d      	beq.n	2978 <__aeabi_dadd+0x108>
    28dc:	2380      	movs	r3, #128	; 0x80
    28de:	041b      	lsls	r3, r3, #16
    28e0:	4319      	orrs	r1, r3
    28e2:	2d38      	cmp	r5, #56	; 0x38
    28e4:	dd00      	ble.n	28e8 <__aeabi_dadd+0x78>
    28e6:	e107      	b.n	2af8 <__aeabi_dadd+0x288>
    28e8:	2d1f      	cmp	r5, #31
    28ea:	dd00      	ble.n	28ee <__aeabi_dadd+0x7e>
    28ec:	e138      	b.n	2b60 <__aeabi_dadd+0x2f0>
    28ee:	2020      	movs	r0, #32
    28f0:	1b43      	subs	r3, r0, r5
    28f2:	469a      	mov	sl, r3
    28f4:	000b      	movs	r3, r1
    28f6:	4650      	mov	r0, sl
    28f8:	4083      	lsls	r3, r0
    28fa:	4699      	mov	r9, r3
    28fc:	0013      	movs	r3, r2
    28fe:	4648      	mov	r0, r9
    2900:	40eb      	lsrs	r3, r5
    2902:	4318      	orrs	r0, r3
    2904:	0003      	movs	r3, r0
    2906:	4650      	mov	r0, sl
    2908:	4082      	lsls	r2, r0
    290a:	1e50      	subs	r0, r2, #1
    290c:	4182      	sbcs	r2, r0
    290e:	40e9      	lsrs	r1, r5
    2910:	431a      	orrs	r2, r3
    2912:	1aba      	subs	r2, r7, r2
    2914:	1a61      	subs	r1, r4, r1
    2916:	4297      	cmp	r7, r2
    2918:	41a4      	sbcs	r4, r4
    291a:	0017      	movs	r7, r2
    291c:	4264      	negs	r4, r4
    291e:	1b0c      	subs	r4, r1, r4
    2920:	0223      	lsls	r3, r4, #8
    2922:	d562      	bpl.n	29ea <__aeabi_dadd+0x17a>
    2924:	0264      	lsls	r4, r4, #9
    2926:	0a65      	lsrs	r5, r4, #9
    2928:	2d00      	cmp	r5, #0
    292a:	d100      	bne.n	292e <__aeabi_dadd+0xbe>
    292c:	e0df      	b.n	2aee <__aeabi_dadd+0x27e>
    292e:	0028      	movs	r0, r5
    2930:	f001 fbe4 	bl	40fc <__clzsi2>
    2934:	0003      	movs	r3, r0
    2936:	3b08      	subs	r3, #8
    2938:	2b1f      	cmp	r3, #31
    293a:	dd00      	ble.n	293e <__aeabi_dadd+0xce>
    293c:	e0d2      	b.n	2ae4 <__aeabi_dadd+0x274>
    293e:	2220      	movs	r2, #32
    2940:	003c      	movs	r4, r7
    2942:	1ad2      	subs	r2, r2, r3
    2944:	409d      	lsls	r5, r3
    2946:	40d4      	lsrs	r4, r2
    2948:	409f      	lsls	r7, r3
    294a:	4325      	orrs	r5, r4
    294c:	429e      	cmp	r6, r3
    294e:	dd00      	ble.n	2952 <__aeabi_dadd+0xe2>
    2950:	e0c4      	b.n	2adc <__aeabi_dadd+0x26c>
    2952:	1b9e      	subs	r6, r3, r6
    2954:	1c73      	adds	r3, r6, #1
    2956:	2b1f      	cmp	r3, #31
    2958:	dd00      	ble.n	295c <__aeabi_dadd+0xec>
    295a:	e0f1      	b.n	2b40 <__aeabi_dadd+0x2d0>
    295c:	2220      	movs	r2, #32
    295e:	0038      	movs	r0, r7
    2960:	0029      	movs	r1, r5
    2962:	1ad2      	subs	r2, r2, r3
    2964:	40d8      	lsrs	r0, r3
    2966:	4091      	lsls	r1, r2
    2968:	4097      	lsls	r7, r2
    296a:	002c      	movs	r4, r5
    296c:	4301      	orrs	r1, r0
    296e:	1e78      	subs	r0, r7, #1
    2970:	4187      	sbcs	r7, r0
    2972:	40dc      	lsrs	r4, r3
    2974:	2600      	movs	r6, #0
    2976:	430f      	orrs	r7, r1
    2978:	077b      	lsls	r3, r7, #29
    297a:	d009      	beq.n	2990 <__aeabi_dadd+0x120>
    297c:	230f      	movs	r3, #15
    297e:	403b      	ands	r3, r7
    2980:	2b04      	cmp	r3, #4
    2982:	d005      	beq.n	2990 <__aeabi_dadd+0x120>
    2984:	1d3b      	adds	r3, r7, #4
    2986:	42bb      	cmp	r3, r7
    2988:	41bf      	sbcs	r7, r7
    298a:	427f      	negs	r7, r7
    298c:	19e4      	adds	r4, r4, r7
    298e:	001f      	movs	r7, r3
    2990:	0223      	lsls	r3, r4, #8
    2992:	d52c      	bpl.n	29ee <__aeabi_dadd+0x17e>
    2994:	4b96      	ldr	r3, [pc, #600]	; (2bf0 <__aeabi_dadd+0x380>)
    2996:	3601      	adds	r6, #1
    2998:	429e      	cmp	r6, r3
    299a:	d100      	bne.n	299e <__aeabi_dadd+0x12e>
    299c:	e09a      	b.n	2ad4 <__aeabi_dadd+0x264>
    299e:	4645      	mov	r5, r8
    29a0:	4b94      	ldr	r3, [pc, #592]	; (2bf4 <__aeabi_dadd+0x384>)
    29a2:	08ff      	lsrs	r7, r7, #3
    29a4:	401c      	ands	r4, r3
    29a6:	0760      	lsls	r0, r4, #29
    29a8:	0576      	lsls	r6, r6, #21
    29aa:	0264      	lsls	r4, r4, #9
    29ac:	4307      	orrs	r7, r0
    29ae:	0b24      	lsrs	r4, r4, #12
    29b0:	0d76      	lsrs	r6, r6, #21
    29b2:	2100      	movs	r1, #0
    29b4:	0324      	lsls	r4, r4, #12
    29b6:	0b23      	lsrs	r3, r4, #12
    29b8:	0d0c      	lsrs	r4, r1, #20
    29ba:	4a8f      	ldr	r2, [pc, #572]	; (2bf8 <__aeabi_dadd+0x388>)
    29bc:	0524      	lsls	r4, r4, #20
    29be:	431c      	orrs	r4, r3
    29c0:	4014      	ands	r4, r2
    29c2:	0533      	lsls	r3, r6, #20
    29c4:	4323      	orrs	r3, r4
    29c6:	005b      	lsls	r3, r3, #1
    29c8:	07ed      	lsls	r5, r5, #31
    29ca:	085b      	lsrs	r3, r3, #1
    29cc:	432b      	orrs	r3, r5
    29ce:	0038      	movs	r0, r7
    29d0:	0019      	movs	r1, r3
    29d2:	bc3c      	pop	{r2, r3, r4, r5}
    29d4:	4690      	mov	r8, r2
    29d6:	4699      	mov	r9, r3
    29d8:	46a2      	mov	sl, r4
    29da:	46ab      	mov	fp, r5
    29dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29de:	4664      	mov	r4, ip
    29e0:	4304      	orrs	r4, r0
    29e2:	d100      	bne.n	29e6 <__aeabi_dadd+0x176>
    29e4:	e211      	b.n	2e0a <__aeabi_dadd+0x59a>
    29e6:	0004      	movs	r4, r0
    29e8:	4667      	mov	r7, ip
    29ea:	077b      	lsls	r3, r7, #29
    29ec:	d1c6      	bne.n	297c <__aeabi_dadd+0x10c>
    29ee:	4645      	mov	r5, r8
    29f0:	0760      	lsls	r0, r4, #29
    29f2:	08ff      	lsrs	r7, r7, #3
    29f4:	4307      	orrs	r7, r0
    29f6:	08e4      	lsrs	r4, r4, #3
    29f8:	4b7d      	ldr	r3, [pc, #500]	; (2bf0 <__aeabi_dadd+0x380>)
    29fa:	429e      	cmp	r6, r3
    29fc:	d030      	beq.n	2a60 <__aeabi_dadd+0x1f0>
    29fe:	0324      	lsls	r4, r4, #12
    2a00:	0576      	lsls	r6, r6, #21
    2a02:	0b24      	lsrs	r4, r4, #12
    2a04:	0d76      	lsrs	r6, r6, #21
    2a06:	e7d4      	b.n	29b2 <__aeabi_dadd+0x142>
    2a08:	1a33      	subs	r3, r6, r0
    2a0a:	469a      	mov	sl, r3
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	dd78      	ble.n	2b02 <__aeabi_dadd+0x292>
    2a10:	2800      	cmp	r0, #0
    2a12:	d031      	beq.n	2a78 <__aeabi_dadd+0x208>
    2a14:	4876      	ldr	r0, [pc, #472]	; (2bf0 <__aeabi_dadd+0x380>)
    2a16:	4286      	cmp	r6, r0
    2a18:	d0ae      	beq.n	2978 <__aeabi_dadd+0x108>
    2a1a:	2080      	movs	r0, #128	; 0x80
    2a1c:	0400      	lsls	r0, r0, #16
    2a1e:	4301      	orrs	r1, r0
    2a20:	4653      	mov	r3, sl
    2a22:	2b38      	cmp	r3, #56	; 0x38
    2a24:	dc00      	bgt.n	2a28 <__aeabi_dadd+0x1b8>
    2a26:	e0e9      	b.n	2bfc <__aeabi_dadd+0x38c>
    2a28:	430a      	orrs	r2, r1
    2a2a:	1e51      	subs	r1, r2, #1
    2a2c:	418a      	sbcs	r2, r1
    2a2e:	2100      	movs	r1, #0
    2a30:	19d2      	adds	r2, r2, r7
    2a32:	42ba      	cmp	r2, r7
    2a34:	41bf      	sbcs	r7, r7
    2a36:	1909      	adds	r1, r1, r4
    2a38:	427c      	negs	r4, r7
    2a3a:	0017      	movs	r7, r2
    2a3c:	190c      	adds	r4, r1, r4
    2a3e:	0223      	lsls	r3, r4, #8
    2a40:	d5d3      	bpl.n	29ea <__aeabi_dadd+0x17a>
    2a42:	4b6b      	ldr	r3, [pc, #428]	; (2bf0 <__aeabi_dadd+0x380>)
    2a44:	3601      	adds	r6, #1
    2a46:	429e      	cmp	r6, r3
    2a48:	d100      	bne.n	2a4c <__aeabi_dadd+0x1dc>
    2a4a:	e13a      	b.n	2cc2 <__aeabi_dadd+0x452>
    2a4c:	2001      	movs	r0, #1
    2a4e:	4b69      	ldr	r3, [pc, #420]	; (2bf4 <__aeabi_dadd+0x384>)
    2a50:	401c      	ands	r4, r3
    2a52:	087b      	lsrs	r3, r7, #1
    2a54:	4007      	ands	r7, r0
    2a56:	431f      	orrs	r7, r3
    2a58:	07e0      	lsls	r0, r4, #31
    2a5a:	4307      	orrs	r7, r0
    2a5c:	0864      	lsrs	r4, r4, #1
    2a5e:	e78b      	b.n	2978 <__aeabi_dadd+0x108>
    2a60:	0023      	movs	r3, r4
    2a62:	433b      	orrs	r3, r7
    2a64:	d100      	bne.n	2a68 <__aeabi_dadd+0x1f8>
    2a66:	e1cb      	b.n	2e00 <__aeabi_dadd+0x590>
    2a68:	2280      	movs	r2, #128	; 0x80
    2a6a:	0312      	lsls	r2, r2, #12
    2a6c:	4314      	orrs	r4, r2
    2a6e:	0324      	lsls	r4, r4, #12
    2a70:	0b24      	lsrs	r4, r4, #12
    2a72:	e79e      	b.n	29b2 <__aeabi_dadd+0x142>
    2a74:	002e      	movs	r6, r5
    2a76:	e77f      	b.n	2978 <__aeabi_dadd+0x108>
    2a78:	0008      	movs	r0, r1
    2a7a:	4310      	orrs	r0, r2
    2a7c:	d100      	bne.n	2a80 <__aeabi_dadd+0x210>
    2a7e:	e0b4      	b.n	2bea <__aeabi_dadd+0x37a>
    2a80:	1e58      	subs	r0, r3, #1
    2a82:	2800      	cmp	r0, #0
    2a84:	d000      	beq.n	2a88 <__aeabi_dadd+0x218>
    2a86:	e0de      	b.n	2c46 <__aeabi_dadd+0x3d6>
    2a88:	18ba      	adds	r2, r7, r2
    2a8a:	42ba      	cmp	r2, r7
    2a8c:	419b      	sbcs	r3, r3
    2a8e:	1864      	adds	r4, r4, r1
    2a90:	425b      	negs	r3, r3
    2a92:	18e4      	adds	r4, r4, r3
    2a94:	0017      	movs	r7, r2
    2a96:	2601      	movs	r6, #1
    2a98:	0223      	lsls	r3, r4, #8
    2a9a:	d5a6      	bpl.n	29ea <__aeabi_dadd+0x17a>
    2a9c:	2602      	movs	r6, #2
    2a9e:	e7d5      	b.n	2a4c <__aeabi_dadd+0x1dc>
    2aa0:	2d00      	cmp	r5, #0
    2aa2:	d16e      	bne.n	2b82 <__aeabi_dadd+0x312>
    2aa4:	1c70      	adds	r0, r6, #1
    2aa6:	0540      	lsls	r0, r0, #21
    2aa8:	0d40      	lsrs	r0, r0, #21
    2aaa:	2801      	cmp	r0, #1
    2aac:	dc00      	bgt.n	2ab0 <__aeabi_dadd+0x240>
    2aae:	e0f9      	b.n	2ca4 <__aeabi_dadd+0x434>
    2ab0:	1ab8      	subs	r0, r7, r2
    2ab2:	4684      	mov	ip, r0
    2ab4:	4287      	cmp	r7, r0
    2ab6:	4180      	sbcs	r0, r0
    2ab8:	1ae5      	subs	r5, r4, r3
    2aba:	4240      	negs	r0, r0
    2abc:	1a2d      	subs	r5, r5, r0
    2abe:	0228      	lsls	r0, r5, #8
    2ac0:	d400      	bmi.n	2ac4 <__aeabi_dadd+0x254>
    2ac2:	e089      	b.n	2bd8 <__aeabi_dadd+0x368>
    2ac4:	1bd7      	subs	r7, r2, r7
    2ac6:	42ba      	cmp	r2, r7
    2ac8:	4192      	sbcs	r2, r2
    2aca:	1b1c      	subs	r4, r3, r4
    2acc:	4252      	negs	r2, r2
    2ace:	1aa5      	subs	r5, r4, r2
    2ad0:	46d8      	mov	r8, fp
    2ad2:	e729      	b.n	2928 <__aeabi_dadd+0xb8>
    2ad4:	4645      	mov	r5, r8
    2ad6:	2400      	movs	r4, #0
    2ad8:	2700      	movs	r7, #0
    2ada:	e76a      	b.n	29b2 <__aeabi_dadd+0x142>
    2adc:	4c45      	ldr	r4, [pc, #276]	; (2bf4 <__aeabi_dadd+0x384>)
    2ade:	1af6      	subs	r6, r6, r3
    2ae0:	402c      	ands	r4, r5
    2ae2:	e749      	b.n	2978 <__aeabi_dadd+0x108>
    2ae4:	003d      	movs	r5, r7
    2ae6:	3828      	subs	r0, #40	; 0x28
    2ae8:	4085      	lsls	r5, r0
    2aea:	2700      	movs	r7, #0
    2aec:	e72e      	b.n	294c <__aeabi_dadd+0xdc>
    2aee:	0038      	movs	r0, r7
    2af0:	f001 fb04 	bl	40fc <__clzsi2>
    2af4:	3020      	adds	r0, #32
    2af6:	e71d      	b.n	2934 <__aeabi_dadd+0xc4>
    2af8:	430a      	orrs	r2, r1
    2afa:	1e51      	subs	r1, r2, #1
    2afc:	418a      	sbcs	r2, r1
    2afe:	2100      	movs	r1, #0
    2b00:	e707      	b.n	2912 <__aeabi_dadd+0xa2>
    2b02:	2b00      	cmp	r3, #0
    2b04:	d000      	beq.n	2b08 <__aeabi_dadd+0x298>
    2b06:	e0f3      	b.n	2cf0 <__aeabi_dadd+0x480>
    2b08:	1c70      	adds	r0, r6, #1
    2b0a:	0543      	lsls	r3, r0, #21
    2b0c:	0d5b      	lsrs	r3, r3, #21
    2b0e:	2b01      	cmp	r3, #1
    2b10:	dc00      	bgt.n	2b14 <__aeabi_dadd+0x2a4>
    2b12:	e0ad      	b.n	2c70 <__aeabi_dadd+0x400>
    2b14:	4b36      	ldr	r3, [pc, #216]	; (2bf0 <__aeabi_dadd+0x380>)
    2b16:	4298      	cmp	r0, r3
    2b18:	d100      	bne.n	2b1c <__aeabi_dadd+0x2ac>
    2b1a:	e0d1      	b.n	2cc0 <__aeabi_dadd+0x450>
    2b1c:	18ba      	adds	r2, r7, r2
    2b1e:	42ba      	cmp	r2, r7
    2b20:	41bf      	sbcs	r7, r7
    2b22:	1864      	adds	r4, r4, r1
    2b24:	427f      	negs	r7, r7
    2b26:	19e4      	adds	r4, r4, r7
    2b28:	07e7      	lsls	r7, r4, #31
    2b2a:	0852      	lsrs	r2, r2, #1
    2b2c:	4317      	orrs	r7, r2
    2b2e:	0864      	lsrs	r4, r4, #1
    2b30:	0006      	movs	r6, r0
    2b32:	e721      	b.n	2978 <__aeabi_dadd+0x108>
    2b34:	482e      	ldr	r0, [pc, #184]	; (2bf0 <__aeabi_dadd+0x380>)
    2b36:	4285      	cmp	r5, r0
    2b38:	d100      	bne.n	2b3c <__aeabi_dadd+0x2cc>
    2b3a:	e093      	b.n	2c64 <__aeabi_dadd+0x3f4>
    2b3c:	001d      	movs	r5, r3
    2b3e:	e6d0      	b.n	28e2 <__aeabi_dadd+0x72>
    2b40:	0029      	movs	r1, r5
    2b42:	3e1f      	subs	r6, #31
    2b44:	40f1      	lsrs	r1, r6
    2b46:	2b20      	cmp	r3, #32
    2b48:	d100      	bne.n	2b4c <__aeabi_dadd+0x2dc>
    2b4a:	e08d      	b.n	2c68 <__aeabi_dadd+0x3f8>
    2b4c:	2240      	movs	r2, #64	; 0x40
    2b4e:	1ad3      	subs	r3, r2, r3
    2b50:	409d      	lsls	r5, r3
    2b52:	432f      	orrs	r7, r5
    2b54:	1e7d      	subs	r5, r7, #1
    2b56:	41af      	sbcs	r7, r5
    2b58:	2400      	movs	r4, #0
    2b5a:	430f      	orrs	r7, r1
    2b5c:	2600      	movs	r6, #0
    2b5e:	e744      	b.n	29ea <__aeabi_dadd+0x17a>
    2b60:	002b      	movs	r3, r5
    2b62:	0008      	movs	r0, r1
    2b64:	3b20      	subs	r3, #32
    2b66:	40d8      	lsrs	r0, r3
    2b68:	0003      	movs	r3, r0
    2b6a:	2d20      	cmp	r5, #32
    2b6c:	d100      	bne.n	2b70 <__aeabi_dadd+0x300>
    2b6e:	e07d      	b.n	2c6c <__aeabi_dadd+0x3fc>
    2b70:	2040      	movs	r0, #64	; 0x40
    2b72:	1b45      	subs	r5, r0, r5
    2b74:	40a9      	lsls	r1, r5
    2b76:	430a      	orrs	r2, r1
    2b78:	1e51      	subs	r1, r2, #1
    2b7a:	418a      	sbcs	r2, r1
    2b7c:	2100      	movs	r1, #0
    2b7e:	431a      	orrs	r2, r3
    2b80:	e6c7      	b.n	2912 <__aeabi_dadd+0xa2>
    2b82:	2e00      	cmp	r6, #0
    2b84:	d050      	beq.n	2c28 <__aeabi_dadd+0x3b8>
    2b86:	4e1a      	ldr	r6, [pc, #104]	; (2bf0 <__aeabi_dadd+0x380>)
    2b88:	42b0      	cmp	r0, r6
    2b8a:	d057      	beq.n	2c3c <__aeabi_dadd+0x3cc>
    2b8c:	2680      	movs	r6, #128	; 0x80
    2b8e:	426b      	negs	r3, r5
    2b90:	4699      	mov	r9, r3
    2b92:	0436      	lsls	r6, r6, #16
    2b94:	4334      	orrs	r4, r6
    2b96:	464b      	mov	r3, r9
    2b98:	2b38      	cmp	r3, #56	; 0x38
    2b9a:	dd00      	ble.n	2b9e <__aeabi_dadd+0x32e>
    2b9c:	e0d6      	b.n	2d4c <__aeabi_dadd+0x4dc>
    2b9e:	2b1f      	cmp	r3, #31
    2ba0:	dd00      	ble.n	2ba4 <__aeabi_dadd+0x334>
    2ba2:	e135      	b.n	2e10 <__aeabi_dadd+0x5a0>
    2ba4:	2620      	movs	r6, #32
    2ba6:	1af5      	subs	r5, r6, r3
    2ba8:	0026      	movs	r6, r4
    2baa:	40ae      	lsls	r6, r5
    2bac:	46b2      	mov	sl, r6
    2bae:	003e      	movs	r6, r7
    2bb0:	40de      	lsrs	r6, r3
    2bb2:	46ac      	mov	ip, r5
    2bb4:	0035      	movs	r5, r6
    2bb6:	4656      	mov	r6, sl
    2bb8:	432e      	orrs	r6, r5
    2bba:	4665      	mov	r5, ip
    2bbc:	40af      	lsls	r7, r5
    2bbe:	1e7d      	subs	r5, r7, #1
    2bc0:	41af      	sbcs	r7, r5
    2bc2:	40dc      	lsrs	r4, r3
    2bc4:	4337      	orrs	r7, r6
    2bc6:	1bd7      	subs	r7, r2, r7
    2bc8:	42ba      	cmp	r2, r7
    2bca:	4192      	sbcs	r2, r2
    2bcc:	1b0c      	subs	r4, r1, r4
    2bce:	4252      	negs	r2, r2
    2bd0:	1aa4      	subs	r4, r4, r2
    2bd2:	0006      	movs	r6, r0
    2bd4:	46d8      	mov	r8, fp
    2bd6:	e6a3      	b.n	2920 <__aeabi_dadd+0xb0>
    2bd8:	4664      	mov	r4, ip
    2bda:	4667      	mov	r7, ip
    2bdc:	432c      	orrs	r4, r5
    2bde:	d000      	beq.n	2be2 <__aeabi_dadd+0x372>
    2be0:	e6a2      	b.n	2928 <__aeabi_dadd+0xb8>
    2be2:	2500      	movs	r5, #0
    2be4:	2600      	movs	r6, #0
    2be6:	2700      	movs	r7, #0
    2be8:	e706      	b.n	29f8 <__aeabi_dadd+0x188>
    2bea:	001e      	movs	r6, r3
    2bec:	e6c4      	b.n	2978 <__aeabi_dadd+0x108>
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	000007ff 	.word	0x000007ff
    2bf4:	ff7fffff 	.word	0xff7fffff
    2bf8:	800fffff 	.word	0x800fffff
    2bfc:	2b1f      	cmp	r3, #31
    2bfe:	dc63      	bgt.n	2cc8 <__aeabi_dadd+0x458>
    2c00:	2020      	movs	r0, #32
    2c02:	1ac3      	subs	r3, r0, r3
    2c04:	0008      	movs	r0, r1
    2c06:	4098      	lsls	r0, r3
    2c08:	469c      	mov	ip, r3
    2c0a:	4683      	mov	fp, r0
    2c0c:	4653      	mov	r3, sl
    2c0e:	0010      	movs	r0, r2
    2c10:	40d8      	lsrs	r0, r3
    2c12:	0003      	movs	r3, r0
    2c14:	4658      	mov	r0, fp
    2c16:	4318      	orrs	r0, r3
    2c18:	4663      	mov	r3, ip
    2c1a:	409a      	lsls	r2, r3
    2c1c:	1e53      	subs	r3, r2, #1
    2c1e:	419a      	sbcs	r2, r3
    2c20:	4653      	mov	r3, sl
    2c22:	4302      	orrs	r2, r0
    2c24:	40d9      	lsrs	r1, r3
    2c26:	e703      	b.n	2a30 <__aeabi_dadd+0x1c0>
    2c28:	0026      	movs	r6, r4
    2c2a:	433e      	orrs	r6, r7
    2c2c:	d006      	beq.n	2c3c <__aeabi_dadd+0x3cc>
    2c2e:	43eb      	mvns	r3, r5
    2c30:	4699      	mov	r9, r3
    2c32:	2b00      	cmp	r3, #0
    2c34:	d0c7      	beq.n	2bc6 <__aeabi_dadd+0x356>
    2c36:	4e94      	ldr	r6, [pc, #592]	; (2e88 <__aeabi_dadd+0x618>)
    2c38:	42b0      	cmp	r0, r6
    2c3a:	d1ac      	bne.n	2b96 <__aeabi_dadd+0x326>
    2c3c:	000c      	movs	r4, r1
    2c3e:	0017      	movs	r7, r2
    2c40:	0006      	movs	r6, r0
    2c42:	46d8      	mov	r8, fp
    2c44:	e698      	b.n	2978 <__aeabi_dadd+0x108>
    2c46:	4b90      	ldr	r3, [pc, #576]	; (2e88 <__aeabi_dadd+0x618>)
    2c48:	459a      	cmp	sl, r3
    2c4a:	d00b      	beq.n	2c64 <__aeabi_dadd+0x3f4>
    2c4c:	4682      	mov	sl, r0
    2c4e:	e6e7      	b.n	2a20 <__aeabi_dadd+0x1b0>
    2c50:	2800      	cmp	r0, #0
    2c52:	d000      	beq.n	2c56 <__aeabi_dadd+0x3e6>
    2c54:	e09e      	b.n	2d94 <__aeabi_dadd+0x524>
    2c56:	0018      	movs	r0, r3
    2c58:	4310      	orrs	r0, r2
    2c5a:	d100      	bne.n	2c5e <__aeabi_dadd+0x3ee>
    2c5c:	e0e9      	b.n	2e32 <__aeabi_dadd+0x5c2>
    2c5e:	001c      	movs	r4, r3
    2c60:	0017      	movs	r7, r2
    2c62:	46d8      	mov	r8, fp
    2c64:	4e88      	ldr	r6, [pc, #544]	; (2e88 <__aeabi_dadd+0x618>)
    2c66:	e687      	b.n	2978 <__aeabi_dadd+0x108>
    2c68:	2500      	movs	r5, #0
    2c6a:	e772      	b.n	2b52 <__aeabi_dadd+0x2e2>
    2c6c:	2100      	movs	r1, #0
    2c6e:	e782      	b.n	2b76 <__aeabi_dadd+0x306>
    2c70:	0023      	movs	r3, r4
    2c72:	433b      	orrs	r3, r7
    2c74:	2e00      	cmp	r6, #0
    2c76:	d000      	beq.n	2c7a <__aeabi_dadd+0x40a>
    2c78:	e0ab      	b.n	2dd2 <__aeabi_dadd+0x562>
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d100      	bne.n	2c80 <__aeabi_dadd+0x410>
    2c7e:	e0e7      	b.n	2e50 <__aeabi_dadd+0x5e0>
    2c80:	000b      	movs	r3, r1
    2c82:	4313      	orrs	r3, r2
    2c84:	d100      	bne.n	2c88 <__aeabi_dadd+0x418>
    2c86:	e677      	b.n	2978 <__aeabi_dadd+0x108>
    2c88:	18ba      	adds	r2, r7, r2
    2c8a:	42ba      	cmp	r2, r7
    2c8c:	41bf      	sbcs	r7, r7
    2c8e:	1864      	adds	r4, r4, r1
    2c90:	427f      	negs	r7, r7
    2c92:	19e4      	adds	r4, r4, r7
    2c94:	0223      	lsls	r3, r4, #8
    2c96:	d400      	bmi.n	2c9a <__aeabi_dadd+0x42a>
    2c98:	e0f2      	b.n	2e80 <__aeabi_dadd+0x610>
    2c9a:	4b7c      	ldr	r3, [pc, #496]	; (2e8c <__aeabi_dadd+0x61c>)
    2c9c:	0017      	movs	r7, r2
    2c9e:	401c      	ands	r4, r3
    2ca0:	0006      	movs	r6, r0
    2ca2:	e669      	b.n	2978 <__aeabi_dadd+0x108>
    2ca4:	0020      	movs	r0, r4
    2ca6:	4338      	orrs	r0, r7
    2ca8:	2e00      	cmp	r6, #0
    2caa:	d1d1      	bne.n	2c50 <__aeabi_dadd+0x3e0>
    2cac:	2800      	cmp	r0, #0
    2cae:	d15b      	bne.n	2d68 <__aeabi_dadd+0x4f8>
    2cb0:	001c      	movs	r4, r3
    2cb2:	4314      	orrs	r4, r2
    2cb4:	d100      	bne.n	2cb8 <__aeabi_dadd+0x448>
    2cb6:	e0a8      	b.n	2e0a <__aeabi_dadd+0x59a>
    2cb8:	001c      	movs	r4, r3
    2cba:	0017      	movs	r7, r2
    2cbc:	46d8      	mov	r8, fp
    2cbe:	e65b      	b.n	2978 <__aeabi_dadd+0x108>
    2cc0:	0006      	movs	r6, r0
    2cc2:	2400      	movs	r4, #0
    2cc4:	2700      	movs	r7, #0
    2cc6:	e697      	b.n	29f8 <__aeabi_dadd+0x188>
    2cc8:	4650      	mov	r0, sl
    2cca:	000b      	movs	r3, r1
    2ccc:	3820      	subs	r0, #32
    2cce:	40c3      	lsrs	r3, r0
    2cd0:	4699      	mov	r9, r3
    2cd2:	4653      	mov	r3, sl
    2cd4:	2b20      	cmp	r3, #32
    2cd6:	d100      	bne.n	2cda <__aeabi_dadd+0x46a>
    2cd8:	e095      	b.n	2e06 <__aeabi_dadd+0x596>
    2cda:	2340      	movs	r3, #64	; 0x40
    2cdc:	4650      	mov	r0, sl
    2cde:	1a1b      	subs	r3, r3, r0
    2ce0:	4099      	lsls	r1, r3
    2ce2:	430a      	orrs	r2, r1
    2ce4:	1e51      	subs	r1, r2, #1
    2ce6:	418a      	sbcs	r2, r1
    2ce8:	464b      	mov	r3, r9
    2cea:	2100      	movs	r1, #0
    2cec:	431a      	orrs	r2, r3
    2cee:	e69f      	b.n	2a30 <__aeabi_dadd+0x1c0>
    2cf0:	2e00      	cmp	r6, #0
    2cf2:	d130      	bne.n	2d56 <__aeabi_dadd+0x4e6>
    2cf4:	0026      	movs	r6, r4
    2cf6:	433e      	orrs	r6, r7
    2cf8:	d067      	beq.n	2dca <__aeabi_dadd+0x55a>
    2cfa:	43db      	mvns	r3, r3
    2cfc:	469a      	mov	sl, r3
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d01c      	beq.n	2d3c <__aeabi_dadd+0x4cc>
    2d02:	4e61      	ldr	r6, [pc, #388]	; (2e88 <__aeabi_dadd+0x618>)
    2d04:	42b0      	cmp	r0, r6
    2d06:	d060      	beq.n	2dca <__aeabi_dadd+0x55a>
    2d08:	4653      	mov	r3, sl
    2d0a:	2b38      	cmp	r3, #56	; 0x38
    2d0c:	dd00      	ble.n	2d10 <__aeabi_dadd+0x4a0>
    2d0e:	e096      	b.n	2e3e <__aeabi_dadd+0x5ce>
    2d10:	2b1f      	cmp	r3, #31
    2d12:	dd00      	ble.n	2d16 <__aeabi_dadd+0x4a6>
    2d14:	e09f      	b.n	2e56 <__aeabi_dadd+0x5e6>
    2d16:	2620      	movs	r6, #32
    2d18:	1af3      	subs	r3, r6, r3
    2d1a:	0026      	movs	r6, r4
    2d1c:	409e      	lsls	r6, r3
    2d1e:	469c      	mov	ip, r3
    2d20:	46b3      	mov	fp, r6
    2d22:	4653      	mov	r3, sl
    2d24:	003e      	movs	r6, r7
    2d26:	40de      	lsrs	r6, r3
    2d28:	0033      	movs	r3, r6
    2d2a:	465e      	mov	r6, fp
    2d2c:	431e      	orrs	r6, r3
    2d2e:	4663      	mov	r3, ip
    2d30:	409f      	lsls	r7, r3
    2d32:	1e7b      	subs	r3, r7, #1
    2d34:	419f      	sbcs	r7, r3
    2d36:	4653      	mov	r3, sl
    2d38:	40dc      	lsrs	r4, r3
    2d3a:	4337      	orrs	r7, r6
    2d3c:	18bf      	adds	r7, r7, r2
    2d3e:	4297      	cmp	r7, r2
    2d40:	4192      	sbcs	r2, r2
    2d42:	1864      	adds	r4, r4, r1
    2d44:	4252      	negs	r2, r2
    2d46:	18a4      	adds	r4, r4, r2
    2d48:	0006      	movs	r6, r0
    2d4a:	e678      	b.n	2a3e <__aeabi_dadd+0x1ce>
    2d4c:	4327      	orrs	r7, r4
    2d4e:	1e7c      	subs	r4, r7, #1
    2d50:	41a7      	sbcs	r7, r4
    2d52:	2400      	movs	r4, #0
    2d54:	e737      	b.n	2bc6 <__aeabi_dadd+0x356>
    2d56:	4e4c      	ldr	r6, [pc, #304]	; (2e88 <__aeabi_dadd+0x618>)
    2d58:	42b0      	cmp	r0, r6
    2d5a:	d036      	beq.n	2dca <__aeabi_dadd+0x55a>
    2d5c:	2680      	movs	r6, #128	; 0x80
    2d5e:	425b      	negs	r3, r3
    2d60:	0436      	lsls	r6, r6, #16
    2d62:	469a      	mov	sl, r3
    2d64:	4334      	orrs	r4, r6
    2d66:	e7cf      	b.n	2d08 <__aeabi_dadd+0x498>
    2d68:	0018      	movs	r0, r3
    2d6a:	4310      	orrs	r0, r2
    2d6c:	d100      	bne.n	2d70 <__aeabi_dadd+0x500>
    2d6e:	e603      	b.n	2978 <__aeabi_dadd+0x108>
    2d70:	1ab8      	subs	r0, r7, r2
    2d72:	4684      	mov	ip, r0
    2d74:	4567      	cmp	r7, ip
    2d76:	41ad      	sbcs	r5, r5
    2d78:	1ae0      	subs	r0, r4, r3
    2d7a:	426d      	negs	r5, r5
    2d7c:	1b40      	subs	r0, r0, r5
    2d7e:	0205      	lsls	r5, r0, #8
    2d80:	d400      	bmi.n	2d84 <__aeabi_dadd+0x514>
    2d82:	e62c      	b.n	29de <__aeabi_dadd+0x16e>
    2d84:	1bd7      	subs	r7, r2, r7
    2d86:	42ba      	cmp	r2, r7
    2d88:	4192      	sbcs	r2, r2
    2d8a:	1b1c      	subs	r4, r3, r4
    2d8c:	4252      	negs	r2, r2
    2d8e:	1aa4      	subs	r4, r4, r2
    2d90:	46d8      	mov	r8, fp
    2d92:	e5f1      	b.n	2978 <__aeabi_dadd+0x108>
    2d94:	0018      	movs	r0, r3
    2d96:	4310      	orrs	r0, r2
    2d98:	d100      	bne.n	2d9c <__aeabi_dadd+0x52c>
    2d9a:	e763      	b.n	2c64 <__aeabi_dadd+0x3f4>
    2d9c:	08f8      	lsrs	r0, r7, #3
    2d9e:	0767      	lsls	r7, r4, #29
    2da0:	4307      	orrs	r7, r0
    2da2:	2080      	movs	r0, #128	; 0x80
    2da4:	08e4      	lsrs	r4, r4, #3
    2da6:	0300      	lsls	r0, r0, #12
    2da8:	4204      	tst	r4, r0
    2daa:	d008      	beq.n	2dbe <__aeabi_dadd+0x54e>
    2dac:	08dd      	lsrs	r5, r3, #3
    2dae:	4205      	tst	r5, r0
    2db0:	d105      	bne.n	2dbe <__aeabi_dadd+0x54e>
    2db2:	08d2      	lsrs	r2, r2, #3
    2db4:	0759      	lsls	r1, r3, #29
    2db6:	4311      	orrs	r1, r2
    2db8:	000f      	movs	r7, r1
    2dba:	002c      	movs	r4, r5
    2dbc:	46d8      	mov	r8, fp
    2dbe:	0f7b      	lsrs	r3, r7, #29
    2dc0:	00e4      	lsls	r4, r4, #3
    2dc2:	431c      	orrs	r4, r3
    2dc4:	00ff      	lsls	r7, r7, #3
    2dc6:	4e30      	ldr	r6, [pc, #192]	; (2e88 <__aeabi_dadd+0x618>)
    2dc8:	e5d6      	b.n	2978 <__aeabi_dadd+0x108>
    2dca:	000c      	movs	r4, r1
    2dcc:	0017      	movs	r7, r2
    2dce:	0006      	movs	r6, r0
    2dd0:	e5d2      	b.n	2978 <__aeabi_dadd+0x108>
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d038      	beq.n	2e48 <__aeabi_dadd+0x5d8>
    2dd6:	000b      	movs	r3, r1
    2dd8:	4313      	orrs	r3, r2
    2dda:	d100      	bne.n	2dde <__aeabi_dadd+0x56e>
    2ddc:	e742      	b.n	2c64 <__aeabi_dadd+0x3f4>
    2dde:	08f8      	lsrs	r0, r7, #3
    2de0:	0767      	lsls	r7, r4, #29
    2de2:	4307      	orrs	r7, r0
    2de4:	2080      	movs	r0, #128	; 0x80
    2de6:	08e4      	lsrs	r4, r4, #3
    2de8:	0300      	lsls	r0, r0, #12
    2dea:	4204      	tst	r4, r0
    2dec:	d0e7      	beq.n	2dbe <__aeabi_dadd+0x54e>
    2dee:	08cb      	lsrs	r3, r1, #3
    2df0:	4203      	tst	r3, r0
    2df2:	d1e4      	bne.n	2dbe <__aeabi_dadd+0x54e>
    2df4:	08d2      	lsrs	r2, r2, #3
    2df6:	0749      	lsls	r1, r1, #29
    2df8:	4311      	orrs	r1, r2
    2dfa:	000f      	movs	r7, r1
    2dfc:	001c      	movs	r4, r3
    2dfe:	e7de      	b.n	2dbe <__aeabi_dadd+0x54e>
    2e00:	2700      	movs	r7, #0
    2e02:	2400      	movs	r4, #0
    2e04:	e5d5      	b.n	29b2 <__aeabi_dadd+0x142>
    2e06:	2100      	movs	r1, #0
    2e08:	e76b      	b.n	2ce2 <__aeabi_dadd+0x472>
    2e0a:	2500      	movs	r5, #0
    2e0c:	2700      	movs	r7, #0
    2e0e:	e5f3      	b.n	29f8 <__aeabi_dadd+0x188>
    2e10:	464e      	mov	r6, r9
    2e12:	0025      	movs	r5, r4
    2e14:	3e20      	subs	r6, #32
    2e16:	40f5      	lsrs	r5, r6
    2e18:	464b      	mov	r3, r9
    2e1a:	002e      	movs	r6, r5
    2e1c:	2b20      	cmp	r3, #32
    2e1e:	d02d      	beq.n	2e7c <__aeabi_dadd+0x60c>
    2e20:	2540      	movs	r5, #64	; 0x40
    2e22:	1aed      	subs	r5, r5, r3
    2e24:	40ac      	lsls	r4, r5
    2e26:	4327      	orrs	r7, r4
    2e28:	1e7c      	subs	r4, r7, #1
    2e2a:	41a7      	sbcs	r7, r4
    2e2c:	2400      	movs	r4, #0
    2e2e:	4337      	orrs	r7, r6
    2e30:	e6c9      	b.n	2bc6 <__aeabi_dadd+0x356>
    2e32:	2480      	movs	r4, #128	; 0x80
    2e34:	2500      	movs	r5, #0
    2e36:	0324      	lsls	r4, r4, #12
    2e38:	4e13      	ldr	r6, [pc, #76]	; (2e88 <__aeabi_dadd+0x618>)
    2e3a:	2700      	movs	r7, #0
    2e3c:	e5dc      	b.n	29f8 <__aeabi_dadd+0x188>
    2e3e:	4327      	orrs	r7, r4
    2e40:	1e7c      	subs	r4, r7, #1
    2e42:	41a7      	sbcs	r7, r4
    2e44:	2400      	movs	r4, #0
    2e46:	e779      	b.n	2d3c <__aeabi_dadd+0x4cc>
    2e48:	000c      	movs	r4, r1
    2e4a:	0017      	movs	r7, r2
    2e4c:	4e0e      	ldr	r6, [pc, #56]	; (2e88 <__aeabi_dadd+0x618>)
    2e4e:	e593      	b.n	2978 <__aeabi_dadd+0x108>
    2e50:	000c      	movs	r4, r1
    2e52:	0017      	movs	r7, r2
    2e54:	e590      	b.n	2978 <__aeabi_dadd+0x108>
    2e56:	4656      	mov	r6, sl
    2e58:	0023      	movs	r3, r4
    2e5a:	3e20      	subs	r6, #32
    2e5c:	40f3      	lsrs	r3, r6
    2e5e:	4699      	mov	r9, r3
    2e60:	4653      	mov	r3, sl
    2e62:	2b20      	cmp	r3, #32
    2e64:	d00e      	beq.n	2e84 <__aeabi_dadd+0x614>
    2e66:	2340      	movs	r3, #64	; 0x40
    2e68:	4656      	mov	r6, sl
    2e6a:	1b9b      	subs	r3, r3, r6
    2e6c:	409c      	lsls	r4, r3
    2e6e:	4327      	orrs	r7, r4
    2e70:	1e7c      	subs	r4, r7, #1
    2e72:	41a7      	sbcs	r7, r4
    2e74:	464b      	mov	r3, r9
    2e76:	2400      	movs	r4, #0
    2e78:	431f      	orrs	r7, r3
    2e7a:	e75f      	b.n	2d3c <__aeabi_dadd+0x4cc>
    2e7c:	2400      	movs	r4, #0
    2e7e:	e7d2      	b.n	2e26 <__aeabi_dadd+0x5b6>
    2e80:	0017      	movs	r7, r2
    2e82:	e5b2      	b.n	29ea <__aeabi_dadd+0x17a>
    2e84:	2400      	movs	r4, #0
    2e86:	e7f2      	b.n	2e6e <__aeabi_dadd+0x5fe>
    2e88:	000007ff 	.word	0x000007ff
    2e8c:	ff7fffff 	.word	0xff7fffff

00002e90 <__aeabi_ddiv>:
    2e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e92:	4657      	mov	r7, sl
    2e94:	4645      	mov	r5, r8
    2e96:	46de      	mov	lr, fp
    2e98:	464e      	mov	r6, r9
    2e9a:	b5e0      	push	{r5, r6, r7, lr}
    2e9c:	004c      	lsls	r4, r1, #1
    2e9e:	030e      	lsls	r6, r1, #12
    2ea0:	b087      	sub	sp, #28
    2ea2:	4683      	mov	fp, r0
    2ea4:	4692      	mov	sl, r2
    2ea6:	001d      	movs	r5, r3
    2ea8:	4680      	mov	r8, r0
    2eaa:	0b36      	lsrs	r6, r6, #12
    2eac:	0d64      	lsrs	r4, r4, #21
    2eae:	0fcf      	lsrs	r7, r1, #31
    2eb0:	2c00      	cmp	r4, #0
    2eb2:	d04f      	beq.n	2f54 <__aeabi_ddiv+0xc4>
    2eb4:	4b6f      	ldr	r3, [pc, #444]	; (3074 <__aeabi_ddiv+0x1e4>)
    2eb6:	429c      	cmp	r4, r3
    2eb8:	d035      	beq.n	2f26 <__aeabi_ddiv+0x96>
    2eba:	2380      	movs	r3, #128	; 0x80
    2ebc:	0f42      	lsrs	r2, r0, #29
    2ebe:	041b      	lsls	r3, r3, #16
    2ec0:	00f6      	lsls	r6, r6, #3
    2ec2:	4313      	orrs	r3, r2
    2ec4:	4333      	orrs	r3, r6
    2ec6:	4699      	mov	r9, r3
    2ec8:	00c3      	lsls	r3, r0, #3
    2eca:	4698      	mov	r8, r3
    2ecc:	4b6a      	ldr	r3, [pc, #424]	; (3078 <__aeabi_ddiv+0x1e8>)
    2ece:	2600      	movs	r6, #0
    2ed0:	469c      	mov	ip, r3
    2ed2:	2300      	movs	r3, #0
    2ed4:	4464      	add	r4, ip
    2ed6:	9303      	str	r3, [sp, #12]
    2ed8:	032b      	lsls	r3, r5, #12
    2eda:	0b1b      	lsrs	r3, r3, #12
    2edc:	469b      	mov	fp, r3
    2ede:	006b      	lsls	r3, r5, #1
    2ee0:	0fed      	lsrs	r5, r5, #31
    2ee2:	4650      	mov	r0, sl
    2ee4:	0d5b      	lsrs	r3, r3, #21
    2ee6:	9501      	str	r5, [sp, #4]
    2ee8:	d05e      	beq.n	2fa8 <__aeabi_ddiv+0x118>
    2eea:	4a62      	ldr	r2, [pc, #392]	; (3074 <__aeabi_ddiv+0x1e4>)
    2eec:	4293      	cmp	r3, r2
    2eee:	d053      	beq.n	2f98 <__aeabi_ddiv+0x108>
    2ef0:	465a      	mov	r2, fp
    2ef2:	00d1      	lsls	r1, r2, #3
    2ef4:	2280      	movs	r2, #128	; 0x80
    2ef6:	0f40      	lsrs	r0, r0, #29
    2ef8:	0412      	lsls	r2, r2, #16
    2efa:	4302      	orrs	r2, r0
    2efc:	430a      	orrs	r2, r1
    2efe:	4693      	mov	fp, r2
    2f00:	4652      	mov	r2, sl
    2f02:	00d1      	lsls	r1, r2, #3
    2f04:	4a5c      	ldr	r2, [pc, #368]	; (3078 <__aeabi_ddiv+0x1e8>)
    2f06:	4694      	mov	ip, r2
    2f08:	2200      	movs	r2, #0
    2f0a:	4463      	add	r3, ip
    2f0c:	0038      	movs	r0, r7
    2f0e:	4068      	eors	r0, r5
    2f10:	4684      	mov	ip, r0
    2f12:	9002      	str	r0, [sp, #8]
    2f14:	1ae4      	subs	r4, r4, r3
    2f16:	4316      	orrs	r6, r2
    2f18:	2e0f      	cmp	r6, #15
    2f1a:	d900      	bls.n	2f1e <__aeabi_ddiv+0x8e>
    2f1c:	e0b4      	b.n	3088 <__aeabi_ddiv+0x1f8>
    2f1e:	4b57      	ldr	r3, [pc, #348]	; (307c <__aeabi_ddiv+0x1ec>)
    2f20:	00b6      	lsls	r6, r6, #2
    2f22:	599b      	ldr	r3, [r3, r6]
    2f24:	469f      	mov	pc, r3
    2f26:	0003      	movs	r3, r0
    2f28:	4333      	orrs	r3, r6
    2f2a:	4699      	mov	r9, r3
    2f2c:	d16c      	bne.n	3008 <__aeabi_ddiv+0x178>
    2f2e:	2300      	movs	r3, #0
    2f30:	4698      	mov	r8, r3
    2f32:	3302      	adds	r3, #2
    2f34:	2608      	movs	r6, #8
    2f36:	9303      	str	r3, [sp, #12]
    2f38:	e7ce      	b.n	2ed8 <__aeabi_ddiv+0x48>
    2f3a:	46cb      	mov	fp, r9
    2f3c:	4641      	mov	r1, r8
    2f3e:	9a03      	ldr	r2, [sp, #12]
    2f40:	9701      	str	r7, [sp, #4]
    2f42:	2a02      	cmp	r2, #2
    2f44:	d165      	bne.n	3012 <__aeabi_ddiv+0x182>
    2f46:	9b01      	ldr	r3, [sp, #4]
    2f48:	4c4a      	ldr	r4, [pc, #296]	; (3074 <__aeabi_ddiv+0x1e4>)
    2f4a:	469c      	mov	ip, r3
    2f4c:	2300      	movs	r3, #0
    2f4e:	2200      	movs	r2, #0
    2f50:	4698      	mov	r8, r3
    2f52:	e06b      	b.n	302c <__aeabi_ddiv+0x19c>
    2f54:	0003      	movs	r3, r0
    2f56:	4333      	orrs	r3, r6
    2f58:	4699      	mov	r9, r3
    2f5a:	d04e      	beq.n	2ffa <__aeabi_ddiv+0x16a>
    2f5c:	2e00      	cmp	r6, #0
    2f5e:	d100      	bne.n	2f62 <__aeabi_ddiv+0xd2>
    2f60:	e1bc      	b.n	32dc <__aeabi_ddiv+0x44c>
    2f62:	0030      	movs	r0, r6
    2f64:	f001 f8ca 	bl	40fc <__clzsi2>
    2f68:	0003      	movs	r3, r0
    2f6a:	3b0b      	subs	r3, #11
    2f6c:	2b1c      	cmp	r3, #28
    2f6e:	dd00      	ble.n	2f72 <__aeabi_ddiv+0xe2>
    2f70:	e1ac      	b.n	32cc <__aeabi_ddiv+0x43c>
    2f72:	221d      	movs	r2, #29
    2f74:	1ad3      	subs	r3, r2, r3
    2f76:	465a      	mov	r2, fp
    2f78:	0001      	movs	r1, r0
    2f7a:	40da      	lsrs	r2, r3
    2f7c:	3908      	subs	r1, #8
    2f7e:	408e      	lsls	r6, r1
    2f80:	0013      	movs	r3, r2
    2f82:	4333      	orrs	r3, r6
    2f84:	4699      	mov	r9, r3
    2f86:	465b      	mov	r3, fp
    2f88:	408b      	lsls	r3, r1
    2f8a:	4698      	mov	r8, r3
    2f8c:	2300      	movs	r3, #0
    2f8e:	4c3c      	ldr	r4, [pc, #240]	; (3080 <__aeabi_ddiv+0x1f0>)
    2f90:	2600      	movs	r6, #0
    2f92:	1a24      	subs	r4, r4, r0
    2f94:	9303      	str	r3, [sp, #12]
    2f96:	e79f      	b.n	2ed8 <__aeabi_ddiv+0x48>
    2f98:	4651      	mov	r1, sl
    2f9a:	465a      	mov	r2, fp
    2f9c:	4311      	orrs	r1, r2
    2f9e:	d129      	bne.n	2ff4 <__aeabi_ddiv+0x164>
    2fa0:	2200      	movs	r2, #0
    2fa2:	4693      	mov	fp, r2
    2fa4:	3202      	adds	r2, #2
    2fa6:	e7b1      	b.n	2f0c <__aeabi_ddiv+0x7c>
    2fa8:	4659      	mov	r1, fp
    2faa:	4301      	orrs	r1, r0
    2fac:	d01e      	beq.n	2fec <__aeabi_ddiv+0x15c>
    2fae:	465b      	mov	r3, fp
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d100      	bne.n	2fb6 <__aeabi_ddiv+0x126>
    2fb4:	e19e      	b.n	32f4 <__aeabi_ddiv+0x464>
    2fb6:	4658      	mov	r0, fp
    2fb8:	f001 f8a0 	bl	40fc <__clzsi2>
    2fbc:	0003      	movs	r3, r0
    2fbe:	3b0b      	subs	r3, #11
    2fc0:	2b1c      	cmp	r3, #28
    2fc2:	dd00      	ble.n	2fc6 <__aeabi_ddiv+0x136>
    2fc4:	e18f      	b.n	32e6 <__aeabi_ddiv+0x456>
    2fc6:	0002      	movs	r2, r0
    2fc8:	4659      	mov	r1, fp
    2fca:	3a08      	subs	r2, #8
    2fcc:	4091      	lsls	r1, r2
    2fce:	468b      	mov	fp, r1
    2fd0:	211d      	movs	r1, #29
    2fd2:	1acb      	subs	r3, r1, r3
    2fd4:	4651      	mov	r1, sl
    2fd6:	40d9      	lsrs	r1, r3
    2fd8:	000b      	movs	r3, r1
    2fda:	4659      	mov	r1, fp
    2fdc:	430b      	orrs	r3, r1
    2fde:	4651      	mov	r1, sl
    2fe0:	469b      	mov	fp, r3
    2fe2:	4091      	lsls	r1, r2
    2fe4:	4b26      	ldr	r3, [pc, #152]	; (3080 <__aeabi_ddiv+0x1f0>)
    2fe6:	2200      	movs	r2, #0
    2fe8:	1a1b      	subs	r3, r3, r0
    2fea:	e78f      	b.n	2f0c <__aeabi_ddiv+0x7c>
    2fec:	2300      	movs	r3, #0
    2fee:	2201      	movs	r2, #1
    2ff0:	469b      	mov	fp, r3
    2ff2:	e78b      	b.n	2f0c <__aeabi_ddiv+0x7c>
    2ff4:	4651      	mov	r1, sl
    2ff6:	2203      	movs	r2, #3
    2ff8:	e788      	b.n	2f0c <__aeabi_ddiv+0x7c>
    2ffa:	2300      	movs	r3, #0
    2ffc:	4698      	mov	r8, r3
    2ffe:	3301      	adds	r3, #1
    3000:	2604      	movs	r6, #4
    3002:	2400      	movs	r4, #0
    3004:	9303      	str	r3, [sp, #12]
    3006:	e767      	b.n	2ed8 <__aeabi_ddiv+0x48>
    3008:	2303      	movs	r3, #3
    300a:	46b1      	mov	r9, r6
    300c:	9303      	str	r3, [sp, #12]
    300e:	260c      	movs	r6, #12
    3010:	e762      	b.n	2ed8 <__aeabi_ddiv+0x48>
    3012:	2a03      	cmp	r2, #3
    3014:	d100      	bne.n	3018 <__aeabi_ddiv+0x188>
    3016:	e25c      	b.n	34d2 <__aeabi_ddiv+0x642>
    3018:	9b01      	ldr	r3, [sp, #4]
    301a:	2a01      	cmp	r2, #1
    301c:	d000      	beq.n	3020 <__aeabi_ddiv+0x190>
    301e:	e1e4      	b.n	33ea <__aeabi_ddiv+0x55a>
    3020:	4013      	ands	r3, r2
    3022:	469c      	mov	ip, r3
    3024:	2300      	movs	r3, #0
    3026:	2400      	movs	r4, #0
    3028:	2200      	movs	r2, #0
    302a:	4698      	mov	r8, r3
    302c:	2100      	movs	r1, #0
    302e:	0312      	lsls	r2, r2, #12
    3030:	0b13      	lsrs	r3, r2, #12
    3032:	0d0a      	lsrs	r2, r1, #20
    3034:	0512      	lsls	r2, r2, #20
    3036:	431a      	orrs	r2, r3
    3038:	0523      	lsls	r3, r4, #20
    303a:	4c12      	ldr	r4, [pc, #72]	; (3084 <__aeabi_ddiv+0x1f4>)
    303c:	4640      	mov	r0, r8
    303e:	4022      	ands	r2, r4
    3040:	4313      	orrs	r3, r2
    3042:	4662      	mov	r2, ip
    3044:	005b      	lsls	r3, r3, #1
    3046:	07d2      	lsls	r2, r2, #31
    3048:	085b      	lsrs	r3, r3, #1
    304a:	4313      	orrs	r3, r2
    304c:	0019      	movs	r1, r3
    304e:	b007      	add	sp, #28
    3050:	bc3c      	pop	{r2, r3, r4, r5}
    3052:	4690      	mov	r8, r2
    3054:	4699      	mov	r9, r3
    3056:	46a2      	mov	sl, r4
    3058:	46ab      	mov	fp, r5
    305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    305c:	2300      	movs	r3, #0
    305e:	2280      	movs	r2, #128	; 0x80
    3060:	469c      	mov	ip, r3
    3062:	0312      	lsls	r2, r2, #12
    3064:	4698      	mov	r8, r3
    3066:	4c03      	ldr	r4, [pc, #12]	; (3074 <__aeabi_ddiv+0x1e4>)
    3068:	e7e0      	b.n	302c <__aeabi_ddiv+0x19c>
    306a:	2300      	movs	r3, #0
    306c:	4c01      	ldr	r4, [pc, #4]	; (3074 <__aeabi_ddiv+0x1e4>)
    306e:	2200      	movs	r2, #0
    3070:	4698      	mov	r8, r3
    3072:	e7db      	b.n	302c <__aeabi_ddiv+0x19c>
    3074:	000007ff 	.word	0x000007ff
    3078:	fffffc01 	.word	0xfffffc01
    307c:	0000535c 	.word	0x0000535c
    3080:	fffffc0d 	.word	0xfffffc0d
    3084:	800fffff 	.word	0x800fffff
    3088:	45d9      	cmp	r9, fp
    308a:	d900      	bls.n	308e <__aeabi_ddiv+0x1fe>
    308c:	e139      	b.n	3302 <__aeabi_ddiv+0x472>
    308e:	d100      	bne.n	3092 <__aeabi_ddiv+0x202>
    3090:	e134      	b.n	32fc <__aeabi_ddiv+0x46c>
    3092:	2300      	movs	r3, #0
    3094:	4646      	mov	r6, r8
    3096:	464d      	mov	r5, r9
    3098:	469a      	mov	sl, r3
    309a:	3c01      	subs	r4, #1
    309c:	465b      	mov	r3, fp
    309e:	0e0a      	lsrs	r2, r1, #24
    30a0:	021b      	lsls	r3, r3, #8
    30a2:	431a      	orrs	r2, r3
    30a4:	020b      	lsls	r3, r1, #8
    30a6:	0c17      	lsrs	r7, r2, #16
    30a8:	9303      	str	r3, [sp, #12]
    30aa:	0413      	lsls	r3, r2, #16
    30ac:	0c1b      	lsrs	r3, r3, #16
    30ae:	0039      	movs	r1, r7
    30b0:	0028      	movs	r0, r5
    30b2:	4690      	mov	r8, r2
    30b4:	9301      	str	r3, [sp, #4]
    30b6:	f7ff fb25 	bl	2704 <__udivsi3>
    30ba:	0002      	movs	r2, r0
    30bc:	9b01      	ldr	r3, [sp, #4]
    30be:	4683      	mov	fp, r0
    30c0:	435a      	muls	r2, r3
    30c2:	0028      	movs	r0, r5
    30c4:	0039      	movs	r1, r7
    30c6:	4691      	mov	r9, r2
    30c8:	f7ff fba2 	bl	2810 <__aeabi_uidivmod>
    30cc:	0c35      	lsrs	r5, r6, #16
    30ce:	0409      	lsls	r1, r1, #16
    30d0:	430d      	orrs	r5, r1
    30d2:	45a9      	cmp	r9, r5
    30d4:	d90d      	bls.n	30f2 <__aeabi_ddiv+0x262>
    30d6:	465b      	mov	r3, fp
    30d8:	4445      	add	r5, r8
    30da:	3b01      	subs	r3, #1
    30dc:	45a8      	cmp	r8, r5
    30de:	d900      	bls.n	30e2 <__aeabi_ddiv+0x252>
    30e0:	e13a      	b.n	3358 <__aeabi_ddiv+0x4c8>
    30e2:	45a9      	cmp	r9, r5
    30e4:	d800      	bhi.n	30e8 <__aeabi_ddiv+0x258>
    30e6:	e137      	b.n	3358 <__aeabi_ddiv+0x4c8>
    30e8:	2302      	movs	r3, #2
    30ea:	425b      	negs	r3, r3
    30ec:	469c      	mov	ip, r3
    30ee:	4445      	add	r5, r8
    30f0:	44e3      	add	fp, ip
    30f2:	464b      	mov	r3, r9
    30f4:	1aeb      	subs	r3, r5, r3
    30f6:	0039      	movs	r1, r7
    30f8:	0018      	movs	r0, r3
    30fa:	9304      	str	r3, [sp, #16]
    30fc:	f7ff fb02 	bl	2704 <__udivsi3>
    3100:	9b01      	ldr	r3, [sp, #4]
    3102:	0005      	movs	r5, r0
    3104:	4343      	muls	r3, r0
    3106:	0039      	movs	r1, r7
    3108:	9804      	ldr	r0, [sp, #16]
    310a:	4699      	mov	r9, r3
    310c:	f7ff fb80 	bl	2810 <__aeabi_uidivmod>
    3110:	0433      	lsls	r3, r6, #16
    3112:	0409      	lsls	r1, r1, #16
    3114:	0c1b      	lsrs	r3, r3, #16
    3116:	430b      	orrs	r3, r1
    3118:	4599      	cmp	r9, r3
    311a:	d909      	bls.n	3130 <__aeabi_ddiv+0x2a0>
    311c:	4443      	add	r3, r8
    311e:	1e6a      	subs	r2, r5, #1
    3120:	4598      	cmp	r8, r3
    3122:	d900      	bls.n	3126 <__aeabi_ddiv+0x296>
    3124:	e11a      	b.n	335c <__aeabi_ddiv+0x4cc>
    3126:	4599      	cmp	r9, r3
    3128:	d800      	bhi.n	312c <__aeabi_ddiv+0x29c>
    312a:	e117      	b.n	335c <__aeabi_ddiv+0x4cc>
    312c:	3d02      	subs	r5, #2
    312e:	4443      	add	r3, r8
    3130:	464a      	mov	r2, r9
    3132:	1a9b      	subs	r3, r3, r2
    3134:	465a      	mov	r2, fp
    3136:	0412      	lsls	r2, r2, #16
    3138:	432a      	orrs	r2, r5
    313a:	9903      	ldr	r1, [sp, #12]
    313c:	4693      	mov	fp, r2
    313e:	0c10      	lsrs	r0, r2, #16
    3140:	0c0a      	lsrs	r2, r1, #16
    3142:	4691      	mov	r9, r2
    3144:	0409      	lsls	r1, r1, #16
    3146:	465a      	mov	r2, fp
    3148:	0c09      	lsrs	r1, r1, #16
    314a:	464e      	mov	r6, r9
    314c:	000d      	movs	r5, r1
    314e:	0412      	lsls	r2, r2, #16
    3150:	0c12      	lsrs	r2, r2, #16
    3152:	4345      	muls	r5, r0
    3154:	9105      	str	r1, [sp, #20]
    3156:	4351      	muls	r1, r2
    3158:	4372      	muls	r2, r6
    315a:	4370      	muls	r0, r6
    315c:	1952      	adds	r2, r2, r5
    315e:	0c0e      	lsrs	r6, r1, #16
    3160:	18b2      	adds	r2, r6, r2
    3162:	4295      	cmp	r5, r2
    3164:	d903      	bls.n	316e <__aeabi_ddiv+0x2de>
    3166:	2580      	movs	r5, #128	; 0x80
    3168:	026d      	lsls	r5, r5, #9
    316a:	46ac      	mov	ip, r5
    316c:	4460      	add	r0, ip
    316e:	0c15      	lsrs	r5, r2, #16
    3170:	0409      	lsls	r1, r1, #16
    3172:	0412      	lsls	r2, r2, #16
    3174:	0c09      	lsrs	r1, r1, #16
    3176:	1828      	adds	r0, r5, r0
    3178:	1852      	adds	r2, r2, r1
    317a:	4283      	cmp	r3, r0
    317c:	d200      	bcs.n	3180 <__aeabi_ddiv+0x2f0>
    317e:	e0ce      	b.n	331e <__aeabi_ddiv+0x48e>
    3180:	d100      	bne.n	3184 <__aeabi_ddiv+0x2f4>
    3182:	e0c8      	b.n	3316 <__aeabi_ddiv+0x486>
    3184:	1a1d      	subs	r5, r3, r0
    3186:	4653      	mov	r3, sl
    3188:	1a9e      	subs	r6, r3, r2
    318a:	45b2      	cmp	sl, r6
    318c:	4192      	sbcs	r2, r2
    318e:	4252      	negs	r2, r2
    3190:	1aab      	subs	r3, r5, r2
    3192:	469a      	mov	sl, r3
    3194:	4598      	cmp	r8, r3
    3196:	d100      	bne.n	319a <__aeabi_ddiv+0x30a>
    3198:	e117      	b.n	33ca <__aeabi_ddiv+0x53a>
    319a:	0039      	movs	r1, r7
    319c:	0018      	movs	r0, r3
    319e:	f7ff fab1 	bl	2704 <__udivsi3>
    31a2:	9b01      	ldr	r3, [sp, #4]
    31a4:	0005      	movs	r5, r0
    31a6:	4343      	muls	r3, r0
    31a8:	0039      	movs	r1, r7
    31aa:	4650      	mov	r0, sl
    31ac:	9304      	str	r3, [sp, #16]
    31ae:	f7ff fb2f 	bl	2810 <__aeabi_uidivmod>
    31b2:	9804      	ldr	r0, [sp, #16]
    31b4:	040b      	lsls	r3, r1, #16
    31b6:	0c31      	lsrs	r1, r6, #16
    31b8:	4319      	orrs	r1, r3
    31ba:	4288      	cmp	r0, r1
    31bc:	d909      	bls.n	31d2 <__aeabi_ddiv+0x342>
    31be:	4441      	add	r1, r8
    31c0:	1e6b      	subs	r3, r5, #1
    31c2:	4588      	cmp	r8, r1
    31c4:	d900      	bls.n	31c8 <__aeabi_ddiv+0x338>
    31c6:	e107      	b.n	33d8 <__aeabi_ddiv+0x548>
    31c8:	4288      	cmp	r0, r1
    31ca:	d800      	bhi.n	31ce <__aeabi_ddiv+0x33e>
    31cc:	e104      	b.n	33d8 <__aeabi_ddiv+0x548>
    31ce:	3d02      	subs	r5, #2
    31d0:	4441      	add	r1, r8
    31d2:	9b04      	ldr	r3, [sp, #16]
    31d4:	1acb      	subs	r3, r1, r3
    31d6:	0018      	movs	r0, r3
    31d8:	0039      	movs	r1, r7
    31da:	9304      	str	r3, [sp, #16]
    31dc:	f7ff fa92 	bl	2704 <__udivsi3>
    31e0:	9b01      	ldr	r3, [sp, #4]
    31e2:	4682      	mov	sl, r0
    31e4:	4343      	muls	r3, r0
    31e6:	0039      	movs	r1, r7
    31e8:	9804      	ldr	r0, [sp, #16]
    31ea:	9301      	str	r3, [sp, #4]
    31ec:	f7ff fb10 	bl	2810 <__aeabi_uidivmod>
    31f0:	9801      	ldr	r0, [sp, #4]
    31f2:	040b      	lsls	r3, r1, #16
    31f4:	0431      	lsls	r1, r6, #16
    31f6:	0c09      	lsrs	r1, r1, #16
    31f8:	4319      	orrs	r1, r3
    31fa:	4288      	cmp	r0, r1
    31fc:	d90d      	bls.n	321a <__aeabi_ddiv+0x38a>
    31fe:	4653      	mov	r3, sl
    3200:	4441      	add	r1, r8
    3202:	3b01      	subs	r3, #1
    3204:	4588      	cmp	r8, r1
    3206:	d900      	bls.n	320a <__aeabi_ddiv+0x37a>
    3208:	e0e8      	b.n	33dc <__aeabi_ddiv+0x54c>
    320a:	4288      	cmp	r0, r1
    320c:	d800      	bhi.n	3210 <__aeabi_ddiv+0x380>
    320e:	e0e5      	b.n	33dc <__aeabi_ddiv+0x54c>
    3210:	2302      	movs	r3, #2
    3212:	425b      	negs	r3, r3
    3214:	469c      	mov	ip, r3
    3216:	4441      	add	r1, r8
    3218:	44e2      	add	sl, ip
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	042d      	lsls	r5, r5, #16
    321e:	1ace      	subs	r6, r1, r3
    3220:	4651      	mov	r1, sl
    3222:	4329      	orrs	r1, r5
    3224:	9d05      	ldr	r5, [sp, #20]
    3226:	464f      	mov	r7, r9
    3228:	002a      	movs	r2, r5
    322a:	040b      	lsls	r3, r1, #16
    322c:	0c08      	lsrs	r0, r1, #16
    322e:	0c1b      	lsrs	r3, r3, #16
    3230:	435a      	muls	r2, r3
    3232:	4345      	muls	r5, r0
    3234:	437b      	muls	r3, r7
    3236:	4378      	muls	r0, r7
    3238:	195b      	adds	r3, r3, r5
    323a:	0c17      	lsrs	r7, r2, #16
    323c:	18fb      	adds	r3, r7, r3
    323e:	429d      	cmp	r5, r3
    3240:	d903      	bls.n	324a <__aeabi_ddiv+0x3ba>
    3242:	2580      	movs	r5, #128	; 0x80
    3244:	026d      	lsls	r5, r5, #9
    3246:	46ac      	mov	ip, r5
    3248:	4460      	add	r0, ip
    324a:	0c1d      	lsrs	r5, r3, #16
    324c:	0412      	lsls	r2, r2, #16
    324e:	041b      	lsls	r3, r3, #16
    3250:	0c12      	lsrs	r2, r2, #16
    3252:	1828      	adds	r0, r5, r0
    3254:	189b      	adds	r3, r3, r2
    3256:	4286      	cmp	r6, r0
    3258:	d200      	bcs.n	325c <__aeabi_ddiv+0x3cc>
    325a:	e093      	b.n	3384 <__aeabi_ddiv+0x4f4>
    325c:	d100      	bne.n	3260 <__aeabi_ddiv+0x3d0>
    325e:	e08e      	b.n	337e <__aeabi_ddiv+0x4ee>
    3260:	2301      	movs	r3, #1
    3262:	4319      	orrs	r1, r3
    3264:	4ba0      	ldr	r3, [pc, #640]	; (34e8 <__aeabi_ddiv+0x658>)
    3266:	18e3      	adds	r3, r4, r3
    3268:	2b00      	cmp	r3, #0
    326a:	dc00      	bgt.n	326e <__aeabi_ddiv+0x3de>
    326c:	e099      	b.n	33a2 <__aeabi_ddiv+0x512>
    326e:	074a      	lsls	r2, r1, #29
    3270:	d000      	beq.n	3274 <__aeabi_ddiv+0x3e4>
    3272:	e09e      	b.n	33b2 <__aeabi_ddiv+0x522>
    3274:	465a      	mov	r2, fp
    3276:	01d2      	lsls	r2, r2, #7
    3278:	d506      	bpl.n	3288 <__aeabi_ddiv+0x3f8>
    327a:	465a      	mov	r2, fp
    327c:	4b9b      	ldr	r3, [pc, #620]	; (34ec <__aeabi_ddiv+0x65c>)
    327e:	401a      	ands	r2, r3
    3280:	2380      	movs	r3, #128	; 0x80
    3282:	4693      	mov	fp, r2
    3284:	00db      	lsls	r3, r3, #3
    3286:	18e3      	adds	r3, r4, r3
    3288:	4a99      	ldr	r2, [pc, #612]	; (34f0 <__aeabi_ddiv+0x660>)
    328a:	4293      	cmp	r3, r2
    328c:	dd68      	ble.n	3360 <__aeabi_ddiv+0x4d0>
    328e:	2301      	movs	r3, #1
    3290:	9a02      	ldr	r2, [sp, #8]
    3292:	4c98      	ldr	r4, [pc, #608]	; (34f4 <__aeabi_ddiv+0x664>)
    3294:	401a      	ands	r2, r3
    3296:	2300      	movs	r3, #0
    3298:	4694      	mov	ip, r2
    329a:	4698      	mov	r8, r3
    329c:	2200      	movs	r2, #0
    329e:	e6c5      	b.n	302c <__aeabi_ddiv+0x19c>
    32a0:	2280      	movs	r2, #128	; 0x80
    32a2:	464b      	mov	r3, r9
    32a4:	0312      	lsls	r2, r2, #12
    32a6:	4213      	tst	r3, r2
    32a8:	d00a      	beq.n	32c0 <__aeabi_ddiv+0x430>
    32aa:	465b      	mov	r3, fp
    32ac:	4213      	tst	r3, r2
    32ae:	d106      	bne.n	32be <__aeabi_ddiv+0x42e>
    32b0:	431a      	orrs	r2, r3
    32b2:	0312      	lsls	r2, r2, #12
    32b4:	0b12      	lsrs	r2, r2, #12
    32b6:	46ac      	mov	ip, r5
    32b8:	4688      	mov	r8, r1
    32ba:	4c8e      	ldr	r4, [pc, #568]	; (34f4 <__aeabi_ddiv+0x664>)
    32bc:	e6b6      	b.n	302c <__aeabi_ddiv+0x19c>
    32be:	464b      	mov	r3, r9
    32c0:	431a      	orrs	r2, r3
    32c2:	0312      	lsls	r2, r2, #12
    32c4:	0b12      	lsrs	r2, r2, #12
    32c6:	46bc      	mov	ip, r7
    32c8:	4c8a      	ldr	r4, [pc, #552]	; (34f4 <__aeabi_ddiv+0x664>)
    32ca:	e6af      	b.n	302c <__aeabi_ddiv+0x19c>
    32cc:	0003      	movs	r3, r0
    32ce:	465a      	mov	r2, fp
    32d0:	3b28      	subs	r3, #40	; 0x28
    32d2:	409a      	lsls	r2, r3
    32d4:	2300      	movs	r3, #0
    32d6:	4691      	mov	r9, r2
    32d8:	4698      	mov	r8, r3
    32da:	e657      	b.n	2f8c <__aeabi_ddiv+0xfc>
    32dc:	4658      	mov	r0, fp
    32de:	f000 ff0d 	bl	40fc <__clzsi2>
    32e2:	3020      	adds	r0, #32
    32e4:	e640      	b.n	2f68 <__aeabi_ddiv+0xd8>
    32e6:	0003      	movs	r3, r0
    32e8:	4652      	mov	r2, sl
    32ea:	3b28      	subs	r3, #40	; 0x28
    32ec:	409a      	lsls	r2, r3
    32ee:	2100      	movs	r1, #0
    32f0:	4693      	mov	fp, r2
    32f2:	e677      	b.n	2fe4 <__aeabi_ddiv+0x154>
    32f4:	f000 ff02 	bl	40fc <__clzsi2>
    32f8:	3020      	adds	r0, #32
    32fa:	e65f      	b.n	2fbc <__aeabi_ddiv+0x12c>
    32fc:	4588      	cmp	r8, r1
    32fe:	d200      	bcs.n	3302 <__aeabi_ddiv+0x472>
    3300:	e6c7      	b.n	3092 <__aeabi_ddiv+0x202>
    3302:	464b      	mov	r3, r9
    3304:	07de      	lsls	r6, r3, #31
    3306:	085d      	lsrs	r5, r3, #1
    3308:	4643      	mov	r3, r8
    330a:	085b      	lsrs	r3, r3, #1
    330c:	431e      	orrs	r6, r3
    330e:	4643      	mov	r3, r8
    3310:	07db      	lsls	r3, r3, #31
    3312:	469a      	mov	sl, r3
    3314:	e6c2      	b.n	309c <__aeabi_ddiv+0x20c>
    3316:	2500      	movs	r5, #0
    3318:	4592      	cmp	sl, r2
    331a:	d300      	bcc.n	331e <__aeabi_ddiv+0x48e>
    331c:	e733      	b.n	3186 <__aeabi_ddiv+0x2f6>
    331e:	9e03      	ldr	r6, [sp, #12]
    3320:	4659      	mov	r1, fp
    3322:	46b4      	mov	ip, r6
    3324:	44e2      	add	sl, ip
    3326:	45b2      	cmp	sl, r6
    3328:	41ad      	sbcs	r5, r5
    332a:	426d      	negs	r5, r5
    332c:	4445      	add	r5, r8
    332e:	18eb      	adds	r3, r5, r3
    3330:	3901      	subs	r1, #1
    3332:	4598      	cmp	r8, r3
    3334:	d207      	bcs.n	3346 <__aeabi_ddiv+0x4b6>
    3336:	4298      	cmp	r0, r3
    3338:	d900      	bls.n	333c <__aeabi_ddiv+0x4ac>
    333a:	e07f      	b.n	343c <__aeabi_ddiv+0x5ac>
    333c:	d100      	bne.n	3340 <__aeabi_ddiv+0x4b0>
    333e:	e0bc      	b.n	34ba <__aeabi_ddiv+0x62a>
    3340:	1a1d      	subs	r5, r3, r0
    3342:	468b      	mov	fp, r1
    3344:	e71f      	b.n	3186 <__aeabi_ddiv+0x2f6>
    3346:	4598      	cmp	r8, r3
    3348:	d1fa      	bne.n	3340 <__aeabi_ddiv+0x4b0>
    334a:	9d03      	ldr	r5, [sp, #12]
    334c:	4555      	cmp	r5, sl
    334e:	d9f2      	bls.n	3336 <__aeabi_ddiv+0x4a6>
    3350:	4643      	mov	r3, r8
    3352:	468b      	mov	fp, r1
    3354:	1a1d      	subs	r5, r3, r0
    3356:	e716      	b.n	3186 <__aeabi_ddiv+0x2f6>
    3358:	469b      	mov	fp, r3
    335a:	e6ca      	b.n	30f2 <__aeabi_ddiv+0x262>
    335c:	0015      	movs	r5, r2
    335e:	e6e7      	b.n	3130 <__aeabi_ddiv+0x2a0>
    3360:	465a      	mov	r2, fp
    3362:	08c9      	lsrs	r1, r1, #3
    3364:	0752      	lsls	r2, r2, #29
    3366:	430a      	orrs	r2, r1
    3368:	055b      	lsls	r3, r3, #21
    336a:	4690      	mov	r8, r2
    336c:	0d5c      	lsrs	r4, r3, #21
    336e:	465a      	mov	r2, fp
    3370:	2301      	movs	r3, #1
    3372:	9902      	ldr	r1, [sp, #8]
    3374:	0252      	lsls	r2, r2, #9
    3376:	4019      	ands	r1, r3
    3378:	0b12      	lsrs	r2, r2, #12
    337a:	468c      	mov	ip, r1
    337c:	e656      	b.n	302c <__aeabi_ddiv+0x19c>
    337e:	2b00      	cmp	r3, #0
    3380:	d100      	bne.n	3384 <__aeabi_ddiv+0x4f4>
    3382:	e76f      	b.n	3264 <__aeabi_ddiv+0x3d4>
    3384:	4446      	add	r6, r8
    3386:	1e4a      	subs	r2, r1, #1
    3388:	45b0      	cmp	r8, r6
    338a:	d929      	bls.n	33e0 <__aeabi_ddiv+0x550>
    338c:	0011      	movs	r1, r2
    338e:	4286      	cmp	r6, r0
    3390:	d000      	beq.n	3394 <__aeabi_ddiv+0x504>
    3392:	e765      	b.n	3260 <__aeabi_ddiv+0x3d0>
    3394:	9a03      	ldr	r2, [sp, #12]
    3396:	4293      	cmp	r3, r2
    3398:	d000      	beq.n	339c <__aeabi_ddiv+0x50c>
    339a:	e761      	b.n	3260 <__aeabi_ddiv+0x3d0>
    339c:	e762      	b.n	3264 <__aeabi_ddiv+0x3d4>
    339e:	2101      	movs	r1, #1
    33a0:	4249      	negs	r1, r1
    33a2:	2001      	movs	r0, #1
    33a4:	1ac2      	subs	r2, r0, r3
    33a6:	2a38      	cmp	r2, #56	; 0x38
    33a8:	dd21      	ble.n	33ee <__aeabi_ddiv+0x55e>
    33aa:	9b02      	ldr	r3, [sp, #8]
    33ac:	4003      	ands	r3, r0
    33ae:	469c      	mov	ip, r3
    33b0:	e638      	b.n	3024 <__aeabi_ddiv+0x194>
    33b2:	220f      	movs	r2, #15
    33b4:	400a      	ands	r2, r1
    33b6:	2a04      	cmp	r2, #4
    33b8:	d100      	bne.n	33bc <__aeabi_ddiv+0x52c>
    33ba:	e75b      	b.n	3274 <__aeabi_ddiv+0x3e4>
    33bc:	000a      	movs	r2, r1
    33be:	1d11      	adds	r1, r2, #4
    33c0:	4291      	cmp	r1, r2
    33c2:	4192      	sbcs	r2, r2
    33c4:	4252      	negs	r2, r2
    33c6:	4493      	add	fp, r2
    33c8:	e754      	b.n	3274 <__aeabi_ddiv+0x3e4>
    33ca:	4b47      	ldr	r3, [pc, #284]	; (34e8 <__aeabi_ddiv+0x658>)
    33cc:	18e3      	adds	r3, r4, r3
    33ce:	2b00      	cmp	r3, #0
    33d0:	dde5      	ble.n	339e <__aeabi_ddiv+0x50e>
    33d2:	2201      	movs	r2, #1
    33d4:	4252      	negs	r2, r2
    33d6:	e7f2      	b.n	33be <__aeabi_ddiv+0x52e>
    33d8:	001d      	movs	r5, r3
    33da:	e6fa      	b.n	31d2 <__aeabi_ddiv+0x342>
    33dc:	469a      	mov	sl, r3
    33de:	e71c      	b.n	321a <__aeabi_ddiv+0x38a>
    33e0:	42b0      	cmp	r0, r6
    33e2:	d839      	bhi.n	3458 <__aeabi_ddiv+0x5c8>
    33e4:	d06e      	beq.n	34c4 <__aeabi_ddiv+0x634>
    33e6:	0011      	movs	r1, r2
    33e8:	e73a      	b.n	3260 <__aeabi_ddiv+0x3d0>
    33ea:	9302      	str	r3, [sp, #8]
    33ec:	e73a      	b.n	3264 <__aeabi_ddiv+0x3d4>
    33ee:	2a1f      	cmp	r2, #31
    33f0:	dc3c      	bgt.n	346c <__aeabi_ddiv+0x5dc>
    33f2:	2320      	movs	r3, #32
    33f4:	1a9b      	subs	r3, r3, r2
    33f6:	000c      	movs	r4, r1
    33f8:	4658      	mov	r0, fp
    33fa:	4099      	lsls	r1, r3
    33fc:	4098      	lsls	r0, r3
    33fe:	1e4b      	subs	r3, r1, #1
    3400:	4199      	sbcs	r1, r3
    3402:	465b      	mov	r3, fp
    3404:	40d4      	lsrs	r4, r2
    3406:	40d3      	lsrs	r3, r2
    3408:	4320      	orrs	r0, r4
    340a:	4308      	orrs	r0, r1
    340c:	001a      	movs	r2, r3
    340e:	0743      	lsls	r3, r0, #29
    3410:	d009      	beq.n	3426 <__aeabi_ddiv+0x596>
    3412:	230f      	movs	r3, #15
    3414:	4003      	ands	r3, r0
    3416:	2b04      	cmp	r3, #4
    3418:	d005      	beq.n	3426 <__aeabi_ddiv+0x596>
    341a:	0001      	movs	r1, r0
    341c:	1d08      	adds	r0, r1, #4
    341e:	4288      	cmp	r0, r1
    3420:	419b      	sbcs	r3, r3
    3422:	425b      	negs	r3, r3
    3424:	18d2      	adds	r2, r2, r3
    3426:	0213      	lsls	r3, r2, #8
    3428:	d53a      	bpl.n	34a0 <__aeabi_ddiv+0x610>
    342a:	2301      	movs	r3, #1
    342c:	9a02      	ldr	r2, [sp, #8]
    342e:	2401      	movs	r4, #1
    3430:	401a      	ands	r2, r3
    3432:	2300      	movs	r3, #0
    3434:	4694      	mov	ip, r2
    3436:	4698      	mov	r8, r3
    3438:	2200      	movs	r2, #0
    343a:	e5f7      	b.n	302c <__aeabi_ddiv+0x19c>
    343c:	2102      	movs	r1, #2
    343e:	4249      	negs	r1, r1
    3440:	468c      	mov	ip, r1
    3442:	9d03      	ldr	r5, [sp, #12]
    3444:	44e3      	add	fp, ip
    3446:	46ac      	mov	ip, r5
    3448:	44e2      	add	sl, ip
    344a:	45aa      	cmp	sl, r5
    344c:	41ad      	sbcs	r5, r5
    344e:	426d      	negs	r5, r5
    3450:	4445      	add	r5, r8
    3452:	18ed      	adds	r5, r5, r3
    3454:	1a2d      	subs	r5, r5, r0
    3456:	e696      	b.n	3186 <__aeabi_ddiv+0x2f6>
    3458:	1e8a      	subs	r2, r1, #2
    345a:	9903      	ldr	r1, [sp, #12]
    345c:	004d      	lsls	r5, r1, #1
    345e:	428d      	cmp	r5, r1
    3460:	4189      	sbcs	r1, r1
    3462:	4249      	negs	r1, r1
    3464:	4441      	add	r1, r8
    3466:	1876      	adds	r6, r6, r1
    3468:	9503      	str	r5, [sp, #12]
    346a:	e78f      	b.n	338c <__aeabi_ddiv+0x4fc>
    346c:	201f      	movs	r0, #31
    346e:	4240      	negs	r0, r0
    3470:	1ac3      	subs	r3, r0, r3
    3472:	4658      	mov	r0, fp
    3474:	40d8      	lsrs	r0, r3
    3476:	0003      	movs	r3, r0
    3478:	2a20      	cmp	r2, #32
    347a:	d028      	beq.n	34ce <__aeabi_ddiv+0x63e>
    347c:	2040      	movs	r0, #64	; 0x40
    347e:	465d      	mov	r5, fp
    3480:	1a82      	subs	r2, r0, r2
    3482:	4095      	lsls	r5, r2
    3484:	4329      	orrs	r1, r5
    3486:	1e4a      	subs	r2, r1, #1
    3488:	4191      	sbcs	r1, r2
    348a:	4319      	orrs	r1, r3
    348c:	2307      	movs	r3, #7
    348e:	2200      	movs	r2, #0
    3490:	400b      	ands	r3, r1
    3492:	d009      	beq.n	34a8 <__aeabi_ddiv+0x618>
    3494:	230f      	movs	r3, #15
    3496:	2200      	movs	r2, #0
    3498:	400b      	ands	r3, r1
    349a:	0008      	movs	r0, r1
    349c:	2b04      	cmp	r3, #4
    349e:	d1bd      	bne.n	341c <__aeabi_ddiv+0x58c>
    34a0:	0001      	movs	r1, r0
    34a2:	0753      	lsls	r3, r2, #29
    34a4:	0252      	lsls	r2, r2, #9
    34a6:	0b12      	lsrs	r2, r2, #12
    34a8:	08c9      	lsrs	r1, r1, #3
    34aa:	4319      	orrs	r1, r3
    34ac:	2301      	movs	r3, #1
    34ae:	4688      	mov	r8, r1
    34b0:	9902      	ldr	r1, [sp, #8]
    34b2:	2400      	movs	r4, #0
    34b4:	4019      	ands	r1, r3
    34b6:	468c      	mov	ip, r1
    34b8:	e5b8      	b.n	302c <__aeabi_ddiv+0x19c>
    34ba:	4552      	cmp	r2, sl
    34bc:	d8be      	bhi.n	343c <__aeabi_ddiv+0x5ac>
    34be:	468b      	mov	fp, r1
    34c0:	2500      	movs	r5, #0
    34c2:	e660      	b.n	3186 <__aeabi_ddiv+0x2f6>
    34c4:	9d03      	ldr	r5, [sp, #12]
    34c6:	429d      	cmp	r5, r3
    34c8:	d3c6      	bcc.n	3458 <__aeabi_ddiv+0x5c8>
    34ca:	0011      	movs	r1, r2
    34cc:	e762      	b.n	3394 <__aeabi_ddiv+0x504>
    34ce:	2500      	movs	r5, #0
    34d0:	e7d8      	b.n	3484 <__aeabi_ddiv+0x5f4>
    34d2:	2280      	movs	r2, #128	; 0x80
    34d4:	465b      	mov	r3, fp
    34d6:	0312      	lsls	r2, r2, #12
    34d8:	431a      	orrs	r2, r3
    34da:	9b01      	ldr	r3, [sp, #4]
    34dc:	0312      	lsls	r2, r2, #12
    34de:	0b12      	lsrs	r2, r2, #12
    34e0:	469c      	mov	ip, r3
    34e2:	4688      	mov	r8, r1
    34e4:	4c03      	ldr	r4, [pc, #12]	; (34f4 <__aeabi_ddiv+0x664>)
    34e6:	e5a1      	b.n	302c <__aeabi_ddiv+0x19c>
    34e8:	000003ff 	.word	0x000003ff
    34ec:	feffffff 	.word	0xfeffffff
    34f0:	000007fe 	.word	0x000007fe
    34f4:	000007ff 	.word	0x000007ff

000034f8 <__aeabi_dmul>:
    34f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34fa:	4657      	mov	r7, sl
    34fc:	4645      	mov	r5, r8
    34fe:	46de      	mov	lr, fp
    3500:	464e      	mov	r6, r9
    3502:	b5e0      	push	{r5, r6, r7, lr}
    3504:	030c      	lsls	r4, r1, #12
    3506:	4698      	mov	r8, r3
    3508:	004e      	lsls	r6, r1, #1
    350a:	0b23      	lsrs	r3, r4, #12
    350c:	b087      	sub	sp, #28
    350e:	0007      	movs	r7, r0
    3510:	4692      	mov	sl, r2
    3512:	469b      	mov	fp, r3
    3514:	0d76      	lsrs	r6, r6, #21
    3516:	0fcd      	lsrs	r5, r1, #31
    3518:	2e00      	cmp	r6, #0
    351a:	d06b      	beq.n	35f4 <__aeabi_dmul+0xfc>
    351c:	4b6d      	ldr	r3, [pc, #436]	; (36d4 <__aeabi_dmul+0x1dc>)
    351e:	429e      	cmp	r6, r3
    3520:	d035      	beq.n	358e <__aeabi_dmul+0x96>
    3522:	2480      	movs	r4, #128	; 0x80
    3524:	465b      	mov	r3, fp
    3526:	0f42      	lsrs	r2, r0, #29
    3528:	0424      	lsls	r4, r4, #16
    352a:	00db      	lsls	r3, r3, #3
    352c:	4314      	orrs	r4, r2
    352e:	431c      	orrs	r4, r3
    3530:	00c3      	lsls	r3, r0, #3
    3532:	4699      	mov	r9, r3
    3534:	4b68      	ldr	r3, [pc, #416]	; (36d8 <__aeabi_dmul+0x1e0>)
    3536:	46a3      	mov	fp, r4
    3538:	469c      	mov	ip, r3
    353a:	2300      	movs	r3, #0
    353c:	2700      	movs	r7, #0
    353e:	4466      	add	r6, ip
    3540:	9302      	str	r3, [sp, #8]
    3542:	4643      	mov	r3, r8
    3544:	031c      	lsls	r4, r3, #12
    3546:	005a      	lsls	r2, r3, #1
    3548:	0fdb      	lsrs	r3, r3, #31
    354a:	4650      	mov	r0, sl
    354c:	0b24      	lsrs	r4, r4, #12
    354e:	0d52      	lsrs	r2, r2, #21
    3550:	4698      	mov	r8, r3
    3552:	d100      	bne.n	3556 <__aeabi_dmul+0x5e>
    3554:	e076      	b.n	3644 <__aeabi_dmul+0x14c>
    3556:	4b5f      	ldr	r3, [pc, #380]	; (36d4 <__aeabi_dmul+0x1dc>)
    3558:	429a      	cmp	r2, r3
    355a:	d06d      	beq.n	3638 <__aeabi_dmul+0x140>
    355c:	2380      	movs	r3, #128	; 0x80
    355e:	0f41      	lsrs	r1, r0, #29
    3560:	041b      	lsls	r3, r3, #16
    3562:	430b      	orrs	r3, r1
    3564:	495c      	ldr	r1, [pc, #368]	; (36d8 <__aeabi_dmul+0x1e0>)
    3566:	00e4      	lsls	r4, r4, #3
    3568:	468c      	mov	ip, r1
    356a:	431c      	orrs	r4, r3
    356c:	00c3      	lsls	r3, r0, #3
    356e:	2000      	movs	r0, #0
    3570:	4462      	add	r2, ip
    3572:	4641      	mov	r1, r8
    3574:	18b6      	adds	r6, r6, r2
    3576:	4069      	eors	r1, r5
    3578:	1c72      	adds	r2, r6, #1
    357a:	9101      	str	r1, [sp, #4]
    357c:	4694      	mov	ip, r2
    357e:	4307      	orrs	r7, r0
    3580:	2f0f      	cmp	r7, #15
    3582:	d900      	bls.n	3586 <__aeabi_dmul+0x8e>
    3584:	e0b0      	b.n	36e8 <__aeabi_dmul+0x1f0>
    3586:	4a55      	ldr	r2, [pc, #340]	; (36dc <__aeabi_dmul+0x1e4>)
    3588:	00bf      	lsls	r7, r7, #2
    358a:	59d2      	ldr	r2, [r2, r7]
    358c:	4697      	mov	pc, r2
    358e:	465b      	mov	r3, fp
    3590:	4303      	orrs	r3, r0
    3592:	4699      	mov	r9, r3
    3594:	d000      	beq.n	3598 <__aeabi_dmul+0xa0>
    3596:	e087      	b.n	36a8 <__aeabi_dmul+0x1b0>
    3598:	2300      	movs	r3, #0
    359a:	469b      	mov	fp, r3
    359c:	3302      	adds	r3, #2
    359e:	2708      	movs	r7, #8
    35a0:	9302      	str	r3, [sp, #8]
    35a2:	e7ce      	b.n	3542 <__aeabi_dmul+0x4a>
    35a4:	4642      	mov	r2, r8
    35a6:	9201      	str	r2, [sp, #4]
    35a8:	2802      	cmp	r0, #2
    35aa:	d067      	beq.n	367c <__aeabi_dmul+0x184>
    35ac:	2803      	cmp	r0, #3
    35ae:	d100      	bne.n	35b2 <__aeabi_dmul+0xba>
    35b0:	e20e      	b.n	39d0 <__aeabi_dmul+0x4d8>
    35b2:	2801      	cmp	r0, #1
    35b4:	d000      	beq.n	35b8 <__aeabi_dmul+0xc0>
    35b6:	e162      	b.n	387e <__aeabi_dmul+0x386>
    35b8:	2300      	movs	r3, #0
    35ba:	2400      	movs	r4, #0
    35bc:	2200      	movs	r2, #0
    35be:	4699      	mov	r9, r3
    35c0:	9901      	ldr	r1, [sp, #4]
    35c2:	4001      	ands	r1, r0
    35c4:	b2cd      	uxtb	r5, r1
    35c6:	2100      	movs	r1, #0
    35c8:	0312      	lsls	r2, r2, #12
    35ca:	0d0b      	lsrs	r3, r1, #20
    35cc:	0b12      	lsrs	r2, r2, #12
    35ce:	051b      	lsls	r3, r3, #20
    35d0:	4313      	orrs	r3, r2
    35d2:	4a43      	ldr	r2, [pc, #268]	; (36e0 <__aeabi_dmul+0x1e8>)
    35d4:	0524      	lsls	r4, r4, #20
    35d6:	4013      	ands	r3, r2
    35d8:	431c      	orrs	r4, r3
    35da:	0064      	lsls	r4, r4, #1
    35dc:	07ed      	lsls	r5, r5, #31
    35de:	0864      	lsrs	r4, r4, #1
    35e0:	432c      	orrs	r4, r5
    35e2:	4648      	mov	r0, r9
    35e4:	0021      	movs	r1, r4
    35e6:	b007      	add	sp, #28
    35e8:	bc3c      	pop	{r2, r3, r4, r5}
    35ea:	4690      	mov	r8, r2
    35ec:	4699      	mov	r9, r3
    35ee:	46a2      	mov	sl, r4
    35f0:	46ab      	mov	fp, r5
    35f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35f4:	4303      	orrs	r3, r0
    35f6:	4699      	mov	r9, r3
    35f8:	d04f      	beq.n	369a <__aeabi_dmul+0x1a2>
    35fa:	465b      	mov	r3, fp
    35fc:	2b00      	cmp	r3, #0
    35fe:	d100      	bne.n	3602 <__aeabi_dmul+0x10a>
    3600:	e189      	b.n	3916 <__aeabi_dmul+0x41e>
    3602:	4658      	mov	r0, fp
    3604:	f000 fd7a 	bl	40fc <__clzsi2>
    3608:	0003      	movs	r3, r0
    360a:	3b0b      	subs	r3, #11
    360c:	2b1c      	cmp	r3, #28
    360e:	dd00      	ble.n	3612 <__aeabi_dmul+0x11a>
    3610:	e17a      	b.n	3908 <__aeabi_dmul+0x410>
    3612:	221d      	movs	r2, #29
    3614:	1ad3      	subs	r3, r2, r3
    3616:	003a      	movs	r2, r7
    3618:	0001      	movs	r1, r0
    361a:	465c      	mov	r4, fp
    361c:	40da      	lsrs	r2, r3
    361e:	3908      	subs	r1, #8
    3620:	408c      	lsls	r4, r1
    3622:	0013      	movs	r3, r2
    3624:	408f      	lsls	r7, r1
    3626:	4323      	orrs	r3, r4
    3628:	469b      	mov	fp, r3
    362a:	46b9      	mov	r9, r7
    362c:	2300      	movs	r3, #0
    362e:	4e2d      	ldr	r6, [pc, #180]	; (36e4 <__aeabi_dmul+0x1ec>)
    3630:	2700      	movs	r7, #0
    3632:	1a36      	subs	r6, r6, r0
    3634:	9302      	str	r3, [sp, #8]
    3636:	e784      	b.n	3542 <__aeabi_dmul+0x4a>
    3638:	4653      	mov	r3, sl
    363a:	4323      	orrs	r3, r4
    363c:	d12a      	bne.n	3694 <__aeabi_dmul+0x19c>
    363e:	2400      	movs	r4, #0
    3640:	2002      	movs	r0, #2
    3642:	e796      	b.n	3572 <__aeabi_dmul+0x7a>
    3644:	4653      	mov	r3, sl
    3646:	4323      	orrs	r3, r4
    3648:	d020      	beq.n	368c <__aeabi_dmul+0x194>
    364a:	2c00      	cmp	r4, #0
    364c:	d100      	bne.n	3650 <__aeabi_dmul+0x158>
    364e:	e157      	b.n	3900 <__aeabi_dmul+0x408>
    3650:	0020      	movs	r0, r4
    3652:	f000 fd53 	bl	40fc <__clzsi2>
    3656:	0003      	movs	r3, r0
    3658:	3b0b      	subs	r3, #11
    365a:	2b1c      	cmp	r3, #28
    365c:	dd00      	ble.n	3660 <__aeabi_dmul+0x168>
    365e:	e149      	b.n	38f4 <__aeabi_dmul+0x3fc>
    3660:	211d      	movs	r1, #29
    3662:	1acb      	subs	r3, r1, r3
    3664:	4651      	mov	r1, sl
    3666:	0002      	movs	r2, r0
    3668:	40d9      	lsrs	r1, r3
    366a:	4653      	mov	r3, sl
    366c:	3a08      	subs	r2, #8
    366e:	4094      	lsls	r4, r2
    3670:	4093      	lsls	r3, r2
    3672:	430c      	orrs	r4, r1
    3674:	4a1b      	ldr	r2, [pc, #108]	; (36e4 <__aeabi_dmul+0x1ec>)
    3676:	1a12      	subs	r2, r2, r0
    3678:	2000      	movs	r0, #0
    367a:	e77a      	b.n	3572 <__aeabi_dmul+0x7a>
    367c:	2501      	movs	r5, #1
    367e:	9b01      	ldr	r3, [sp, #4]
    3680:	4c14      	ldr	r4, [pc, #80]	; (36d4 <__aeabi_dmul+0x1dc>)
    3682:	401d      	ands	r5, r3
    3684:	2300      	movs	r3, #0
    3686:	2200      	movs	r2, #0
    3688:	4699      	mov	r9, r3
    368a:	e79c      	b.n	35c6 <__aeabi_dmul+0xce>
    368c:	2400      	movs	r4, #0
    368e:	2200      	movs	r2, #0
    3690:	2001      	movs	r0, #1
    3692:	e76e      	b.n	3572 <__aeabi_dmul+0x7a>
    3694:	4653      	mov	r3, sl
    3696:	2003      	movs	r0, #3
    3698:	e76b      	b.n	3572 <__aeabi_dmul+0x7a>
    369a:	2300      	movs	r3, #0
    369c:	469b      	mov	fp, r3
    369e:	3301      	adds	r3, #1
    36a0:	2704      	movs	r7, #4
    36a2:	2600      	movs	r6, #0
    36a4:	9302      	str	r3, [sp, #8]
    36a6:	e74c      	b.n	3542 <__aeabi_dmul+0x4a>
    36a8:	2303      	movs	r3, #3
    36aa:	4681      	mov	r9, r0
    36ac:	270c      	movs	r7, #12
    36ae:	9302      	str	r3, [sp, #8]
    36b0:	e747      	b.n	3542 <__aeabi_dmul+0x4a>
    36b2:	2280      	movs	r2, #128	; 0x80
    36b4:	2300      	movs	r3, #0
    36b6:	2500      	movs	r5, #0
    36b8:	0312      	lsls	r2, r2, #12
    36ba:	4699      	mov	r9, r3
    36bc:	4c05      	ldr	r4, [pc, #20]	; (36d4 <__aeabi_dmul+0x1dc>)
    36be:	e782      	b.n	35c6 <__aeabi_dmul+0xce>
    36c0:	465c      	mov	r4, fp
    36c2:	464b      	mov	r3, r9
    36c4:	9802      	ldr	r0, [sp, #8]
    36c6:	e76f      	b.n	35a8 <__aeabi_dmul+0xb0>
    36c8:	465c      	mov	r4, fp
    36ca:	464b      	mov	r3, r9
    36cc:	9501      	str	r5, [sp, #4]
    36ce:	9802      	ldr	r0, [sp, #8]
    36d0:	e76a      	b.n	35a8 <__aeabi_dmul+0xb0>
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	000007ff 	.word	0x000007ff
    36d8:	fffffc01 	.word	0xfffffc01
    36dc:	0000539c 	.word	0x0000539c
    36e0:	800fffff 	.word	0x800fffff
    36e4:	fffffc0d 	.word	0xfffffc0d
    36e8:	464a      	mov	r2, r9
    36ea:	4649      	mov	r1, r9
    36ec:	0c17      	lsrs	r7, r2, #16
    36ee:	0c1a      	lsrs	r2, r3, #16
    36f0:	041b      	lsls	r3, r3, #16
    36f2:	0c1b      	lsrs	r3, r3, #16
    36f4:	0408      	lsls	r0, r1, #16
    36f6:	0019      	movs	r1, r3
    36f8:	0c00      	lsrs	r0, r0, #16
    36fa:	4341      	muls	r1, r0
    36fc:	0015      	movs	r5, r2
    36fe:	4688      	mov	r8, r1
    3700:	0019      	movs	r1, r3
    3702:	437d      	muls	r5, r7
    3704:	4379      	muls	r1, r7
    3706:	9503      	str	r5, [sp, #12]
    3708:	4689      	mov	r9, r1
    370a:	0029      	movs	r1, r5
    370c:	0015      	movs	r5, r2
    370e:	4345      	muls	r5, r0
    3710:	444d      	add	r5, r9
    3712:	9502      	str	r5, [sp, #8]
    3714:	4645      	mov	r5, r8
    3716:	0c2d      	lsrs	r5, r5, #16
    3718:	46aa      	mov	sl, r5
    371a:	9d02      	ldr	r5, [sp, #8]
    371c:	4455      	add	r5, sl
    371e:	45a9      	cmp	r9, r5
    3720:	d906      	bls.n	3730 <__aeabi_dmul+0x238>
    3722:	468a      	mov	sl, r1
    3724:	2180      	movs	r1, #128	; 0x80
    3726:	0249      	lsls	r1, r1, #9
    3728:	4689      	mov	r9, r1
    372a:	44ca      	add	sl, r9
    372c:	4651      	mov	r1, sl
    372e:	9103      	str	r1, [sp, #12]
    3730:	0c29      	lsrs	r1, r5, #16
    3732:	9104      	str	r1, [sp, #16]
    3734:	4641      	mov	r1, r8
    3736:	0409      	lsls	r1, r1, #16
    3738:	042d      	lsls	r5, r5, #16
    373a:	0c09      	lsrs	r1, r1, #16
    373c:	4688      	mov	r8, r1
    373e:	0029      	movs	r1, r5
    3740:	0c25      	lsrs	r5, r4, #16
    3742:	0424      	lsls	r4, r4, #16
    3744:	4441      	add	r1, r8
    3746:	0c24      	lsrs	r4, r4, #16
    3748:	9105      	str	r1, [sp, #20]
    374a:	0021      	movs	r1, r4
    374c:	4341      	muls	r1, r0
    374e:	4688      	mov	r8, r1
    3750:	0021      	movs	r1, r4
    3752:	4379      	muls	r1, r7
    3754:	468a      	mov	sl, r1
    3756:	4368      	muls	r0, r5
    3758:	4641      	mov	r1, r8
    375a:	4450      	add	r0, sl
    375c:	4681      	mov	r9, r0
    375e:	0c08      	lsrs	r0, r1, #16
    3760:	4448      	add	r0, r9
    3762:	436f      	muls	r7, r5
    3764:	4582      	cmp	sl, r0
    3766:	d903      	bls.n	3770 <__aeabi_dmul+0x278>
    3768:	2180      	movs	r1, #128	; 0x80
    376a:	0249      	lsls	r1, r1, #9
    376c:	4689      	mov	r9, r1
    376e:	444f      	add	r7, r9
    3770:	0c01      	lsrs	r1, r0, #16
    3772:	4689      	mov	r9, r1
    3774:	0039      	movs	r1, r7
    3776:	4449      	add	r1, r9
    3778:	9102      	str	r1, [sp, #8]
    377a:	4641      	mov	r1, r8
    377c:	040f      	lsls	r7, r1, #16
    377e:	9904      	ldr	r1, [sp, #16]
    3780:	0c3f      	lsrs	r7, r7, #16
    3782:	4688      	mov	r8, r1
    3784:	0400      	lsls	r0, r0, #16
    3786:	19c0      	adds	r0, r0, r7
    3788:	4480      	add	r8, r0
    378a:	4641      	mov	r1, r8
    378c:	9104      	str	r1, [sp, #16]
    378e:	4659      	mov	r1, fp
    3790:	0c0f      	lsrs	r7, r1, #16
    3792:	0409      	lsls	r1, r1, #16
    3794:	0c09      	lsrs	r1, r1, #16
    3796:	4688      	mov	r8, r1
    3798:	4359      	muls	r1, r3
    379a:	468a      	mov	sl, r1
    379c:	0039      	movs	r1, r7
    379e:	4351      	muls	r1, r2
    37a0:	4689      	mov	r9, r1
    37a2:	4641      	mov	r1, r8
    37a4:	434a      	muls	r2, r1
    37a6:	4651      	mov	r1, sl
    37a8:	0c09      	lsrs	r1, r1, #16
    37aa:	468b      	mov	fp, r1
    37ac:	437b      	muls	r3, r7
    37ae:	18d2      	adds	r2, r2, r3
    37b0:	445a      	add	r2, fp
    37b2:	4293      	cmp	r3, r2
    37b4:	d903      	bls.n	37be <__aeabi_dmul+0x2c6>
    37b6:	2380      	movs	r3, #128	; 0x80
    37b8:	025b      	lsls	r3, r3, #9
    37ba:	469b      	mov	fp, r3
    37bc:	44d9      	add	r9, fp
    37be:	4651      	mov	r1, sl
    37c0:	0409      	lsls	r1, r1, #16
    37c2:	0c09      	lsrs	r1, r1, #16
    37c4:	468a      	mov	sl, r1
    37c6:	4641      	mov	r1, r8
    37c8:	4361      	muls	r1, r4
    37ca:	437c      	muls	r4, r7
    37cc:	0c13      	lsrs	r3, r2, #16
    37ce:	0412      	lsls	r2, r2, #16
    37d0:	444b      	add	r3, r9
    37d2:	4452      	add	r2, sl
    37d4:	46a1      	mov	r9, r4
    37d6:	468a      	mov	sl, r1
    37d8:	003c      	movs	r4, r7
    37da:	4641      	mov	r1, r8
    37dc:	436c      	muls	r4, r5
    37de:	434d      	muls	r5, r1
    37e0:	4651      	mov	r1, sl
    37e2:	444d      	add	r5, r9
    37e4:	0c0f      	lsrs	r7, r1, #16
    37e6:	197d      	adds	r5, r7, r5
    37e8:	45a9      	cmp	r9, r5
    37ea:	d903      	bls.n	37f4 <__aeabi_dmul+0x2fc>
    37ec:	2180      	movs	r1, #128	; 0x80
    37ee:	0249      	lsls	r1, r1, #9
    37f0:	4688      	mov	r8, r1
    37f2:	4444      	add	r4, r8
    37f4:	9f04      	ldr	r7, [sp, #16]
    37f6:	9903      	ldr	r1, [sp, #12]
    37f8:	46b8      	mov	r8, r7
    37fa:	4441      	add	r1, r8
    37fc:	468b      	mov	fp, r1
    37fe:	4583      	cmp	fp, r0
    3800:	4180      	sbcs	r0, r0
    3802:	4241      	negs	r1, r0
    3804:	4688      	mov	r8, r1
    3806:	4651      	mov	r1, sl
    3808:	0408      	lsls	r0, r1, #16
    380a:	042f      	lsls	r7, r5, #16
    380c:	0c00      	lsrs	r0, r0, #16
    380e:	183f      	adds	r7, r7, r0
    3810:	4658      	mov	r0, fp
    3812:	9902      	ldr	r1, [sp, #8]
    3814:	1810      	adds	r0, r2, r0
    3816:	4689      	mov	r9, r1
    3818:	4290      	cmp	r0, r2
    381a:	4192      	sbcs	r2, r2
    381c:	444f      	add	r7, r9
    381e:	46ba      	mov	sl, r7
    3820:	4252      	negs	r2, r2
    3822:	4699      	mov	r9, r3
    3824:	4693      	mov	fp, r2
    3826:	44c2      	add	sl, r8
    3828:	44d1      	add	r9, sl
    382a:	44cb      	add	fp, r9
    382c:	428f      	cmp	r7, r1
    382e:	41bf      	sbcs	r7, r7
    3830:	45c2      	cmp	sl, r8
    3832:	4189      	sbcs	r1, r1
    3834:	4599      	cmp	r9, r3
    3836:	419b      	sbcs	r3, r3
    3838:	4593      	cmp	fp, r2
    383a:	4192      	sbcs	r2, r2
    383c:	427f      	negs	r7, r7
    383e:	4249      	negs	r1, r1
    3840:	0c2d      	lsrs	r5, r5, #16
    3842:	4252      	negs	r2, r2
    3844:	430f      	orrs	r7, r1
    3846:	425b      	negs	r3, r3
    3848:	4313      	orrs	r3, r2
    384a:	197f      	adds	r7, r7, r5
    384c:	18ff      	adds	r7, r7, r3
    384e:	465b      	mov	r3, fp
    3850:	193c      	adds	r4, r7, r4
    3852:	0ddb      	lsrs	r3, r3, #23
    3854:	9a05      	ldr	r2, [sp, #20]
    3856:	0264      	lsls	r4, r4, #9
    3858:	431c      	orrs	r4, r3
    385a:	0243      	lsls	r3, r0, #9
    385c:	4313      	orrs	r3, r2
    385e:	1e5d      	subs	r5, r3, #1
    3860:	41ab      	sbcs	r3, r5
    3862:	465a      	mov	r2, fp
    3864:	0dc0      	lsrs	r0, r0, #23
    3866:	4303      	orrs	r3, r0
    3868:	0252      	lsls	r2, r2, #9
    386a:	4313      	orrs	r3, r2
    386c:	01e2      	lsls	r2, r4, #7
    386e:	d556      	bpl.n	391e <__aeabi_dmul+0x426>
    3870:	2001      	movs	r0, #1
    3872:	085a      	lsrs	r2, r3, #1
    3874:	4003      	ands	r3, r0
    3876:	4313      	orrs	r3, r2
    3878:	07e2      	lsls	r2, r4, #31
    387a:	4313      	orrs	r3, r2
    387c:	0864      	lsrs	r4, r4, #1
    387e:	485a      	ldr	r0, [pc, #360]	; (39e8 <__aeabi_dmul+0x4f0>)
    3880:	4460      	add	r0, ip
    3882:	2800      	cmp	r0, #0
    3884:	dd4d      	ble.n	3922 <__aeabi_dmul+0x42a>
    3886:	075a      	lsls	r2, r3, #29
    3888:	d009      	beq.n	389e <__aeabi_dmul+0x3a6>
    388a:	220f      	movs	r2, #15
    388c:	401a      	ands	r2, r3
    388e:	2a04      	cmp	r2, #4
    3890:	d005      	beq.n	389e <__aeabi_dmul+0x3a6>
    3892:	1d1a      	adds	r2, r3, #4
    3894:	429a      	cmp	r2, r3
    3896:	419b      	sbcs	r3, r3
    3898:	425b      	negs	r3, r3
    389a:	18e4      	adds	r4, r4, r3
    389c:	0013      	movs	r3, r2
    389e:	01e2      	lsls	r2, r4, #7
    38a0:	d504      	bpl.n	38ac <__aeabi_dmul+0x3b4>
    38a2:	2080      	movs	r0, #128	; 0x80
    38a4:	4a51      	ldr	r2, [pc, #324]	; (39ec <__aeabi_dmul+0x4f4>)
    38a6:	00c0      	lsls	r0, r0, #3
    38a8:	4014      	ands	r4, r2
    38aa:	4460      	add	r0, ip
    38ac:	4a50      	ldr	r2, [pc, #320]	; (39f0 <__aeabi_dmul+0x4f8>)
    38ae:	4290      	cmp	r0, r2
    38b0:	dd00      	ble.n	38b4 <__aeabi_dmul+0x3bc>
    38b2:	e6e3      	b.n	367c <__aeabi_dmul+0x184>
    38b4:	2501      	movs	r5, #1
    38b6:	08db      	lsrs	r3, r3, #3
    38b8:	0762      	lsls	r2, r4, #29
    38ba:	431a      	orrs	r2, r3
    38bc:	0264      	lsls	r4, r4, #9
    38be:	9b01      	ldr	r3, [sp, #4]
    38c0:	4691      	mov	r9, r2
    38c2:	0b22      	lsrs	r2, r4, #12
    38c4:	0544      	lsls	r4, r0, #21
    38c6:	0d64      	lsrs	r4, r4, #21
    38c8:	401d      	ands	r5, r3
    38ca:	e67c      	b.n	35c6 <__aeabi_dmul+0xce>
    38cc:	2280      	movs	r2, #128	; 0x80
    38ce:	4659      	mov	r1, fp
    38d0:	0312      	lsls	r2, r2, #12
    38d2:	4211      	tst	r1, r2
    38d4:	d008      	beq.n	38e8 <__aeabi_dmul+0x3f0>
    38d6:	4214      	tst	r4, r2
    38d8:	d106      	bne.n	38e8 <__aeabi_dmul+0x3f0>
    38da:	4322      	orrs	r2, r4
    38dc:	0312      	lsls	r2, r2, #12
    38de:	0b12      	lsrs	r2, r2, #12
    38e0:	4645      	mov	r5, r8
    38e2:	4699      	mov	r9, r3
    38e4:	4c43      	ldr	r4, [pc, #268]	; (39f4 <__aeabi_dmul+0x4fc>)
    38e6:	e66e      	b.n	35c6 <__aeabi_dmul+0xce>
    38e8:	465b      	mov	r3, fp
    38ea:	431a      	orrs	r2, r3
    38ec:	0312      	lsls	r2, r2, #12
    38ee:	0b12      	lsrs	r2, r2, #12
    38f0:	4c40      	ldr	r4, [pc, #256]	; (39f4 <__aeabi_dmul+0x4fc>)
    38f2:	e668      	b.n	35c6 <__aeabi_dmul+0xce>
    38f4:	0003      	movs	r3, r0
    38f6:	4654      	mov	r4, sl
    38f8:	3b28      	subs	r3, #40	; 0x28
    38fa:	409c      	lsls	r4, r3
    38fc:	2300      	movs	r3, #0
    38fe:	e6b9      	b.n	3674 <__aeabi_dmul+0x17c>
    3900:	f000 fbfc 	bl	40fc <__clzsi2>
    3904:	3020      	adds	r0, #32
    3906:	e6a6      	b.n	3656 <__aeabi_dmul+0x15e>
    3908:	0003      	movs	r3, r0
    390a:	3b28      	subs	r3, #40	; 0x28
    390c:	409f      	lsls	r7, r3
    390e:	2300      	movs	r3, #0
    3910:	46bb      	mov	fp, r7
    3912:	4699      	mov	r9, r3
    3914:	e68a      	b.n	362c <__aeabi_dmul+0x134>
    3916:	f000 fbf1 	bl	40fc <__clzsi2>
    391a:	3020      	adds	r0, #32
    391c:	e674      	b.n	3608 <__aeabi_dmul+0x110>
    391e:	46b4      	mov	ip, r6
    3920:	e7ad      	b.n	387e <__aeabi_dmul+0x386>
    3922:	2501      	movs	r5, #1
    3924:	1a2a      	subs	r2, r5, r0
    3926:	2a38      	cmp	r2, #56	; 0x38
    3928:	dd06      	ble.n	3938 <__aeabi_dmul+0x440>
    392a:	9b01      	ldr	r3, [sp, #4]
    392c:	2400      	movs	r4, #0
    392e:	401d      	ands	r5, r3
    3930:	2300      	movs	r3, #0
    3932:	2200      	movs	r2, #0
    3934:	4699      	mov	r9, r3
    3936:	e646      	b.n	35c6 <__aeabi_dmul+0xce>
    3938:	2a1f      	cmp	r2, #31
    393a:	dc21      	bgt.n	3980 <__aeabi_dmul+0x488>
    393c:	2520      	movs	r5, #32
    393e:	0020      	movs	r0, r4
    3940:	1aad      	subs	r5, r5, r2
    3942:	001e      	movs	r6, r3
    3944:	40ab      	lsls	r3, r5
    3946:	40a8      	lsls	r0, r5
    3948:	40d6      	lsrs	r6, r2
    394a:	1e5d      	subs	r5, r3, #1
    394c:	41ab      	sbcs	r3, r5
    394e:	4330      	orrs	r0, r6
    3950:	4318      	orrs	r0, r3
    3952:	40d4      	lsrs	r4, r2
    3954:	0743      	lsls	r3, r0, #29
    3956:	d009      	beq.n	396c <__aeabi_dmul+0x474>
    3958:	230f      	movs	r3, #15
    395a:	4003      	ands	r3, r0
    395c:	2b04      	cmp	r3, #4
    395e:	d005      	beq.n	396c <__aeabi_dmul+0x474>
    3960:	0003      	movs	r3, r0
    3962:	1d18      	adds	r0, r3, #4
    3964:	4298      	cmp	r0, r3
    3966:	419b      	sbcs	r3, r3
    3968:	425b      	negs	r3, r3
    396a:	18e4      	adds	r4, r4, r3
    396c:	0223      	lsls	r3, r4, #8
    396e:	d521      	bpl.n	39b4 <__aeabi_dmul+0x4bc>
    3970:	2501      	movs	r5, #1
    3972:	9b01      	ldr	r3, [sp, #4]
    3974:	2401      	movs	r4, #1
    3976:	401d      	ands	r5, r3
    3978:	2300      	movs	r3, #0
    397a:	2200      	movs	r2, #0
    397c:	4699      	mov	r9, r3
    397e:	e622      	b.n	35c6 <__aeabi_dmul+0xce>
    3980:	251f      	movs	r5, #31
    3982:	0021      	movs	r1, r4
    3984:	426d      	negs	r5, r5
    3986:	1a28      	subs	r0, r5, r0
    3988:	40c1      	lsrs	r1, r0
    398a:	0008      	movs	r0, r1
    398c:	2a20      	cmp	r2, #32
    398e:	d01d      	beq.n	39cc <__aeabi_dmul+0x4d4>
    3990:	355f      	adds	r5, #95	; 0x5f
    3992:	1aaa      	subs	r2, r5, r2
    3994:	4094      	lsls	r4, r2
    3996:	4323      	orrs	r3, r4
    3998:	1e5c      	subs	r4, r3, #1
    399a:	41a3      	sbcs	r3, r4
    399c:	2507      	movs	r5, #7
    399e:	4303      	orrs	r3, r0
    39a0:	401d      	ands	r5, r3
    39a2:	2200      	movs	r2, #0
    39a4:	2d00      	cmp	r5, #0
    39a6:	d009      	beq.n	39bc <__aeabi_dmul+0x4c4>
    39a8:	220f      	movs	r2, #15
    39aa:	2400      	movs	r4, #0
    39ac:	401a      	ands	r2, r3
    39ae:	0018      	movs	r0, r3
    39b0:	2a04      	cmp	r2, #4
    39b2:	d1d6      	bne.n	3962 <__aeabi_dmul+0x46a>
    39b4:	0003      	movs	r3, r0
    39b6:	0765      	lsls	r5, r4, #29
    39b8:	0264      	lsls	r4, r4, #9
    39ba:	0b22      	lsrs	r2, r4, #12
    39bc:	08db      	lsrs	r3, r3, #3
    39be:	432b      	orrs	r3, r5
    39c0:	2501      	movs	r5, #1
    39c2:	4699      	mov	r9, r3
    39c4:	9b01      	ldr	r3, [sp, #4]
    39c6:	2400      	movs	r4, #0
    39c8:	401d      	ands	r5, r3
    39ca:	e5fc      	b.n	35c6 <__aeabi_dmul+0xce>
    39cc:	2400      	movs	r4, #0
    39ce:	e7e2      	b.n	3996 <__aeabi_dmul+0x49e>
    39d0:	2280      	movs	r2, #128	; 0x80
    39d2:	2501      	movs	r5, #1
    39d4:	0312      	lsls	r2, r2, #12
    39d6:	4322      	orrs	r2, r4
    39d8:	9901      	ldr	r1, [sp, #4]
    39da:	0312      	lsls	r2, r2, #12
    39dc:	0b12      	lsrs	r2, r2, #12
    39de:	400d      	ands	r5, r1
    39e0:	4699      	mov	r9, r3
    39e2:	4c04      	ldr	r4, [pc, #16]	; (39f4 <__aeabi_dmul+0x4fc>)
    39e4:	e5ef      	b.n	35c6 <__aeabi_dmul+0xce>
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	000003ff 	.word	0x000003ff
    39ec:	feffffff 	.word	0xfeffffff
    39f0:	000007fe 	.word	0x000007fe
    39f4:	000007ff 	.word	0x000007ff

000039f8 <__aeabi_dsub>:
    39f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39fa:	4646      	mov	r6, r8
    39fc:	46d6      	mov	lr, sl
    39fe:	464f      	mov	r7, r9
    3a00:	030c      	lsls	r4, r1, #12
    3a02:	b5c0      	push	{r6, r7, lr}
    3a04:	0fcd      	lsrs	r5, r1, #31
    3a06:	004e      	lsls	r6, r1, #1
    3a08:	0a61      	lsrs	r1, r4, #9
    3a0a:	0f44      	lsrs	r4, r0, #29
    3a0c:	430c      	orrs	r4, r1
    3a0e:	00c1      	lsls	r1, r0, #3
    3a10:	0058      	lsls	r0, r3, #1
    3a12:	0d40      	lsrs	r0, r0, #21
    3a14:	4684      	mov	ip, r0
    3a16:	468a      	mov	sl, r1
    3a18:	000f      	movs	r7, r1
    3a1a:	0319      	lsls	r1, r3, #12
    3a1c:	0f50      	lsrs	r0, r2, #29
    3a1e:	0a49      	lsrs	r1, r1, #9
    3a20:	4301      	orrs	r1, r0
    3a22:	48c6      	ldr	r0, [pc, #792]	; (3d3c <__aeabi_dsub+0x344>)
    3a24:	0d76      	lsrs	r6, r6, #21
    3a26:	46a8      	mov	r8, r5
    3a28:	0fdb      	lsrs	r3, r3, #31
    3a2a:	00d2      	lsls	r2, r2, #3
    3a2c:	4584      	cmp	ip, r0
    3a2e:	d100      	bne.n	3a32 <__aeabi_dsub+0x3a>
    3a30:	e0d8      	b.n	3be4 <__aeabi_dsub+0x1ec>
    3a32:	2001      	movs	r0, #1
    3a34:	4043      	eors	r3, r0
    3a36:	42ab      	cmp	r3, r5
    3a38:	d100      	bne.n	3a3c <__aeabi_dsub+0x44>
    3a3a:	e0a6      	b.n	3b8a <__aeabi_dsub+0x192>
    3a3c:	4660      	mov	r0, ip
    3a3e:	1a35      	subs	r5, r6, r0
    3a40:	2d00      	cmp	r5, #0
    3a42:	dc00      	bgt.n	3a46 <__aeabi_dsub+0x4e>
    3a44:	e105      	b.n	3c52 <__aeabi_dsub+0x25a>
    3a46:	2800      	cmp	r0, #0
    3a48:	d110      	bne.n	3a6c <__aeabi_dsub+0x74>
    3a4a:	000b      	movs	r3, r1
    3a4c:	4313      	orrs	r3, r2
    3a4e:	d100      	bne.n	3a52 <__aeabi_dsub+0x5a>
    3a50:	e0d7      	b.n	3c02 <__aeabi_dsub+0x20a>
    3a52:	1e6b      	subs	r3, r5, #1
    3a54:	2b00      	cmp	r3, #0
    3a56:	d000      	beq.n	3a5a <__aeabi_dsub+0x62>
    3a58:	e14b      	b.n	3cf2 <__aeabi_dsub+0x2fa>
    3a5a:	4653      	mov	r3, sl
    3a5c:	1a9f      	subs	r7, r3, r2
    3a5e:	45ba      	cmp	sl, r7
    3a60:	4180      	sbcs	r0, r0
    3a62:	1a64      	subs	r4, r4, r1
    3a64:	4240      	negs	r0, r0
    3a66:	1a24      	subs	r4, r4, r0
    3a68:	2601      	movs	r6, #1
    3a6a:	e01e      	b.n	3aaa <__aeabi_dsub+0xb2>
    3a6c:	4bb3      	ldr	r3, [pc, #716]	; (3d3c <__aeabi_dsub+0x344>)
    3a6e:	429e      	cmp	r6, r3
    3a70:	d048      	beq.n	3b04 <__aeabi_dsub+0x10c>
    3a72:	2380      	movs	r3, #128	; 0x80
    3a74:	041b      	lsls	r3, r3, #16
    3a76:	4319      	orrs	r1, r3
    3a78:	2d38      	cmp	r5, #56	; 0x38
    3a7a:	dd00      	ble.n	3a7e <__aeabi_dsub+0x86>
    3a7c:	e119      	b.n	3cb2 <__aeabi_dsub+0x2ba>
    3a7e:	2d1f      	cmp	r5, #31
    3a80:	dd00      	ble.n	3a84 <__aeabi_dsub+0x8c>
    3a82:	e14c      	b.n	3d1e <__aeabi_dsub+0x326>
    3a84:	2320      	movs	r3, #32
    3a86:	000f      	movs	r7, r1
    3a88:	1b5b      	subs	r3, r3, r5
    3a8a:	0010      	movs	r0, r2
    3a8c:	409a      	lsls	r2, r3
    3a8e:	409f      	lsls	r7, r3
    3a90:	40e8      	lsrs	r0, r5
    3a92:	1e53      	subs	r3, r2, #1
    3a94:	419a      	sbcs	r2, r3
    3a96:	40e9      	lsrs	r1, r5
    3a98:	4307      	orrs	r7, r0
    3a9a:	4317      	orrs	r7, r2
    3a9c:	4653      	mov	r3, sl
    3a9e:	1bdf      	subs	r7, r3, r7
    3aa0:	1a61      	subs	r1, r4, r1
    3aa2:	45ba      	cmp	sl, r7
    3aa4:	41a4      	sbcs	r4, r4
    3aa6:	4264      	negs	r4, r4
    3aa8:	1b0c      	subs	r4, r1, r4
    3aaa:	0223      	lsls	r3, r4, #8
    3aac:	d400      	bmi.n	3ab0 <__aeabi_dsub+0xb8>
    3aae:	e0c5      	b.n	3c3c <__aeabi_dsub+0x244>
    3ab0:	0264      	lsls	r4, r4, #9
    3ab2:	0a65      	lsrs	r5, r4, #9
    3ab4:	2d00      	cmp	r5, #0
    3ab6:	d100      	bne.n	3aba <__aeabi_dsub+0xc2>
    3ab8:	e0f6      	b.n	3ca8 <__aeabi_dsub+0x2b0>
    3aba:	0028      	movs	r0, r5
    3abc:	f000 fb1e 	bl	40fc <__clzsi2>
    3ac0:	0003      	movs	r3, r0
    3ac2:	3b08      	subs	r3, #8
    3ac4:	2b1f      	cmp	r3, #31
    3ac6:	dd00      	ble.n	3aca <__aeabi_dsub+0xd2>
    3ac8:	e0e9      	b.n	3c9e <__aeabi_dsub+0x2a6>
    3aca:	2220      	movs	r2, #32
    3acc:	003c      	movs	r4, r7
    3ace:	1ad2      	subs	r2, r2, r3
    3ad0:	409d      	lsls	r5, r3
    3ad2:	40d4      	lsrs	r4, r2
    3ad4:	409f      	lsls	r7, r3
    3ad6:	4325      	orrs	r5, r4
    3ad8:	429e      	cmp	r6, r3
    3ada:	dd00      	ble.n	3ade <__aeabi_dsub+0xe6>
    3adc:	e0db      	b.n	3c96 <__aeabi_dsub+0x29e>
    3ade:	1b9e      	subs	r6, r3, r6
    3ae0:	1c73      	adds	r3, r6, #1
    3ae2:	2b1f      	cmp	r3, #31
    3ae4:	dd00      	ble.n	3ae8 <__aeabi_dsub+0xf0>
    3ae6:	e10a      	b.n	3cfe <__aeabi_dsub+0x306>
    3ae8:	2220      	movs	r2, #32
    3aea:	0038      	movs	r0, r7
    3aec:	1ad2      	subs	r2, r2, r3
    3aee:	0029      	movs	r1, r5
    3af0:	4097      	lsls	r7, r2
    3af2:	002c      	movs	r4, r5
    3af4:	4091      	lsls	r1, r2
    3af6:	40d8      	lsrs	r0, r3
    3af8:	1e7a      	subs	r2, r7, #1
    3afa:	4197      	sbcs	r7, r2
    3afc:	40dc      	lsrs	r4, r3
    3afe:	2600      	movs	r6, #0
    3b00:	4301      	orrs	r1, r0
    3b02:	430f      	orrs	r7, r1
    3b04:	077b      	lsls	r3, r7, #29
    3b06:	d009      	beq.n	3b1c <__aeabi_dsub+0x124>
    3b08:	230f      	movs	r3, #15
    3b0a:	403b      	ands	r3, r7
    3b0c:	2b04      	cmp	r3, #4
    3b0e:	d005      	beq.n	3b1c <__aeabi_dsub+0x124>
    3b10:	1d3b      	adds	r3, r7, #4
    3b12:	42bb      	cmp	r3, r7
    3b14:	41bf      	sbcs	r7, r7
    3b16:	427f      	negs	r7, r7
    3b18:	19e4      	adds	r4, r4, r7
    3b1a:	001f      	movs	r7, r3
    3b1c:	0223      	lsls	r3, r4, #8
    3b1e:	d525      	bpl.n	3b6c <__aeabi_dsub+0x174>
    3b20:	4b86      	ldr	r3, [pc, #536]	; (3d3c <__aeabi_dsub+0x344>)
    3b22:	3601      	adds	r6, #1
    3b24:	429e      	cmp	r6, r3
    3b26:	d100      	bne.n	3b2a <__aeabi_dsub+0x132>
    3b28:	e0af      	b.n	3c8a <__aeabi_dsub+0x292>
    3b2a:	4b85      	ldr	r3, [pc, #532]	; (3d40 <__aeabi_dsub+0x348>)
    3b2c:	2501      	movs	r5, #1
    3b2e:	401c      	ands	r4, r3
    3b30:	4643      	mov	r3, r8
    3b32:	0762      	lsls	r2, r4, #29
    3b34:	08ff      	lsrs	r7, r7, #3
    3b36:	0264      	lsls	r4, r4, #9
    3b38:	0576      	lsls	r6, r6, #21
    3b3a:	4317      	orrs	r7, r2
    3b3c:	0b24      	lsrs	r4, r4, #12
    3b3e:	0d76      	lsrs	r6, r6, #21
    3b40:	401d      	ands	r5, r3
    3b42:	2100      	movs	r1, #0
    3b44:	0324      	lsls	r4, r4, #12
    3b46:	0b23      	lsrs	r3, r4, #12
    3b48:	0d0c      	lsrs	r4, r1, #20
    3b4a:	4a7e      	ldr	r2, [pc, #504]	; (3d44 <__aeabi_dsub+0x34c>)
    3b4c:	0524      	lsls	r4, r4, #20
    3b4e:	431c      	orrs	r4, r3
    3b50:	4014      	ands	r4, r2
    3b52:	0533      	lsls	r3, r6, #20
    3b54:	4323      	orrs	r3, r4
    3b56:	005b      	lsls	r3, r3, #1
    3b58:	07ed      	lsls	r5, r5, #31
    3b5a:	085b      	lsrs	r3, r3, #1
    3b5c:	432b      	orrs	r3, r5
    3b5e:	0038      	movs	r0, r7
    3b60:	0019      	movs	r1, r3
    3b62:	bc1c      	pop	{r2, r3, r4}
    3b64:	4690      	mov	r8, r2
    3b66:	4699      	mov	r9, r3
    3b68:	46a2      	mov	sl, r4
    3b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b6c:	2501      	movs	r5, #1
    3b6e:	4643      	mov	r3, r8
    3b70:	0762      	lsls	r2, r4, #29
    3b72:	08ff      	lsrs	r7, r7, #3
    3b74:	4317      	orrs	r7, r2
    3b76:	08e4      	lsrs	r4, r4, #3
    3b78:	401d      	ands	r5, r3
    3b7a:	4b70      	ldr	r3, [pc, #448]	; (3d3c <__aeabi_dsub+0x344>)
    3b7c:	429e      	cmp	r6, r3
    3b7e:	d036      	beq.n	3bee <__aeabi_dsub+0x1f6>
    3b80:	0324      	lsls	r4, r4, #12
    3b82:	0576      	lsls	r6, r6, #21
    3b84:	0b24      	lsrs	r4, r4, #12
    3b86:	0d76      	lsrs	r6, r6, #21
    3b88:	e7db      	b.n	3b42 <__aeabi_dsub+0x14a>
    3b8a:	4663      	mov	r3, ip
    3b8c:	1af3      	subs	r3, r6, r3
    3b8e:	2b00      	cmp	r3, #0
    3b90:	dc00      	bgt.n	3b94 <__aeabi_dsub+0x19c>
    3b92:	e094      	b.n	3cbe <__aeabi_dsub+0x2c6>
    3b94:	4660      	mov	r0, ip
    3b96:	2800      	cmp	r0, #0
    3b98:	d035      	beq.n	3c06 <__aeabi_dsub+0x20e>
    3b9a:	4868      	ldr	r0, [pc, #416]	; (3d3c <__aeabi_dsub+0x344>)
    3b9c:	4286      	cmp	r6, r0
    3b9e:	d0b1      	beq.n	3b04 <__aeabi_dsub+0x10c>
    3ba0:	2780      	movs	r7, #128	; 0x80
    3ba2:	043f      	lsls	r7, r7, #16
    3ba4:	4339      	orrs	r1, r7
    3ba6:	2b38      	cmp	r3, #56	; 0x38
    3ba8:	dc00      	bgt.n	3bac <__aeabi_dsub+0x1b4>
    3baa:	e0fd      	b.n	3da8 <__aeabi_dsub+0x3b0>
    3bac:	430a      	orrs	r2, r1
    3bae:	0017      	movs	r7, r2
    3bb0:	2100      	movs	r1, #0
    3bb2:	1e7a      	subs	r2, r7, #1
    3bb4:	4197      	sbcs	r7, r2
    3bb6:	4457      	add	r7, sl
    3bb8:	4557      	cmp	r7, sl
    3bba:	4180      	sbcs	r0, r0
    3bbc:	1909      	adds	r1, r1, r4
    3bbe:	4244      	negs	r4, r0
    3bc0:	190c      	adds	r4, r1, r4
    3bc2:	0223      	lsls	r3, r4, #8
    3bc4:	d53a      	bpl.n	3c3c <__aeabi_dsub+0x244>
    3bc6:	4b5d      	ldr	r3, [pc, #372]	; (3d3c <__aeabi_dsub+0x344>)
    3bc8:	3601      	adds	r6, #1
    3bca:	429e      	cmp	r6, r3
    3bcc:	d100      	bne.n	3bd0 <__aeabi_dsub+0x1d8>
    3bce:	e14b      	b.n	3e68 <__aeabi_dsub+0x470>
    3bd0:	2201      	movs	r2, #1
    3bd2:	4b5b      	ldr	r3, [pc, #364]	; (3d40 <__aeabi_dsub+0x348>)
    3bd4:	401c      	ands	r4, r3
    3bd6:	087b      	lsrs	r3, r7, #1
    3bd8:	4017      	ands	r7, r2
    3bda:	431f      	orrs	r7, r3
    3bdc:	07e2      	lsls	r2, r4, #31
    3bde:	4317      	orrs	r7, r2
    3be0:	0864      	lsrs	r4, r4, #1
    3be2:	e78f      	b.n	3b04 <__aeabi_dsub+0x10c>
    3be4:	0008      	movs	r0, r1
    3be6:	4310      	orrs	r0, r2
    3be8:	d000      	beq.n	3bec <__aeabi_dsub+0x1f4>
    3bea:	e724      	b.n	3a36 <__aeabi_dsub+0x3e>
    3bec:	e721      	b.n	3a32 <__aeabi_dsub+0x3a>
    3bee:	0023      	movs	r3, r4
    3bf0:	433b      	orrs	r3, r7
    3bf2:	d100      	bne.n	3bf6 <__aeabi_dsub+0x1fe>
    3bf4:	e1b9      	b.n	3f6a <__aeabi_dsub+0x572>
    3bf6:	2280      	movs	r2, #128	; 0x80
    3bf8:	0312      	lsls	r2, r2, #12
    3bfa:	4314      	orrs	r4, r2
    3bfc:	0324      	lsls	r4, r4, #12
    3bfe:	0b24      	lsrs	r4, r4, #12
    3c00:	e79f      	b.n	3b42 <__aeabi_dsub+0x14a>
    3c02:	002e      	movs	r6, r5
    3c04:	e77e      	b.n	3b04 <__aeabi_dsub+0x10c>
    3c06:	0008      	movs	r0, r1
    3c08:	4310      	orrs	r0, r2
    3c0a:	d100      	bne.n	3c0e <__aeabi_dsub+0x216>
    3c0c:	e0ca      	b.n	3da4 <__aeabi_dsub+0x3ac>
    3c0e:	1e58      	subs	r0, r3, #1
    3c10:	4684      	mov	ip, r0
    3c12:	2800      	cmp	r0, #0
    3c14:	d000      	beq.n	3c18 <__aeabi_dsub+0x220>
    3c16:	e0e7      	b.n	3de8 <__aeabi_dsub+0x3f0>
    3c18:	4452      	add	r2, sl
    3c1a:	4552      	cmp	r2, sl
    3c1c:	4180      	sbcs	r0, r0
    3c1e:	1864      	adds	r4, r4, r1
    3c20:	4240      	negs	r0, r0
    3c22:	1824      	adds	r4, r4, r0
    3c24:	0017      	movs	r7, r2
    3c26:	2601      	movs	r6, #1
    3c28:	0223      	lsls	r3, r4, #8
    3c2a:	d507      	bpl.n	3c3c <__aeabi_dsub+0x244>
    3c2c:	2602      	movs	r6, #2
    3c2e:	e7cf      	b.n	3bd0 <__aeabi_dsub+0x1d8>
    3c30:	4664      	mov	r4, ip
    3c32:	432c      	orrs	r4, r5
    3c34:	d100      	bne.n	3c38 <__aeabi_dsub+0x240>
    3c36:	e1b3      	b.n	3fa0 <__aeabi_dsub+0x5a8>
    3c38:	002c      	movs	r4, r5
    3c3a:	4667      	mov	r7, ip
    3c3c:	077b      	lsls	r3, r7, #29
    3c3e:	d000      	beq.n	3c42 <__aeabi_dsub+0x24a>
    3c40:	e762      	b.n	3b08 <__aeabi_dsub+0x110>
    3c42:	0763      	lsls	r3, r4, #29
    3c44:	08ff      	lsrs	r7, r7, #3
    3c46:	431f      	orrs	r7, r3
    3c48:	2501      	movs	r5, #1
    3c4a:	4643      	mov	r3, r8
    3c4c:	08e4      	lsrs	r4, r4, #3
    3c4e:	401d      	ands	r5, r3
    3c50:	e793      	b.n	3b7a <__aeabi_dsub+0x182>
    3c52:	2d00      	cmp	r5, #0
    3c54:	d178      	bne.n	3d48 <__aeabi_dsub+0x350>
    3c56:	1c75      	adds	r5, r6, #1
    3c58:	056d      	lsls	r5, r5, #21
    3c5a:	0d6d      	lsrs	r5, r5, #21
    3c5c:	2d01      	cmp	r5, #1
    3c5e:	dc00      	bgt.n	3c62 <__aeabi_dsub+0x26a>
    3c60:	e0f2      	b.n	3e48 <__aeabi_dsub+0x450>
    3c62:	4650      	mov	r0, sl
    3c64:	1a80      	subs	r0, r0, r2
    3c66:	4582      	cmp	sl, r0
    3c68:	41bf      	sbcs	r7, r7
    3c6a:	1a65      	subs	r5, r4, r1
    3c6c:	427f      	negs	r7, r7
    3c6e:	1bed      	subs	r5, r5, r7
    3c70:	4684      	mov	ip, r0
    3c72:	0228      	lsls	r0, r5, #8
    3c74:	d400      	bmi.n	3c78 <__aeabi_dsub+0x280>
    3c76:	e08c      	b.n	3d92 <__aeabi_dsub+0x39a>
    3c78:	4650      	mov	r0, sl
    3c7a:	1a17      	subs	r7, r2, r0
    3c7c:	42ba      	cmp	r2, r7
    3c7e:	4192      	sbcs	r2, r2
    3c80:	1b0c      	subs	r4, r1, r4
    3c82:	4255      	negs	r5, r2
    3c84:	1b65      	subs	r5, r4, r5
    3c86:	4698      	mov	r8, r3
    3c88:	e714      	b.n	3ab4 <__aeabi_dsub+0xbc>
    3c8a:	2501      	movs	r5, #1
    3c8c:	4643      	mov	r3, r8
    3c8e:	2400      	movs	r4, #0
    3c90:	401d      	ands	r5, r3
    3c92:	2700      	movs	r7, #0
    3c94:	e755      	b.n	3b42 <__aeabi_dsub+0x14a>
    3c96:	4c2a      	ldr	r4, [pc, #168]	; (3d40 <__aeabi_dsub+0x348>)
    3c98:	1af6      	subs	r6, r6, r3
    3c9a:	402c      	ands	r4, r5
    3c9c:	e732      	b.n	3b04 <__aeabi_dsub+0x10c>
    3c9e:	003d      	movs	r5, r7
    3ca0:	3828      	subs	r0, #40	; 0x28
    3ca2:	4085      	lsls	r5, r0
    3ca4:	2700      	movs	r7, #0
    3ca6:	e717      	b.n	3ad8 <__aeabi_dsub+0xe0>
    3ca8:	0038      	movs	r0, r7
    3caa:	f000 fa27 	bl	40fc <__clzsi2>
    3cae:	3020      	adds	r0, #32
    3cb0:	e706      	b.n	3ac0 <__aeabi_dsub+0xc8>
    3cb2:	430a      	orrs	r2, r1
    3cb4:	0017      	movs	r7, r2
    3cb6:	2100      	movs	r1, #0
    3cb8:	1e7a      	subs	r2, r7, #1
    3cba:	4197      	sbcs	r7, r2
    3cbc:	e6ee      	b.n	3a9c <__aeabi_dsub+0xa4>
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d000      	beq.n	3cc4 <__aeabi_dsub+0x2cc>
    3cc2:	e0e5      	b.n	3e90 <__aeabi_dsub+0x498>
    3cc4:	1c73      	adds	r3, r6, #1
    3cc6:	469c      	mov	ip, r3
    3cc8:	055b      	lsls	r3, r3, #21
    3cca:	0d5b      	lsrs	r3, r3, #21
    3ccc:	2b01      	cmp	r3, #1
    3cce:	dc00      	bgt.n	3cd2 <__aeabi_dsub+0x2da>
    3cd0:	e09f      	b.n	3e12 <__aeabi_dsub+0x41a>
    3cd2:	4b1a      	ldr	r3, [pc, #104]	; (3d3c <__aeabi_dsub+0x344>)
    3cd4:	459c      	cmp	ip, r3
    3cd6:	d100      	bne.n	3cda <__aeabi_dsub+0x2e2>
    3cd8:	e0c5      	b.n	3e66 <__aeabi_dsub+0x46e>
    3cda:	4452      	add	r2, sl
    3cdc:	4552      	cmp	r2, sl
    3cde:	4180      	sbcs	r0, r0
    3ce0:	1864      	adds	r4, r4, r1
    3ce2:	4240      	negs	r0, r0
    3ce4:	1824      	adds	r4, r4, r0
    3ce6:	07e7      	lsls	r7, r4, #31
    3ce8:	0852      	lsrs	r2, r2, #1
    3cea:	4317      	orrs	r7, r2
    3cec:	0864      	lsrs	r4, r4, #1
    3cee:	4666      	mov	r6, ip
    3cf0:	e708      	b.n	3b04 <__aeabi_dsub+0x10c>
    3cf2:	4812      	ldr	r0, [pc, #72]	; (3d3c <__aeabi_dsub+0x344>)
    3cf4:	4285      	cmp	r5, r0
    3cf6:	d100      	bne.n	3cfa <__aeabi_dsub+0x302>
    3cf8:	e085      	b.n	3e06 <__aeabi_dsub+0x40e>
    3cfa:	001d      	movs	r5, r3
    3cfc:	e6bc      	b.n	3a78 <__aeabi_dsub+0x80>
    3cfe:	0029      	movs	r1, r5
    3d00:	3e1f      	subs	r6, #31
    3d02:	40f1      	lsrs	r1, r6
    3d04:	2b20      	cmp	r3, #32
    3d06:	d100      	bne.n	3d0a <__aeabi_dsub+0x312>
    3d08:	e07f      	b.n	3e0a <__aeabi_dsub+0x412>
    3d0a:	2240      	movs	r2, #64	; 0x40
    3d0c:	1ad3      	subs	r3, r2, r3
    3d0e:	409d      	lsls	r5, r3
    3d10:	432f      	orrs	r7, r5
    3d12:	1e7d      	subs	r5, r7, #1
    3d14:	41af      	sbcs	r7, r5
    3d16:	2400      	movs	r4, #0
    3d18:	430f      	orrs	r7, r1
    3d1a:	2600      	movs	r6, #0
    3d1c:	e78e      	b.n	3c3c <__aeabi_dsub+0x244>
    3d1e:	002b      	movs	r3, r5
    3d20:	000f      	movs	r7, r1
    3d22:	3b20      	subs	r3, #32
    3d24:	40df      	lsrs	r7, r3
    3d26:	2d20      	cmp	r5, #32
    3d28:	d071      	beq.n	3e0e <__aeabi_dsub+0x416>
    3d2a:	2340      	movs	r3, #64	; 0x40
    3d2c:	1b5d      	subs	r5, r3, r5
    3d2e:	40a9      	lsls	r1, r5
    3d30:	430a      	orrs	r2, r1
    3d32:	1e51      	subs	r1, r2, #1
    3d34:	418a      	sbcs	r2, r1
    3d36:	2100      	movs	r1, #0
    3d38:	4317      	orrs	r7, r2
    3d3a:	e6af      	b.n	3a9c <__aeabi_dsub+0xa4>
    3d3c:	000007ff 	.word	0x000007ff
    3d40:	ff7fffff 	.word	0xff7fffff
    3d44:	800fffff 	.word	0x800fffff
    3d48:	2e00      	cmp	r6, #0
    3d4a:	d03e      	beq.n	3dca <__aeabi_dsub+0x3d2>
    3d4c:	4eb3      	ldr	r6, [pc, #716]	; (401c <__aeabi_dsub+0x624>)
    3d4e:	45b4      	cmp	ip, r6
    3d50:	d045      	beq.n	3dde <__aeabi_dsub+0x3e6>
    3d52:	2680      	movs	r6, #128	; 0x80
    3d54:	0436      	lsls	r6, r6, #16
    3d56:	426d      	negs	r5, r5
    3d58:	4334      	orrs	r4, r6
    3d5a:	2d38      	cmp	r5, #56	; 0x38
    3d5c:	dd00      	ble.n	3d60 <__aeabi_dsub+0x368>
    3d5e:	e0a8      	b.n	3eb2 <__aeabi_dsub+0x4ba>
    3d60:	2d1f      	cmp	r5, #31
    3d62:	dd00      	ble.n	3d66 <__aeabi_dsub+0x36e>
    3d64:	e11f      	b.n	3fa6 <__aeabi_dsub+0x5ae>
    3d66:	2620      	movs	r6, #32
    3d68:	0027      	movs	r7, r4
    3d6a:	4650      	mov	r0, sl
    3d6c:	1b76      	subs	r6, r6, r5
    3d6e:	40b7      	lsls	r7, r6
    3d70:	40e8      	lsrs	r0, r5
    3d72:	4307      	orrs	r7, r0
    3d74:	4650      	mov	r0, sl
    3d76:	40b0      	lsls	r0, r6
    3d78:	1e46      	subs	r6, r0, #1
    3d7a:	41b0      	sbcs	r0, r6
    3d7c:	40ec      	lsrs	r4, r5
    3d7e:	4338      	orrs	r0, r7
    3d80:	1a17      	subs	r7, r2, r0
    3d82:	42ba      	cmp	r2, r7
    3d84:	4192      	sbcs	r2, r2
    3d86:	1b0c      	subs	r4, r1, r4
    3d88:	4252      	negs	r2, r2
    3d8a:	1aa4      	subs	r4, r4, r2
    3d8c:	4666      	mov	r6, ip
    3d8e:	4698      	mov	r8, r3
    3d90:	e68b      	b.n	3aaa <__aeabi_dsub+0xb2>
    3d92:	4664      	mov	r4, ip
    3d94:	4667      	mov	r7, ip
    3d96:	432c      	orrs	r4, r5
    3d98:	d000      	beq.n	3d9c <__aeabi_dsub+0x3a4>
    3d9a:	e68b      	b.n	3ab4 <__aeabi_dsub+0xbc>
    3d9c:	2500      	movs	r5, #0
    3d9e:	2600      	movs	r6, #0
    3da0:	2700      	movs	r7, #0
    3da2:	e6ea      	b.n	3b7a <__aeabi_dsub+0x182>
    3da4:	001e      	movs	r6, r3
    3da6:	e6ad      	b.n	3b04 <__aeabi_dsub+0x10c>
    3da8:	2b1f      	cmp	r3, #31
    3daa:	dc60      	bgt.n	3e6e <__aeabi_dsub+0x476>
    3dac:	2720      	movs	r7, #32
    3dae:	1af8      	subs	r0, r7, r3
    3db0:	000f      	movs	r7, r1
    3db2:	4684      	mov	ip, r0
    3db4:	4087      	lsls	r7, r0
    3db6:	0010      	movs	r0, r2
    3db8:	40d8      	lsrs	r0, r3
    3dba:	4307      	orrs	r7, r0
    3dbc:	4660      	mov	r0, ip
    3dbe:	4082      	lsls	r2, r0
    3dc0:	1e50      	subs	r0, r2, #1
    3dc2:	4182      	sbcs	r2, r0
    3dc4:	40d9      	lsrs	r1, r3
    3dc6:	4317      	orrs	r7, r2
    3dc8:	e6f5      	b.n	3bb6 <__aeabi_dsub+0x1be>
    3dca:	0026      	movs	r6, r4
    3dcc:	4650      	mov	r0, sl
    3dce:	4306      	orrs	r6, r0
    3dd0:	d005      	beq.n	3dde <__aeabi_dsub+0x3e6>
    3dd2:	43ed      	mvns	r5, r5
    3dd4:	2d00      	cmp	r5, #0
    3dd6:	d0d3      	beq.n	3d80 <__aeabi_dsub+0x388>
    3dd8:	4e90      	ldr	r6, [pc, #576]	; (401c <__aeabi_dsub+0x624>)
    3dda:	45b4      	cmp	ip, r6
    3ddc:	d1bd      	bne.n	3d5a <__aeabi_dsub+0x362>
    3dde:	000c      	movs	r4, r1
    3de0:	0017      	movs	r7, r2
    3de2:	4666      	mov	r6, ip
    3de4:	4698      	mov	r8, r3
    3de6:	e68d      	b.n	3b04 <__aeabi_dsub+0x10c>
    3de8:	488c      	ldr	r0, [pc, #560]	; (401c <__aeabi_dsub+0x624>)
    3dea:	4283      	cmp	r3, r0
    3dec:	d00b      	beq.n	3e06 <__aeabi_dsub+0x40e>
    3dee:	4663      	mov	r3, ip
    3df0:	e6d9      	b.n	3ba6 <__aeabi_dsub+0x1ae>
    3df2:	2d00      	cmp	r5, #0
    3df4:	d000      	beq.n	3df8 <__aeabi_dsub+0x400>
    3df6:	e096      	b.n	3f26 <__aeabi_dsub+0x52e>
    3df8:	0008      	movs	r0, r1
    3dfa:	4310      	orrs	r0, r2
    3dfc:	d100      	bne.n	3e00 <__aeabi_dsub+0x408>
    3dfe:	e0e2      	b.n	3fc6 <__aeabi_dsub+0x5ce>
    3e00:	000c      	movs	r4, r1
    3e02:	0017      	movs	r7, r2
    3e04:	4698      	mov	r8, r3
    3e06:	4e85      	ldr	r6, [pc, #532]	; (401c <__aeabi_dsub+0x624>)
    3e08:	e67c      	b.n	3b04 <__aeabi_dsub+0x10c>
    3e0a:	2500      	movs	r5, #0
    3e0c:	e780      	b.n	3d10 <__aeabi_dsub+0x318>
    3e0e:	2100      	movs	r1, #0
    3e10:	e78e      	b.n	3d30 <__aeabi_dsub+0x338>
    3e12:	0023      	movs	r3, r4
    3e14:	4650      	mov	r0, sl
    3e16:	4303      	orrs	r3, r0
    3e18:	2e00      	cmp	r6, #0
    3e1a:	d000      	beq.n	3e1e <__aeabi_dsub+0x426>
    3e1c:	e0a8      	b.n	3f70 <__aeabi_dsub+0x578>
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d100      	bne.n	3e24 <__aeabi_dsub+0x42c>
    3e22:	e0de      	b.n	3fe2 <__aeabi_dsub+0x5ea>
    3e24:	000b      	movs	r3, r1
    3e26:	4313      	orrs	r3, r2
    3e28:	d100      	bne.n	3e2c <__aeabi_dsub+0x434>
    3e2a:	e66b      	b.n	3b04 <__aeabi_dsub+0x10c>
    3e2c:	4452      	add	r2, sl
    3e2e:	4552      	cmp	r2, sl
    3e30:	4180      	sbcs	r0, r0
    3e32:	1864      	adds	r4, r4, r1
    3e34:	4240      	negs	r0, r0
    3e36:	1824      	adds	r4, r4, r0
    3e38:	0017      	movs	r7, r2
    3e3a:	0223      	lsls	r3, r4, #8
    3e3c:	d400      	bmi.n	3e40 <__aeabi_dsub+0x448>
    3e3e:	e6fd      	b.n	3c3c <__aeabi_dsub+0x244>
    3e40:	4b77      	ldr	r3, [pc, #476]	; (4020 <__aeabi_dsub+0x628>)
    3e42:	4666      	mov	r6, ip
    3e44:	401c      	ands	r4, r3
    3e46:	e65d      	b.n	3b04 <__aeabi_dsub+0x10c>
    3e48:	0025      	movs	r5, r4
    3e4a:	4650      	mov	r0, sl
    3e4c:	4305      	orrs	r5, r0
    3e4e:	2e00      	cmp	r6, #0
    3e50:	d1cf      	bne.n	3df2 <__aeabi_dsub+0x3fa>
    3e52:	2d00      	cmp	r5, #0
    3e54:	d14f      	bne.n	3ef6 <__aeabi_dsub+0x4fe>
    3e56:	000c      	movs	r4, r1
    3e58:	4314      	orrs	r4, r2
    3e5a:	d100      	bne.n	3e5e <__aeabi_dsub+0x466>
    3e5c:	e0a0      	b.n	3fa0 <__aeabi_dsub+0x5a8>
    3e5e:	000c      	movs	r4, r1
    3e60:	0017      	movs	r7, r2
    3e62:	4698      	mov	r8, r3
    3e64:	e64e      	b.n	3b04 <__aeabi_dsub+0x10c>
    3e66:	4666      	mov	r6, ip
    3e68:	2400      	movs	r4, #0
    3e6a:	2700      	movs	r7, #0
    3e6c:	e685      	b.n	3b7a <__aeabi_dsub+0x182>
    3e6e:	001f      	movs	r7, r3
    3e70:	0008      	movs	r0, r1
    3e72:	3f20      	subs	r7, #32
    3e74:	40f8      	lsrs	r0, r7
    3e76:	0007      	movs	r7, r0
    3e78:	2b20      	cmp	r3, #32
    3e7a:	d100      	bne.n	3e7e <__aeabi_dsub+0x486>
    3e7c:	e08e      	b.n	3f9c <__aeabi_dsub+0x5a4>
    3e7e:	2040      	movs	r0, #64	; 0x40
    3e80:	1ac3      	subs	r3, r0, r3
    3e82:	4099      	lsls	r1, r3
    3e84:	430a      	orrs	r2, r1
    3e86:	1e51      	subs	r1, r2, #1
    3e88:	418a      	sbcs	r2, r1
    3e8a:	2100      	movs	r1, #0
    3e8c:	4317      	orrs	r7, r2
    3e8e:	e692      	b.n	3bb6 <__aeabi_dsub+0x1be>
    3e90:	2e00      	cmp	r6, #0
    3e92:	d114      	bne.n	3ebe <__aeabi_dsub+0x4c6>
    3e94:	0026      	movs	r6, r4
    3e96:	4650      	mov	r0, sl
    3e98:	4306      	orrs	r6, r0
    3e9a:	d062      	beq.n	3f62 <__aeabi_dsub+0x56a>
    3e9c:	43db      	mvns	r3, r3
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d15c      	bne.n	3f5c <__aeabi_dsub+0x564>
    3ea2:	1887      	adds	r7, r0, r2
    3ea4:	4297      	cmp	r7, r2
    3ea6:	4192      	sbcs	r2, r2
    3ea8:	1864      	adds	r4, r4, r1
    3eaa:	4252      	negs	r2, r2
    3eac:	18a4      	adds	r4, r4, r2
    3eae:	4666      	mov	r6, ip
    3eb0:	e687      	b.n	3bc2 <__aeabi_dsub+0x1ca>
    3eb2:	4650      	mov	r0, sl
    3eb4:	4320      	orrs	r0, r4
    3eb6:	1e44      	subs	r4, r0, #1
    3eb8:	41a0      	sbcs	r0, r4
    3eba:	2400      	movs	r4, #0
    3ebc:	e760      	b.n	3d80 <__aeabi_dsub+0x388>
    3ebe:	4e57      	ldr	r6, [pc, #348]	; (401c <__aeabi_dsub+0x624>)
    3ec0:	45b4      	cmp	ip, r6
    3ec2:	d04e      	beq.n	3f62 <__aeabi_dsub+0x56a>
    3ec4:	2680      	movs	r6, #128	; 0x80
    3ec6:	0436      	lsls	r6, r6, #16
    3ec8:	425b      	negs	r3, r3
    3eca:	4334      	orrs	r4, r6
    3ecc:	2b38      	cmp	r3, #56	; 0x38
    3ece:	dd00      	ble.n	3ed2 <__aeabi_dsub+0x4da>
    3ed0:	e07f      	b.n	3fd2 <__aeabi_dsub+0x5da>
    3ed2:	2b1f      	cmp	r3, #31
    3ed4:	dd00      	ble.n	3ed8 <__aeabi_dsub+0x4e0>
    3ed6:	e08b      	b.n	3ff0 <__aeabi_dsub+0x5f8>
    3ed8:	2620      	movs	r6, #32
    3eda:	0027      	movs	r7, r4
    3edc:	4650      	mov	r0, sl
    3ede:	1af6      	subs	r6, r6, r3
    3ee0:	40b7      	lsls	r7, r6
    3ee2:	40d8      	lsrs	r0, r3
    3ee4:	4307      	orrs	r7, r0
    3ee6:	4650      	mov	r0, sl
    3ee8:	40b0      	lsls	r0, r6
    3eea:	1e46      	subs	r6, r0, #1
    3eec:	41b0      	sbcs	r0, r6
    3eee:	4307      	orrs	r7, r0
    3ef0:	40dc      	lsrs	r4, r3
    3ef2:	18bf      	adds	r7, r7, r2
    3ef4:	e7d6      	b.n	3ea4 <__aeabi_dsub+0x4ac>
    3ef6:	000d      	movs	r5, r1
    3ef8:	4315      	orrs	r5, r2
    3efa:	d100      	bne.n	3efe <__aeabi_dsub+0x506>
    3efc:	e602      	b.n	3b04 <__aeabi_dsub+0x10c>
    3efe:	4650      	mov	r0, sl
    3f00:	1a80      	subs	r0, r0, r2
    3f02:	4582      	cmp	sl, r0
    3f04:	41bf      	sbcs	r7, r7
    3f06:	1a65      	subs	r5, r4, r1
    3f08:	427f      	negs	r7, r7
    3f0a:	1bed      	subs	r5, r5, r7
    3f0c:	4684      	mov	ip, r0
    3f0e:	0228      	lsls	r0, r5, #8
    3f10:	d400      	bmi.n	3f14 <__aeabi_dsub+0x51c>
    3f12:	e68d      	b.n	3c30 <__aeabi_dsub+0x238>
    3f14:	4650      	mov	r0, sl
    3f16:	1a17      	subs	r7, r2, r0
    3f18:	42ba      	cmp	r2, r7
    3f1a:	4192      	sbcs	r2, r2
    3f1c:	1b0c      	subs	r4, r1, r4
    3f1e:	4252      	negs	r2, r2
    3f20:	1aa4      	subs	r4, r4, r2
    3f22:	4698      	mov	r8, r3
    3f24:	e5ee      	b.n	3b04 <__aeabi_dsub+0x10c>
    3f26:	000d      	movs	r5, r1
    3f28:	4315      	orrs	r5, r2
    3f2a:	d100      	bne.n	3f2e <__aeabi_dsub+0x536>
    3f2c:	e76b      	b.n	3e06 <__aeabi_dsub+0x40e>
    3f2e:	4650      	mov	r0, sl
    3f30:	0767      	lsls	r7, r4, #29
    3f32:	08c0      	lsrs	r0, r0, #3
    3f34:	4307      	orrs	r7, r0
    3f36:	2080      	movs	r0, #128	; 0x80
    3f38:	08e4      	lsrs	r4, r4, #3
    3f3a:	0300      	lsls	r0, r0, #12
    3f3c:	4204      	tst	r4, r0
    3f3e:	d007      	beq.n	3f50 <__aeabi_dsub+0x558>
    3f40:	08cd      	lsrs	r5, r1, #3
    3f42:	4205      	tst	r5, r0
    3f44:	d104      	bne.n	3f50 <__aeabi_dsub+0x558>
    3f46:	002c      	movs	r4, r5
    3f48:	4698      	mov	r8, r3
    3f4a:	08d7      	lsrs	r7, r2, #3
    3f4c:	0749      	lsls	r1, r1, #29
    3f4e:	430f      	orrs	r7, r1
    3f50:	0f7b      	lsrs	r3, r7, #29
    3f52:	00e4      	lsls	r4, r4, #3
    3f54:	431c      	orrs	r4, r3
    3f56:	00ff      	lsls	r7, r7, #3
    3f58:	4e30      	ldr	r6, [pc, #192]	; (401c <__aeabi_dsub+0x624>)
    3f5a:	e5d3      	b.n	3b04 <__aeabi_dsub+0x10c>
    3f5c:	4e2f      	ldr	r6, [pc, #188]	; (401c <__aeabi_dsub+0x624>)
    3f5e:	45b4      	cmp	ip, r6
    3f60:	d1b4      	bne.n	3ecc <__aeabi_dsub+0x4d4>
    3f62:	000c      	movs	r4, r1
    3f64:	0017      	movs	r7, r2
    3f66:	4666      	mov	r6, ip
    3f68:	e5cc      	b.n	3b04 <__aeabi_dsub+0x10c>
    3f6a:	2700      	movs	r7, #0
    3f6c:	2400      	movs	r4, #0
    3f6e:	e5e8      	b.n	3b42 <__aeabi_dsub+0x14a>
    3f70:	2b00      	cmp	r3, #0
    3f72:	d039      	beq.n	3fe8 <__aeabi_dsub+0x5f0>
    3f74:	000b      	movs	r3, r1
    3f76:	4313      	orrs	r3, r2
    3f78:	d100      	bne.n	3f7c <__aeabi_dsub+0x584>
    3f7a:	e744      	b.n	3e06 <__aeabi_dsub+0x40e>
    3f7c:	08c0      	lsrs	r0, r0, #3
    3f7e:	0767      	lsls	r7, r4, #29
    3f80:	4307      	orrs	r7, r0
    3f82:	2080      	movs	r0, #128	; 0x80
    3f84:	08e4      	lsrs	r4, r4, #3
    3f86:	0300      	lsls	r0, r0, #12
    3f88:	4204      	tst	r4, r0
    3f8a:	d0e1      	beq.n	3f50 <__aeabi_dsub+0x558>
    3f8c:	08cb      	lsrs	r3, r1, #3
    3f8e:	4203      	tst	r3, r0
    3f90:	d1de      	bne.n	3f50 <__aeabi_dsub+0x558>
    3f92:	08d7      	lsrs	r7, r2, #3
    3f94:	0749      	lsls	r1, r1, #29
    3f96:	430f      	orrs	r7, r1
    3f98:	001c      	movs	r4, r3
    3f9a:	e7d9      	b.n	3f50 <__aeabi_dsub+0x558>
    3f9c:	2100      	movs	r1, #0
    3f9e:	e771      	b.n	3e84 <__aeabi_dsub+0x48c>
    3fa0:	2500      	movs	r5, #0
    3fa2:	2700      	movs	r7, #0
    3fa4:	e5e9      	b.n	3b7a <__aeabi_dsub+0x182>
    3fa6:	002e      	movs	r6, r5
    3fa8:	0027      	movs	r7, r4
    3faa:	3e20      	subs	r6, #32
    3fac:	40f7      	lsrs	r7, r6
    3fae:	2d20      	cmp	r5, #32
    3fb0:	d02f      	beq.n	4012 <__aeabi_dsub+0x61a>
    3fb2:	2640      	movs	r6, #64	; 0x40
    3fb4:	1b75      	subs	r5, r6, r5
    3fb6:	40ac      	lsls	r4, r5
    3fb8:	4650      	mov	r0, sl
    3fba:	4320      	orrs	r0, r4
    3fbc:	1e44      	subs	r4, r0, #1
    3fbe:	41a0      	sbcs	r0, r4
    3fc0:	2400      	movs	r4, #0
    3fc2:	4338      	orrs	r0, r7
    3fc4:	e6dc      	b.n	3d80 <__aeabi_dsub+0x388>
    3fc6:	2480      	movs	r4, #128	; 0x80
    3fc8:	2500      	movs	r5, #0
    3fca:	0324      	lsls	r4, r4, #12
    3fcc:	4e13      	ldr	r6, [pc, #76]	; (401c <__aeabi_dsub+0x624>)
    3fce:	2700      	movs	r7, #0
    3fd0:	e5d3      	b.n	3b7a <__aeabi_dsub+0x182>
    3fd2:	4650      	mov	r0, sl
    3fd4:	4320      	orrs	r0, r4
    3fd6:	0007      	movs	r7, r0
    3fd8:	1e78      	subs	r0, r7, #1
    3fda:	4187      	sbcs	r7, r0
    3fdc:	2400      	movs	r4, #0
    3fde:	18bf      	adds	r7, r7, r2
    3fe0:	e760      	b.n	3ea4 <__aeabi_dsub+0x4ac>
    3fe2:	000c      	movs	r4, r1
    3fe4:	0017      	movs	r7, r2
    3fe6:	e58d      	b.n	3b04 <__aeabi_dsub+0x10c>
    3fe8:	000c      	movs	r4, r1
    3fea:	0017      	movs	r7, r2
    3fec:	4e0b      	ldr	r6, [pc, #44]	; (401c <__aeabi_dsub+0x624>)
    3fee:	e589      	b.n	3b04 <__aeabi_dsub+0x10c>
    3ff0:	001e      	movs	r6, r3
    3ff2:	0027      	movs	r7, r4
    3ff4:	3e20      	subs	r6, #32
    3ff6:	40f7      	lsrs	r7, r6
    3ff8:	2b20      	cmp	r3, #32
    3ffa:	d00c      	beq.n	4016 <__aeabi_dsub+0x61e>
    3ffc:	2640      	movs	r6, #64	; 0x40
    3ffe:	1af3      	subs	r3, r6, r3
    4000:	409c      	lsls	r4, r3
    4002:	4650      	mov	r0, sl
    4004:	4320      	orrs	r0, r4
    4006:	1e44      	subs	r4, r0, #1
    4008:	41a0      	sbcs	r0, r4
    400a:	4307      	orrs	r7, r0
    400c:	2400      	movs	r4, #0
    400e:	18bf      	adds	r7, r7, r2
    4010:	e748      	b.n	3ea4 <__aeabi_dsub+0x4ac>
    4012:	2400      	movs	r4, #0
    4014:	e7d0      	b.n	3fb8 <__aeabi_dsub+0x5c0>
    4016:	2400      	movs	r4, #0
    4018:	e7f3      	b.n	4002 <__aeabi_dsub+0x60a>
    401a:	46c0      	nop			; (mov r8, r8)
    401c:	000007ff 	.word	0x000007ff
    4020:	ff7fffff 	.word	0xff7fffff

00004024 <__aeabi_d2iz>:
    4024:	b530      	push	{r4, r5, lr}
    4026:	4d13      	ldr	r5, [pc, #76]	; (4074 <__aeabi_d2iz+0x50>)
    4028:	030a      	lsls	r2, r1, #12
    402a:	004b      	lsls	r3, r1, #1
    402c:	0b12      	lsrs	r2, r2, #12
    402e:	0d5b      	lsrs	r3, r3, #21
    4030:	0fc9      	lsrs	r1, r1, #31
    4032:	2400      	movs	r4, #0
    4034:	42ab      	cmp	r3, r5
    4036:	dd10      	ble.n	405a <__aeabi_d2iz+0x36>
    4038:	4c0f      	ldr	r4, [pc, #60]	; (4078 <__aeabi_d2iz+0x54>)
    403a:	42a3      	cmp	r3, r4
    403c:	dc0f      	bgt.n	405e <__aeabi_d2iz+0x3a>
    403e:	2480      	movs	r4, #128	; 0x80
    4040:	4d0e      	ldr	r5, [pc, #56]	; (407c <__aeabi_d2iz+0x58>)
    4042:	0364      	lsls	r4, r4, #13
    4044:	4322      	orrs	r2, r4
    4046:	1aed      	subs	r5, r5, r3
    4048:	2d1f      	cmp	r5, #31
    404a:	dd0b      	ble.n	4064 <__aeabi_d2iz+0x40>
    404c:	480c      	ldr	r0, [pc, #48]	; (4080 <__aeabi_d2iz+0x5c>)
    404e:	1ac3      	subs	r3, r0, r3
    4050:	40da      	lsrs	r2, r3
    4052:	4254      	negs	r4, r2
    4054:	2900      	cmp	r1, #0
    4056:	d100      	bne.n	405a <__aeabi_d2iz+0x36>
    4058:	0014      	movs	r4, r2
    405a:	0020      	movs	r0, r4
    405c:	bd30      	pop	{r4, r5, pc}
    405e:	4b09      	ldr	r3, [pc, #36]	; (4084 <__aeabi_d2iz+0x60>)
    4060:	18cc      	adds	r4, r1, r3
    4062:	e7fa      	b.n	405a <__aeabi_d2iz+0x36>
    4064:	4c08      	ldr	r4, [pc, #32]	; (4088 <__aeabi_d2iz+0x64>)
    4066:	40e8      	lsrs	r0, r5
    4068:	46a4      	mov	ip, r4
    406a:	4463      	add	r3, ip
    406c:	409a      	lsls	r2, r3
    406e:	4302      	orrs	r2, r0
    4070:	e7ef      	b.n	4052 <__aeabi_d2iz+0x2e>
    4072:	46c0      	nop			; (mov r8, r8)
    4074:	000003fe 	.word	0x000003fe
    4078:	0000041d 	.word	0x0000041d
    407c:	00000433 	.word	0x00000433
    4080:	00000413 	.word	0x00000413
    4084:	7fffffff 	.word	0x7fffffff
    4088:	fffffbed 	.word	0xfffffbed

0000408c <__aeabi_ui2d>:
    408c:	b510      	push	{r4, lr}
    408e:	1e04      	subs	r4, r0, #0
    4090:	d028      	beq.n	40e4 <__aeabi_ui2d+0x58>
    4092:	f000 f833 	bl	40fc <__clzsi2>
    4096:	4b15      	ldr	r3, [pc, #84]	; (40ec <__aeabi_ui2d+0x60>)
    4098:	4a15      	ldr	r2, [pc, #84]	; (40f0 <__aeabi_ui2d+0x64>)
    409a:	1a1b      	subs	r3, r3, r0
    409c:	1ad2      	subs	r2, r2, r3
    409e:	2a1f      	cmp	r2, #31
    40a0:	dd15      	ble.n	40ce <__aeabi_ui2d+0x42>
    40a2:	4a14      	ldr	r2, [pc, #80]	; (40f4 <__aeabi_ui2d+0x68>)
    40a4:	1ad2      	subs	r2, r2, r3
    40a6:	4094      	lsls	r4, r2
    40a8:	2200      	movs	r2, #0
    40aa:	0324      	lsls	r4, r4, #12
    40ac:	055b      	lsls	r3, r3, #21
    40ae:	0b24      	lsrs	r4, r4, #12
    40b0:	0d5b      	lsrs	r3, r3, #21
    40b2:	2100      	movs	r1, #0
    40b4:	0010      	movs	r0, r2
    40b6:	0324      	lsls	r4, r4, #12
    40b8:	0d0a      	lsrs	r2, r1, #20
    40ba:	0b24      	lsrs	r4, r4, #12
    40bc:	0512      	lsls	r2, r2, #20
    40be:	4322      	orrs	r2, r4
    40c0:	4c0d      	ldr	r4, [pc, #52]	; (40f8 <__aeabi_ui2d+0x6c>)
    40c2:	051b      	lsls	r3, r3, #20
    40c4:	4022      	ands	r2, r4
    40c6:	4313      	orrs	r3, r2
    40c8:	005b      	lsls	r3, r3, #1
    40ca:	0859      	lsrs	r1, r3, #1
    40cc:	bd10      	pop	{r4, pc}
    40ce:	0021      	movs	r1, r4
    40d0:	4091      	lsls	r1, r2
    40d2:	000a      	movs	r2, r1
    40d4:	210b      	movs	r1, #11
    40d6:	1a08      	subs	r0, r1, r0
    40d8:	40c4      	lsrs	r4, r0
    40da:	055b      	lsls	r3, r3, #21
    40dc:	0324      	lsls	r4, r4, #12
    40de:	0b24      	lsrs	r4, r4, #12
    40e0:	0d5b      	lsrs	r3, r3, #21
    40e2:	e7e6      	b.n	40b2 <__aeabi_ui2d+0x26>
    40e4:	2300      	movs	r3, #0
    40e6:	2400      	movs	r4, #0
    40e8:	2200      	movs	r2, #0
    40ea:	e7e2      	b.n	40b2 <__aeabi_ui2d+0x26>
    40ec:	0000041e 	.word	0x0000041e
    40f0:	00000433 	.word	0x00000433
    40f4:	00000413 	.word	0x00000413
    40f8:	800fffff 	.word	0x800fffff

000040fc <__clzsi2>:
    40fc:	211c      	movs	r1, #28
    40fe:	2301      	movs	r3, #1
    4100:	041b      	lsls	r3, r3, #16
    4102:	4298      	cmp	r0, r3
    4104:	d301      	bcc.n	410a <__clzsi2+0xe>
    4106:	0c00      	lsrs	r0, r0, #16
    4108:	3910      	subs	r1, #16
    410a:	0a1b      	lsrs	r3, r3, #8
    410c:	4298      	cmp	r0, r3
    410e:	d301      	bcc.n	4114 <__clzsi2+0x18>
    4110:	0a00      	lsrs	r0, r0, #8
    4112:	3908      	subs	r1, #8
    4114:	091b      	lsrs	r3, r3, #4
    4116:	4298      	cmp	r0, r3
    4118:	d301      	bcc.n	411e <__clzsi2+0x22>
    411a:	0900      	lsrs	r0, r0, #4
    411c:	3904      	subs	r1, #4
    411e:	a202      	add	r2, pc, #8	; (adr r2, 4128 <__clzsi2+0x2c>)
    4120:	5c10      	ldrb	r0, [r2, r0]
    4122:	1840      	adds	r0, r0, r1
    4124:	4770      	bx	lr
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	02020304 	.word	0x02020304
    412c:	01010101 	.word	0x01010101
	...

00004138 <__libc_init_array>:
    4138:	b570      	push	{r4, r5, r6, lr}
    413a:	2600      	movs	r6, #0
    413c:	4d0c      	ldr	r5, [pc, #48]	; (4170 <__libc_init_array+0x38>)
    413e:	4c0d      	ldr	r4, [pc, #52]	; (4174 <__libc_init_array+0x3c>)
    4140:	1b64      	subs	r4, r4, r5
    4142:	10a4      	asrs	r4, r4, #2
    4144:	42a6      	cmp	r6, r4
    4146:	d109      	bne.n	415c <__libc_init_array+0x24>
    4148:	2600      	movs	r6, #0
    414a:	f001 f993 	bl	5474 <_init>
    414e:	4d0a      	ldr	r5, [pc, #40]	; (4178 <__libc_init_array+0x40>)
    4150:	4c0a      	ldr	r4, [pc, #40]	; (417c <__libc_init_array+0x44>)
    4152:	1b64      	subs	r4, r4, r5
    4154:	10a4      	asrs	r4, r4, #2
    4156:	42a6      	cmp	r6, r4
    4158:	d105      	bne.n	4166 <__libc_init_array+0x2e>
    415a:	bd70      	pop	{r4, r5, r6, pc}
    415c:	00b3      	lsls	r3, r6, #2
    415e:	58eb      	ldr	r3, [r5, r3]
    4160:	4798      	blx	r3
    4162:	3601      	adds	r6, #1
    4164:	e7ee      	b.n	4144 <__libc_init_array+0xc>
    4166:	00b3      	lsls	r3, r6, #2
    4168:	58eb      	ldr	r3, [r5, r3]
    416a:	4798      	blx	r3
    416c:	3601      	adds	r6, #1
    416e:	e7f2      	b.n	4156 <__libc_init_array+0x1e>
    4170:	00005480 	.word	0x00005480
    4174:	00005480 	.word	0x00005480
    4178:	00005480 	.word	0x00005480
    417c:	00005484 	.word	0x00005484

00004180 <memcpy>:
    4180:	2300      	movs	r3, #0
    4182:	b510      	push	{r4, lr}
    4184:	429a      	cmp	r2, r3
    4186:	d100      	bne.n	418a <memcpy+0xa>
    4188:	bd10      	pop	{r4, pc}
    418a:	5ccc      	ldrb	r4, [r1, r3]
    418c:	54c4      	strb	r4, [r0, r3]
    418e:	3301      	adds	r3, #1
    4190:	e7f8      	b.n	4184 <memcpy+0x4>

00004192 <memset>:
    4192:	0003      	movs	r3, r0
    4194:	1882      	adds	r2, r0, r2
    4196:	4293      	cmp	r3, r2
    4198:	d100      	bne.n	419c <memset+0xa>
    419a:	4770      	bx	lr
    419c:	7019      	strb	r1, [r3, #0]
    419e:	3301      	adds	r3, #1
    41a0:	e7f9      	b.n	4196 <memset+0x4>
	...

000041a4 <iprintf>:
    41a4:	b40f      	push	{r0, r1, r2, r3}
    41a6:	4b0b      	ldr	r3, [pc, #44]	; (41d4 <iprintf+0x30>)
    41a8:	b513      	push	{r0, r1, r4, lr}
    41aa:	681c      	ldr	r4, [r3, #0]
    41ac:	2c00      	cmp	r4, #0
    41ae:	d005      	beq.n	41bc <iprintf+0x18>
    41b0:	69a3      	ldr	r3, [r4, #24]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d102      	bne.n	41bc <iprintf+0x18>
    41b6:	0020      	movs	r0, r4
    41b8:	f000 f9bc 	bl	4534 <__sinit>
    41bc:	ab05      	add	r3, sp, #20
    41be:	9a04      	ldr	r2, [sp, #16]
    41c0:	68a1      	ldr	r1, [r4, #8]
    41c2:	0020      	movs	r0, r4
    41c4:	9301      	str	r3, [sp, #4]
    41c6:	f000 fb91 	bl	48ec <_vfiprintf_r>
    41ca:	bc16      	pop	{r1, r2, r4}
    41cc:	bc08      	pop	{r3}
    41ce:	b004      	add	sp, #16
    41d0:	4718      	bx	r3
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	2000000c 	.word	0x2000000c

000041d8 <setbuf>:
    41d8:	424a      	negs	r2, r1
    41da:	414a      	adcs	r2, r1
    41dc:	2380      	movs	r3, #128	; 0x80
    41de:	b510      	push	{r4, lr}
    41e0:	0052      	lsls	r2, r2, #1
    41e2:	00db      	lsls	r3, r3, #3
    41e4:	f000 f802 	bl	41ec <setvbuf>
    41e8:	bd10      	pop	{r4, pc}
	...

000041ec <setvbuf>:
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	001d      	movs	r5, r3
    41f0:	4b4f      	ldr	r3, [pc, #316]	; (4330 <setvbuf+0x144>)
    41f2:	b085      	sub	sp, #20
    41f4:	681e      	ldr	r6, [r3, #0]
    41f6:	0004      	movs	r4, r0
    41f8:	000f      	movs	r7, r1
    41fa:	9200      	str	r2, [sp, #0]
    41fc:	2e00      	cmp	r6, #0
    41fe:	d005      	beq.n	420c <setvbuf+0x20>
    4200:	69b3      	ldr	r3, [r6, #24]
    4202:	2b00      	cmp	r3, #0
    4204:	d102      	bne.n	420c <setvbuf+0x20>
    4206:	0030      	movs	r0, r6
    4208:	f000 f994 	bl	4534 <__sinit>
    420c:	4b49      	ldr	r3, [pc, #292]	; (4334 <setvbuf+0x148>)
    420e:	429c      	cmp	r4, r3
    4210:	d150      	bne.n	42b4 <setvbuf+0xc8>
    4212:	6874      	ldr	r4, [r6, #4]
    4214:	9b00      	ldr	r3, [sp, #0]
    4216:	2b02      	cmp	r3, #2
    4218:	d005      	beq.n	4226 <setvbuf+0x3a>
    421a:	2b01      	cmp	r3, #1
    421c:	d900      	bls.n	4220 <setvbuf+0x34>
    421e:	e084      	b.n	432a <setvbuf+0x13e>
    4220:	2d00      	cmp	r5, #0
    4222:	da00      	bge.n	4226 <setvbuf+0x3a>
    4224:	e081      	b.n	432a <setvbuf+0x13e>
    4226:	0021      	movs	r1, r4
    4228:	0030      	movs	r0, r6
    422a:	f000 f915 	bl	4458 <_fflush_r>
    422e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4230:	2900      	cmp	r1, #0
    4232:	d008      	beq.n	4246 <setvbuf+0x5a>
    4234:	0023      	movs	r3, r4
    4236:	3344      	adds	r3, #68	; 0x44
    4238:	4299      	cmp	r1, r3
    423a:	d002      	beq.n	4242 <setvbuf+0x56>
    423c:	0030      	movs	r0, r6
    423e:	f000 fa85 	bl	474c <_free_r>
    4242:	2300      	movs	r3, #0
    4244:	6363      	str	r3, [r4, #52]	; 0x34
    4246:	2300      	movs	r3, #0
    4248:	61a3      	str	r3, [r4, #24]
    424a:	6063      	str	r3, [r4, #4]
    424c:	89a3      	ldrh	r3, [r4, #12]
    424e:	061b      	lsls	r3, r3, #24
    4250:	d503      	bpl.n	425a <setvbuf+0x6e>
    4252:	6921      	ldr	r1, [r4, #16]
    4254:	0030      	movs	r0, r6
    4256:	f000 fa79 	bl	474c <_free_r>
    425a:	89a3      	ldrh	r3, [r4, #12]
    425c:	4a36      	ldr	r2, [pc, #216]	; (4338 <setvbuf+0x14c>)
    425e:	4013      	ands	r3, r2
    4260:	81a3      	strh	r3, [r4, #12]
    4262:	9b00      	ldr	r3, [sp, #0]
    4264:	2b02      	cmp	r3, #2
    4266:	d05a      	beq.n	431e <setvbuf+0x132>
    4268:	ab03      	add	r3, sp, #12
    426a:	aa02      	add	r2, sp, #8
    426c:	0021      	movs	r1, r4
    426e:	0030      	movs	r0, r6
    4270:	f000 f9f6 	bl	4660 <__swhatbuf_r>
    4274:	89a3      	ldrh	r3, [r4, #12]
    4276:	4318      	orrs	r0, r3
    4278:	81a0      	strh	r0, [r4, #12]
    427a:	2d00      	cmp	r5, #0
    427c:	d124      	bne.n	42c8 <setvbuf+0xdc>
    427e:	9d02      	ldr	r5, [sp, #8]
    4280:	0028      	movs	r0, r5
    4282:	f000 fa59 	bl	4738 <malloc>
    4286:	9501      	str	r5, [sp, #4]
    4288:	1e07      	subs	r7, r0, #0
    428a:	d142      	bne.n	4312 <setvbuf+0x126>
    428c:	9b02      	ldr	r3, [sp, #8]
    428e:	9301      	str	r3, [sp, #4]
    4290:	42ab      	cmp	r3, r5
    4292:	d139      	bne.n	4308 <setvbuf+0x11c>
    4294:	2001      	movs	r0, #1
    4296:	4240      	negs	r0, r0
    4298:	2302      	movs	r3, #2
    429a:	89a2      	ldrh	r2, [r4, #12]
    429c:	4313      	orrs	r3, r2
    429e:	81a3      	strh	r3, [r4, #12]
    42a0:	2300      	movs	r3, #0
    42a2:	60a3      	str	r3, [r4, #8]
    42a4:	0023      	movs	r3, r4
    42a6:	3347      	adds	r3, #71	; 0x47
    42a8:	6023      	str	r3, [r4, #0]
    42aa:	6123      	str	r3, [r4, #16]
    42ac:	2301      	movs	r3, #1
    42ae:	6163      	str	r3, [r4, #20]
    42b0:	b005      	add	sp, #20
    42b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42b4:	4b21      	ldr	r3, [pc, #132]	; (433c <setvbuf+0x150>)
    42b6:	429c      	cmp	r4, r3
    42b8:	d101      	bne.n	42be <setvbuf+0xd2>
    42ba:	68b4      	ldr	r4, [r6, #8]
    42bc:	e7aa      	b.n	4214 <setvbuf+0x28>
    42be:	4b20      	ldr	r3, [pc, #128]	; (4340 <setvbuf+0x154>)
    42c0:	429c      	cmp	r4, r3
    42c2:	d1a7      	bne.n	4214 <setvbuf+0x28>
    42c4:	68f4      	ldr	r4, [r6, #12]
    42c6:	e7a5      	b.n	4214 <setvbuf+0x28>
    42c8:	2f00      	cmp	r7, #0
    42ca:	d0d9      	beq.n	4280 <setvbuf+0x94>
    42cc:	69b3      	ldr	r3, [r6, #24]
    42ce:	2b00      	cmp	r3, #0
    42d0:	d102      	bne.n	42d8 <setvbuf+0xec>
    42d2:	0030      	movs	r0, r6
    42d4:	f000 f92e 	bl	4534 <__sinit>
    42d8:	9b00      	ldr	r3, [sp, #0]
    42da:	2b01      	cmp	r3, #1
    42dc:	d103      	bne.n	42e6 <setvbuf+0xfa>
    42de:	89a3      	ldrh	r3, [r4, #12]
    42e0:	9a00      	ldr	r2, [sp, #0]
    42e2:	431a      	orrs	r2, r3
    42e4:	81a2      	strh	r2, [r4, #12]
    42e6:	2008      	movs	r0, #8
    42e8:	89a3      	ldrh	r3, [r4, #12]
    42ea:	6027      	str	r7, [r4, #0]
    42ec:	6127      	str	r7, [r4, #16]
    42ee:	6165      	str	r5, [r4, #20]
    42f0:	4018      	ands	r0, r3
    42f2:	d018      	beq.n	4326 <setvbuf+0x13a>
    42f4:	2001      	movs	r0, #1
    42f6:	4018      	ands	r0, r3
    42f8:	2300      	movs	r3, #0
    42fa:	4298      	cmp	r0, r3
    42fc:	d011      	beq.n	4322 <setvbuf+0x136>
    42fe:	426d      	negs	r5, r5
    4300:	60a3      	str	r3, [r4, #8]
    4302:	61a5      	str	r5, [r4, #24]
    4304:	0018      	movs	r0, r3
    4306:	e7d3      	b.n	42b0 <setvbuf+0xc4>
    4308:	9801      	ldr	r0, [sp, #4]
    430a:	f000 fa15 	bl	4738 <malloc>
    430e:	1e07      	subs	r7, r0, #0
    4310:	d0c0      	beq.n	4294 <setvbuf+0xa8>
    4312:	2380      	movs	r3, #128	; 0x80
    4314:	89a2      	ldrh	r2, [r4, #12]
    4316:	9d01      	ldr	r5, [sp, #4]
    4318:	4313      	orrs	r3, r2
    431a:	81a3      	strh	r3, [r4, #12]
    431c:	e7d6      	b.n	42cc <setvbuf+0xe0>
    431e:	2000      	movs	r0, #0
    4320:	e7ba      	b.n	4298 <setvbuf+0xac>
    4322:	60a5      	str	r5, [r4, #8]
    4324:	e7c4      	b.n	42b0 <setvbuf+0xc4>
    4326:	60a0      	str	r0, [r4, #8]
    4328:	e7c2      	b.n	42b0 <setvbuf+0xc4>
    432a:	2001      	movs	r0, #1
    432c:	4240      	negs	r0, r0
    432e:	e7bf      	b.n	42b0 <setvbuf+0xc4>
    4330:	2000000c 	.word	0x2000000c
    4334:	00005400 	.word	0x00005400
    4338:	fffff35c 	.word	0xfffff35c
    433c:	00005420 	.word	0x00005420
    4340:	000053e0 	.word	0x000053e0

00004344 <__sflush_r>:
    4344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4346:	898a      	ldrh	r2, [r1, #12]
    4348:	0005      	movs	r5, r0
    434a:	000c      	movs	r4, r1
    434c:	0713      	lsls	r3, r2, #28
    434e:	d460      	bmi.n	4412 <__sflush_r+0xce>
    4350:	684b      	ldr	r3, [r1, #4]
    4352:	2b00      	cmp	r3, #0
    4354:	dc04      	bgt.n	4360 <__sflush_r+0x1c>
    4356:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4358:	2b00      	cmp	r3, #0
    435a:	dc01      	bgt.n	4360 <__sflush_r+0x1c>
    435c:	2000      	movs	r0, #0
    435e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4360:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4362:	2f00      	cmp	r7, #0
    4364:	d0fa      	beq.n	435c <__sflush_r+0x18>
    4366:	2300      	movs	r3, #0
    4368:	682e      	ldr	r6, [r5, #0]
    436a:	602b      	str	r3, [r5, #0]
    436c:	2380      	movs	r3, #128	; 0x80
    436e:	015b      	lsls	r3, r3, #5
    4370:	401a      	ands	r2, r3
    4372:	d034      	beq.n	43de <__sflush_r+0x9a>
    4374:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4376:	89a3      	ldrh	r3, [r4, #12]
    4378:	075b      	lsls	r3, r3, #29
    437a:	d506      	bpl.n	438a <__sflush_r+0x46>
    437c:	6863      	ldr	r3, [r4, #4]
    437e:	1ac0      	subs	r0, r0, r3
    4380:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4382:	2b00      	cmp	r3, #0
    4384:	d001      	beq.n	438a <__sflush_r+0x46>
    4386:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4388:	1ac0      	subs	r0, r0, r3
    438a:	0002      	movs	r2, r0
    438c:	6a21      	ldr	r1, [r4, #32]
    438e:	2300      	movs	r3, #0
    4390:	0028      	movs	r0, r5
    4392:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4394:	47b8      	blx	r7
    4396:	89a1      	ldrh	r1, [r4, #12]
    4398:	1c43      	adds	r3, r0, #1
    439a:	d106      	bne.n	43aa <__sflush_r+0x66>
    439c:	682b      	ldr	r3, [r5, #0]
    439e:	2b1d      	cmp	r3, #29
    43a0:	d831      	bhi.n	4406 <__sflush_r+0xc2>
    43a2:	4a2c      	ldr	r2, [pc, #176]	; (4454 <__sflush_r+0x110>)
    43a4:	40da      	lsrs	r2, r3
    43a6:	07d3      	lsls	r3, r2, #31
    43a8:	d52d      	bpl.n	4406 <__sflush_r+0xc2>
    43aa:	2300      	movs	r3, #0
    43ac:	6063      	str	r3, [r4, #4]
    43ae:	6923      	ldr	r3, [r4, #16]
    43b0:	6023      	str	r3, [r4, #0]
    43b2:	04cb      	lsls	r3, r1, #19
    43b4:	d505      	bpl.n	43c2 <__sflush_r+0x7e>
    43b6:	1c43      	adds	r3, r0, #1
    43b8:	d102      	bne.n	43c0 <__sflush_r+0x7c>
    43ba:	682b      	ldr	r3, [r5, #0]
    43bc:	2b00      	cmp	r3, #0
    43be:	d100      	bne.n	43c2 <__sflush_r+0x7e>
    43c0:	6560      	str	r0, [r4, #84]	; 0x54
    43c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    43c4:	602e      	str	r6, [r5, #0]
    43c6:	2900      	cmp	r1, #0
    43c8:	d0c8      	beq.n	435c <__sflush_r+0x18>
    43ca:	0023      	movs	r3, r4
    43cc:	3344      	adds	r3, #68	; 0x44
    43ce:	4299      	cmp	r1, r3
    43d0:	d002      	beq.n	43d8 <__sflush_r+0x94>
    43d2:	0028      	movs	r0, r5
    43d4:	f000 f9ba 	bl	474c <_free_r>
    43d8:	2000      	movs	r0, #0
    43da:	6360      	str	r0, [r4, #52]	; 0x34
    43dc:	e7bf      	b.n	435e <__sflush_r+0x1a>
    43de:	2301      	movs	r3, #1
    43e0:	6a21      	ldr	r1, [r4, #32]
    43e2:	0028      	movs	r0, r5
    43e4:	47b8      	blx	r7
    43e6:	1c43      	adds	r3, r0, #1
    43e8:	d1c5      	bne.n	4376 <__sflush_r+0x32>
    43ea:	682b      	ldr	r3, [r5, #0]
    43ec:	2b00      	cmp	r3, #0
    43ee:	d0c2      	beq.n	4376 <__sflush_r+0x32>
    43f0:	2b1d      	cmp	r3, #29
    43f2:	d001      	beq.n	43f8 <__sflush_r+0xb4>
    43f4:	2b16      	cmp	r3, #22
    43f6:	d101      	bne.n	43fc <__sflush_r+0xb8>
    43f8:	602e      	str	r6, [r5, #0]
    43fa:	e7af      	b.n	435c <__sflush_r+0x18>
    43fc:	2340      	movs	r3, #64	; 0x40
    43fe:	89a2      	ldrh	r2, [r4, #12]
    4400:	4313      	orrs	r3, r2
    4402:	81a3      	strh	r3, [r4, #12]
    4404:	e7ab      	b.n	435e <__sflush_r+0x1a>
    4406:	2340      	movs	r3, #64	; 0x40
    4408:	430b      	orrs	r3, r1
    440a:	2001      	movs	r0, #1
    440c:	81a3      	strh	r3, [r4, #12]
    440e:	4240      	negs	r0, r0
    4410:	e7a5      	b.n	435e <__sflush_r+0x1a>
    4412:	690f      	ldr	r7, [r1, #16]
    4414:	2f00      	cmp	r7, #0
    4416:	d0a1      	beq.n	435c <__sflush_r+0x18>
    4418:	680b      	ldr	r3, [r1, #0]
    441a:	600f      	str	r7, [r1, #0]
    441c:	1bdb      	subs	r3, r3, r7
    441e:	9301      	str	r3, [sp, #4]
    4420:	2300      	movs	r3, #0
    4422:	0792      	lsls	r2, r2, #30
    4424:	d100      	bne.n	4428 <__sflush_r+0xe4>
    4426:	694b      	ldr	r3, [r1, #20]
    4428:	60a3      	str	r3, [r4, #8]
    442a:	9b01      	ldr	r3, [sp, #4]
    442c:	2b00      	cmp	r3, #0
    442e:	dc00      	bgt.n	4432 <__sflush_r+0xee>
    4430:	e794      	b.n	435c <__sflush_r+0x18>
    4432:	9b01      	ldr	r3, [sp, #4]
    4434:	003a      	movs	r2, r7
    4436:	6a21      	ldr	r1, [r4, #32]
    4438:	0028      	movs	r0, r5
    443a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    443c:	47b0      	blx	r6
    443e:	2800      	cmp	r0, #0
    4440:	dc03      	bgt.n	444a <__sflush_r+0x106>
    4442:	2340      	movs	r3, #64	; 0x40
    4444:	89a2      	ldrh	r2, [r4, #12]
    4446:	4313      	orrs	r3, r2
    4448:	e7df      	b.n	440a <__sflush_r+0xc6>
    444a:	9b01      	ldr	r3, [sp, #4]
    444c:	183f      	adds	r7, r7, r0
    444e:	1a1b      	subs	r3, r3, r0
    4450:	9301      	str	r3, [sp, #4]
    4452:	e7ea      	b.n	442a <__sflush_r+0xe6>
    4454:	20400001 	.word	0x20400001

00004458 <_fflush_r>:
    4458:	690b      	ldr	r3, [r1, #16]
    445a:	b570      	push	{r4, r5, r6, lr}
    445c:	0005      	movs	r5, r0
    445e:	000c      	movs	r4, r1
    4460:	2b00      	cmp	r3, #0
    4462:	d101      	bne.n	4468 <_fflush_r+0x10>
    4464:	2000      	movs	r0, #0
    4466:	bd70      	pop	{r4, r5, r6, pc}
    4468:	2800      	cmp	r0, #0
    446a:	d004      	beq.n	4476 <_fflush_r+0x1e>
    446c:	6983      	ldr	r3, [r0, #24]
    446e:	2b00      	cmp	r3, #0
    4470:	d101      	bne.n	4476 <_fflush_r+0x1e>
    4472:	f000 f85f 	bl	4534 <__sinit>
    4476:	4b0b      	ldr	r3, [pc, #44]	; (44a4 <_fflush_r+0x4c>)
    4478:	429c      	cmp	r4, r3
    447a:	d109      	bne.n	4490 <_fflush_r+0x38>
    447c:	686c      	ldr	r4, [r5, #4]
    447e:	220c      	movs	r2, #12
    4480:	5ea3      	ldrsh	r3, [r4, r2]
    4482:	2b00      	cmp	r3, #0
    4484:	d0ee      	beq.n	4464 <_fflush_r+0xc>
    4486:	0021      	movs	r1, r4
    4488:	0028      	movs	r0, r5
    448a:	f7ff ff5b 	bl	4344 <__sflush_r>
    448e:	e7ea      	b.n	4466 <_fflush_r+0xe>
    4490:	4b05      	ldr	r3, [pc, #20]	; (44a8 <_fflush_r+0x50>)
    4492:	429c      	cmp	r4, r3
    4494:	d101      	bne.n	449a <_fflush_r+0x42>
    4496:	68ac      	ldr	r4, [r5, #8]
    4498:	e7f1      	b.n	447e <_fflush_r+0x26>
    449a:	4b04      	ldr	r3, [pc, #16]	; (44ac <_fflush_r+0x54>)
    449c:	429c      	cmp	r4, r3
    449e:	d1ee      	bne.n	447e <_fflush_r+0x26>
    44a0:	68ec      	ldr	r4, [r5, #12]
    44a2:	e7ec      	b.n	447e <_fflush_r+0x26>
    44a4:	00005400 	.word	0x00005400
    44a8:	00005420 	.word	0x00005420
    44ac:	000053e0 	.word	0x000053e0

000044b0 <_cleanup_r>:
    44b0:	b510      	push	{r4, lr}
    44b2:	4902      	ldr	r1, [pc, #8]	; (44bc <_cleanup_r+0xc>)
    44b4:	f000 f8b2 	bl	461c <_fwalk_reent>
    44b8:	bd10      	pop	{r4, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	00004459 	.word	0x00004459

000044c0 <std.isra.0>:
    44c0:	2300      	movs	r3, #0
    44c2:	b510      	push	{r4, lr}
    44c4:	0004      	movs	r4, r0
    44c6:	6003      	str	r3, [r0, #0]
    44c8:	6043      	str	r3, [r0, #4]
    44ca:	6083      	str	r3, [r0, #8]
    44cc:	8181      	strh	r1, [r0, #12]
    44ce:	6643      	str	r3, [r0, #100]	; 0x64
    44d0:	81c2      	strh	r2, [r0, #14]
    44d2:	6103      	str	r3, [r0, #16]
    44d4:	6143      	str	r3, [r0, #20]
    44d6:	6183      	str	r3, [r0, #24]
    44d8:	0019      	movs	r1, r3
    44da:	2208      	movs	r2, #8
    44dc:	305c      	adds	r0, #92	; 0x5c
    44de:	f7ff fe58 	bl	4192 <memset>
    44e2:	4b05      	ldr	r3, [pc, #20]	; (44f8 <std.isra.0+0x38>)
    44e4:	6224      	str	r4, [r4, #32]
    44e6:	6263      	str	r3, [r4, #36]	; 0x24
    44e8:	4b04      	ldr	r3, [pc, #16]	; (44fc <std.isra.0+0x3c>)
    44ea:	62a3      	str	r3, [r4, #40]	; 0x28
    44ec:	4b04      	ldr	r3, [pc, #16]	; (4500 <std.isra.0+0x40>)
    44ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    44f0:	4b04      	ldr	r3, [pc, #16]	; (4504 <std.isra.0+0x44>)
    44f2:	6323      	str	r3, [r4, #48]	; 0x30
    44f4:	bd10      	pop	{r4, pc}
    44f6:	46c0      	nop			; (mov r8, r8)
    44f8:	00004e59 	.word	0x00004e59
    44fc:	00004e81 	.word	0x00004e81
    4500:	00004eb9 	.word	0x00004eb9
    4504:	00004ee5 	.word	0x00004ee5

00004508 <__sfmoreglue>:
    4508:	b570      	push	{r4, r5, r6, lr}
    450a:	2568      	movs	r5, #104	; 0x68
    450c:	1e4a      	subs	r2, r1, #1
    450e:	4355      	muls	r5, r2
    4510:	000e      	movs	r6, r1
    4512:	0029      	movs	r1, r5
    4514:	3174      	adds	r1, #116	; 0x74
    4516:	f000 f963 	bl	47e0 <_malloc_r>
    451a:	1e04      	subs	r4, r0, #0
    451c:	d008      	beq.n	4530 <__sfmoreglue+0x28>
    451e:	2100      	movs	r1, #0
    4520:	002a      	movs	r2, r5
    4522:	6001      	str	r1, [r0, #0]
    4524:	6046      	str	r6, [r0, #4]
    4526:	300c      	adds	r0, #12
    4528:	60a0      	str	r0, [r4, #8]
    452a:	3268      	adds	r2, #104	; 0x68
    452c:	f7ff fe31 	bl	4192 <memset>
    4530:	0020      	movs	r0, r4
    4532:	bd70      	pop	{r4, r5, r6, pc}

00004534 <__sinit>:
    4534:	6983      	ldr	r3, [r0, #24]
    4536:	b513      	push	{r0, r1, r4, lr}
    4538:	0004      	movs	r4, r0
    453a:	2b00      	cmp	r3, #0
    453c:	d128      	bne.n	4590 <__sinit+0x5c>
    453e:	6483      	str	r3, [r0, #72]	; 0x48
    4540:	64c3      	str	r3, [r0, #76]	; 0x4c
    4542:	6503      	str	r3, [r0, #80]	; 0x50
    4544:	4b13      	ldr	r3, [pc, #76]	; (4594 <__sinit+0x60>)
    4546:	4a14      	ldr	r2, [pc, #80]	; (4598 <__sinit+0x64>)
    4548:	681b      	ldr	r3, [r3, #0]
    454a:	6282      	str	r2, [r0, #40]	; 0x28
    454c:	9301      	str	r3, [sp, #4]
    454e:	4298      	cmp	r0, r3
    4550:	d101      	bne.n	4556 <__sinit+0x22>
    4552:	2301      	movs	r3, #1
    4554:	6183      	str	r3, [r0, #24]
    4556:	0020      	movs	r0, r4
    4558:	f000 f820 	bl	459c <__sfp>
    455c:	6060      	str	r0, [r4, #4]
    455e:	0020      	movs	r0, r4
    4560:	f000 f81c 	bl	459c <__sfp>
    4564:	60a0      	str	r0, [r4, #8]
    4566:	0020      	movs	r0, r4
    4568:	f000 f818 	bl	459c <__sfp>
    456c:	2200      	movs	r2, #0
    456e:	60e0      	str	r0, [r4, #12]
    4570:	2104      	movs	r1, #4
    4572:	6860      	ldr	r0, [r4, #4]
    4574:	f7ff ffa4 	bl	44c0 <std.isra.0>
    4578:	2201      	movs	r2, #1
    457a:	2109      	movs	r1, #9
    457c:	68a0      	ldr	r0, [r4, #8]
    457e:	f7ff ff9f 	bl	44c0 <std.isra.0>
    4582:	2202      	movs	r2, #2
    4584:	2112      	movs	r1, #18
    4586:	68e0      	ldr	r0, [r4, #12]
    4588:	f7ff ff9a 	bl	44c0 <std.isra.0>
    458c:	2301      	movs	r3, #1
    458e:	61a3      	str	r3, [r4, #24]
    4590:	bd13      	pop	{r0, r1, r4, pc}
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	000053dc 	.word	0x000053dc
    4598:	000044b1 	.word	0x000044b1

0000459c <__sfp>:
    459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    459e:	4b1e      	ldr	r3, [pc, #120]	; (4618 <__sfp+0x7c>)
    45a0:	0007      	movs	r7, r0
    45a2:	681e      	ldr	r6, [r3, #0]
    45a4:	69b3      	ldr	r3, [r6, #24]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d102      	bne.n	45b0 <__sfp+0x14>
    45aa:	0030      	movs	r0, r6
    45ac:	f7ff ffc2 	bl	4534 <__sinit>
    45b0:	3648      	adds	r6, #72	; 0x48
    45b2:	68b4      	ldr	r4, [r6, #8]
    45b4:	6873      	ldr	r3, [r6, #4]
    45b6:	3b01      	subs	r3, #1
    45b8:	d504      	bpl.n	45c4 <__sfp+0x28>
    45ba:	6833      	ldr	r3, [r6, #0]
    45bc:	2b00      	cmp	r3, #0
    45be:	d007      	beq.n	45d0 <__sfp+0x34>
    45c0:	6836      	ldr	r6, [r6, #0]
    45c2:	e7f6      	b.n	45b2 <__sfp+0x16>
    45c4:	220c      	movs	r2, #12
    45c6:	5ea5      	ldrsh	r5, [r4, r2]
    45c8:	2d00      	cmp	r5, #0
    45ca:	d00d      	beq.n	45e8 <__sfp+0x4c>
    45cc:	3468      	adds	r4, #104	; 0x68
    45ce:	e7f2      	b.n	45b6 <__sfp+0x1a>
    45d0:	2104      	movs	r1, #4
    45d2:	0038      	movs	r0, r7
    45d4:	f7ff ff98 	bl	4508 <__sfmoreglue>
    45d8:	6030      	str	r0, [r6, #0]
    45da:	2800      	cmp	r0, #0
    45dc:	d1f0      	bne.n	45c0 <__sfp+0x24>
    45de:	230c      	movs	r3, #12
    45e0:	0004      	movs	r4, r0
    45e2:	603b      	str	r3, [r7, #0]
    45e4:	0020      	movs	r0, r4
    45e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e8:	2301      	movs	r3, #1
    45ea:	0020      	movs	r0, r4
    45ec:	425b      	negs	r3, r3
    45ee:	81e3      	strh	r3, [r4, #14]
    45f0:	3302      	adds	r3, #2
    45f2:	81a3      	strh	r3, [r4, #12]
    45f4:	6665      	str	r5, [r4, #100]	; 0x64
    45f6:	6025      	str	r5, [r4, #0]
    45f8:	60a5      	str	r5, [r4, #8]
    45fa:	6065      	str	r5, [r4, #4]
    45fc:	6125      	str	r5, [r4, #16]
    45fe:	6165      	str	r5, [r4, #20]
    4600:	61a5      	str	r5, [r4, #24]
    4602:	2208      	movs	r2, #8
    4604:	0029      	movs	r1, r5
    4606:	305c      	adds	r0, #92	; 0x5c
    4608:	f7ff fdc3 	bl	4192 <memset>
    460c:	6365      	str	r5, [r4, #52]	; 0x34
    460e:	63a5      	str	r5, [r4, #56]	; 0x38
    4610:	64a5      	str	r5, [r4, #72]	; 0x48
    4612:	64e5      	str	r5, [r4, #76]	; 0x4c
    4614:	e7e6      	b.n	45e4 <__sfp+0x48>
    4616:	46c0      	nop			; (mov r8, r8)
    4618:	000053dc 	.word	0x000053dc

0000461c <_fwalk_reent>:
    461c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    461e:	0004      	movs	r4, r0
    4620:	0007      	movs	r7, r0
    4622:	2600      	movs	r6, #0
    4624:	9101      	str	r1, [sp, #4]
    4626:	3448      	adds	r4, #72	; 0x48
    4628:	2c00      	cmp	r4, #0
    462a:	d101      	bne.n	4630 <_fwalk_reent+0x14>
    462c:	0030      	movs	r0, r6
    462e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4630:	6863      	ldr	r3, [r4, #4]
    4632:	68a5      	ldr	r5, [r4, #8]
    4634:	9300      	str	r3, [sp, #0]
    4636:	9b00      	ldr	r3, [sp, #0]
    4638:	3b01      	subs	r3, #1
    463a:	9300      	str	r3, [sp, #0]
    463c:	d501      	bpl.n	4642 <_fwalk_reent+0x26>
    463e:	6824      	ldr	r4, [r4, #0]
    4640:	e7f2      	b.n	4628 <_fwalk_reent+0xc>
    4642:	89ab      	ldrh	r3, [r5, #12]
    4644:	2b01      	cmp	r3, #1
    4646:	d908      	bls.n	465a <_fwalk_reent+0x3e>
    4648:	220e      	movs	r2, #14
    464a:	5eab      	ldrsh	r3, [r5, r2]
    464c:	3301      	adds	r3, #1
    464e:	d004      	beq.n	465a <_fwalk_reent+0x3e>
    4650:	0029      	movs	r1, r5
    4652:	0038      	movs	r0, r7
    4654:	9b01      	ldr	r3, [sp, #4]
    4656:	4798      	blx	r3
    4658:	4306      	orrs	r6, r0
    465a:	3568      	adds	r5, #104	; 0x68
    465c:	e7eb      	b.n	4636 <_fwalk_reent+0x1a>
	...

00004660 <__swhatbuf_r>:
    4660:	b570      	push	{r4, r5, r6, lr}
    4662:	000e      	movs	r6, r1
    4664:	001d      	movs	r5, r3
    4666:	230e      	movs	r3, #14
    4668:	5ec9      	ldrsh	r1, [r1, r3]
    466a:	b090      	sub	sp, #64	; 0x40
    466c:	0014      	movs	r4, r2
    466e:	2900      	cmp	r1, #0
    4670:	da07      	bge.n	4682 <__swhatbuf_r+0x22>
    4672:	2300      	movs	r3, #0
    4674:	602b      	str	r3, [r5, #0]
    4676:	89b3      	ldrh	r3, [r6, #12]
    4678:	061b      	lsls	r3, r3, #24
    467a:	d411      	bmi.n	46a0 <__swhatbuf_r+0x40>
    467c:	2380      	movs	r3, #128	; 0x80
    467e:	00db      	lsls	r3, r3, #3
    4680:	e00f      	b.n	46a2 <__swhatbuf_r+0x42>
    4682:	aa01      	add	r2, sp, #4
    4684:	f000 fd26 	bl	50d4 <_fstat_r>
    4688:	2800      	cmp	r0, #0
    468a:	dbf2      	blt.n	4672 <__swhatbuf_r+0x12>
    468c:	22f0      	movs	r2, #240	; 0xf0
    468e:	9b02      	ldr	r3, [sp, #8]
    4690:	0212      	lsls	r2, r2, #8
    4692:	4013      	ands	r3, r2
    4694:	4a05      	ldr	r2, [pc, #20]	; (46ac <__swhatbuf_r+0x4c>)
    4696:	189b      	adds	r3, r3, r2
    4698:	425a      	negs	r2, r3
    469a:	4153      	adcs	r3, r2
    469c:	602b      	str	r3, [r5, #0]
    469e:	e7ed      	b.n	467c <__swhatbuf_r+0x1c>
    46a0:	2340      	movs	r3, #64	; 0x40
    46a2:	2000      	movs	r0, #0
    46a4:	6023      	str	r3, [r4, #0]
    46a6:	b010      	add	sp, #64	; 0x40
    46a8:	bd70      	pop	{r4, r5, r6, pc}
    46aa:	46c0      	nop			; (mov r8, r8)
    46ac:	ffffe000 	.word	0xffffe000

000046b0 <__smakebuf_r>:
    46b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    46b2:	2602      	movs	r6, #2
    46b4:	898b      	ldrh	r3, [r1, #12]
    46b6:	0005      	movs	r5, r0
    46b8:	000c      	movs	r4, r1
    46ba:	4233      	tst	r3, r6
    46bc:	d006      	beq.n	46cc <__smakebuf_r+0x1c>
    46be:	0023      	movs	r3, r4
    46c0:	3347      	adds	r3, #71	; 0x47
    46c2:	6023      	str	r3, [r4, #0]
    46c4:	6123      	str	r3, [r4, #16]
    46c6:	2301      	movs	r3, #1
    46c8:	6163      	str	r3, [r4, #20]
    46ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    46cc:	ab01      	add	r3, sp, #4
    46ce:	466a      	mov	r2, sp
    46d0:	f7ff ffc6 	bl	4660 <__swhatbuf_r>
    46d4:	9900      	ldr	r1, [sp, #0]
    46d6:	0007      	movs	r7, r0
    46d8:	0028      	movs	r0, r5
    46da:	f000 f881 	bl	47e0 <_malloc_r>
    46de:	2800      	cmp	r0, #0
    46e0:	d108      	bne.n	46f4 <__smakebuf_r+0x44>
    46e2:	220c      	movs	r2, #12
    46e4:	5ea3      	ldrsh	r3, [r4, r2]
    46e6:	059a      	lsls	r2, r3, #22
    46e8:	d4ef      	bmi.n	46ca <__smakebuf_r+0x1a>
    46ea:	2203      	movs	r2, #3
    46ec:	4393      	bics	r3, r2
    46ee:	431e      	orrs	r6, r3
    46f0:	81a6      	strh	r6, [r4, #12]
    46f2:	e7e4      	b.n	46be <__smakebuf_r+0xe>
    46f4:	4b0f      	ldr	r3, [pc, #60]	; (4734 <__smakebuf_r+0x84>)
    46f6:	62ab      	str	r3, [r5, #40]	; 0x28
    46f8:	2380      	movs	r3, #128	; 0x80
    46fa:	89a2      	ldrh	r2, [r4, #12]
    46fc:	6020      	str	r0, [r4, #0]
    46fe:	4313      	orrs	r3, r2
    4700:	81a3      	strh	r3, [r4, #12]
    4702:	9b00      	ldr	r3, [sp, #0]
    4704:	6120      	str	r0, [r4, #16]
    4706:	6163      	str	r3, [r4, #20]
    4708:	9b01      	ldr	r3, [sp, #4]
    470a:	2b00      	cmp	r3, #0
    470c:	d00d      	beq.n	472a <__smakebuf_r+0x7a>
    470e:	230e      	movs	r3, #14
    4710:	5ee1      	ldrsh	r1, [r4, r3]
    4712:	0028      	movs	r0, r5
    4714:	f000 fcf0 	bl	50f8 <_isatty_r>
    4718:	2800      	cmp	r0, #0
    471a:	d006      	beq.n	472a <__smakebuf_r+0x7a>
    471c:	2203      	movs	r2, #3
    471e:	89a3      	ldrh	r3, [r4, #12]
    4720:	4393      	bics	r3, r2
    4722:	001a      	movs	r2, r3
    4724:	2301      	movs	r3, #1
    4726:	4313      	orrs	r3, r2
    4728:	81a3      	strh	r3, [r4, #12]
    472a:	89a0      	ldrh	r0, [r4, #12]
    472c:	4338      	orrs	r0, r7
    472e:	81a0      	strh	r0, [r4, #12]
    4730:	e7cb      	b.n	46ca <__smakebuf_r+0x1a>
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	000044b1 	.word	0x000044b1

00004738 <malloc>:
    4738:	b510      	push	{r4, lr}
    473a:	4b03      	ldr	r3, [pc, #12]	; (4748 <malloc+0x10>)
    473c:	0001      	movs	r1, r0
    473e:	6818      	ldr	r0, [r3, #0]
    4740:	f000 f84e 	bl	47e0 <_malloc_r>
    4744:	bd10      	pop	{r4, pc}
    4746:	46c0      	nop			; (mov r8, r8)
    4748:	2000000c 	.word	0x2000000c

0000474c <_free_r>:
    474c:	b570      	push	{r4, r5, r6, lr}
    474e:	0005      	movs	r5, r0
    4750:	2900      	cmp	r1, #0
    4752:	d010      	beq.n	4776 <_free_r+0x2a>
    4754:	1f0c      	subs	r4, r1, #4
    4756:	6823      	ldr	r3, [r4, #0]
    4758:	2b00      	cmp	r3, #0
    475a:	da00      	bge.n	475e <_free_r+0x12>
    475c:	18e4      	adds	r4, r4, r3
    475e:	0028      	movs	r0, r5
    4760:	f000 fcfb 	bl	515a <__malloc_lock>
    4764:	4a1d      	ldr	r2, [pc, #116]	; (47dc <_free_r+0x90>)
    4766:	6813      	ldr	r3, [r2, #0]
    4768:	2b00      	cmp	r3, #0
    476a:	d105      	bne.n	4778 <_free_r+0x2c>
    476c:	6063      	str	r3, [r4, #4]
    476e:	6014      	str	r4, [r2, #0]
    4770:	0028      	movs	r0, r5
    4772:	f000 fcf3 	bl	515c <__malloc_unlock>
    4776:	bd70      	pop	{r4, r5, r6, pc}
    4778:	42a3      	cmp	r3, r4
    477a:	d909      	bls.n	4790 <_free_r+0x44>
    477c:	6821      	ldr	r1, [r4, #0]
    477e:	1860      	adds	r0, r4, r1
    4780:	4283      	cmp	r3, r0
    4782:	d1f3      	bne.n	476c <_free_r+0x20>
    4784:	6818      	ldr	r0, [r3, #0]
    4786:	685b      	ldr	r3, [r3, #4]
    4788:	1841      	adds	r1, r0, r1
    478a:	6021      	str	r1, [r4, #0]
    478c:	e7ee      	b.n	476c <_free_r+0x20>
    478e:	0013      	movs	r3, r2
    4790:	685a      	ldr	r2, [r3, #4]
    4792:	2a00      	cmp	r2, #0
    4794:	d001      	beq.n	479a <_free_r+0x4e>
    4796:	42a2      	cmp	r2, r4
    4798:	d9f9      	bls.n	478e <_free_r+0x42>
    479a:	6819      	ldr	r1, [r3, #0]
    479c:	1858      	adds	r0, r3, r1
    479e:	42a0      	cmp	r0, r4
    47a0:	d10b      	bne.n	47ba <_free_r+0x6e>
    47a2:	6820      	ldr	r0, [r4, #0]
    47a4:	1809      	adds	r1, r1, r0
    47a6:	1858      	adds	r0, r3, r1
    47a8:	6019      	str	r1, [r3, #0]
    47aa:	4282      	cmp	r2, r0
    47ac:	d1e0      	bne.n	4770 <_free_r+0x24>
    47ae:	6810      	ldr	r0, [r2, #0]
    47b0:	6852      	ldr	r2, [r2, #4]
    47b2:	1841      	adds	r1, r0, r1
    47b4:	6019      	str	r1, [r3, #0]
    47b6:	605a      	str	r2, [r3, #4]
    47b8:	e7da      	b.n	4770 <_free_r+0x24>
    47ba:	42a0      	cmp	r0, r4
    47bc:	d902      	bls.n	47c4 <_free_r+0x78>
    47be:	230c      	movs	r3, #12
    47c0:	602b      	str	r3, [r5, #0]
    47c2:	e7d5      	b.n	4770 <_free_r+0x24>
    47c4:	6821      	ldr	r1, [r4, #0]
    47c6:	1860      	adds	r0, r4, r1
    47c8:	4282      	cmp	r2, r0
    47ca:	d103      	bne.n	47d4 <_free_r+0x88>
    47cc:	6810      	ldr	r0, [r2, #0]
    47ce:	6852      	ldr	r2, [r2, #4]
    47d0:	1841      	adds	r1, r0, r1
    47d2:	6021      	str	r1, [r4, #0]
    47d4:	6062      	str	r2, [r4, #4]
    47d6:	605c      	str	r4, [r3, #4]
    47d8:	e7ca      	b.n	4770 <_free_r+0x24>
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	200000d4 	.word	0x200000d4

000047e0 <_malloc_r>:
    47e0:	2303      	movs	r3, #3
    47e2:	b570      	push	{r4, r5, r6, lr}
    47e4:	1ccd      	adds	r5, r1, #3
    47e6:	439d      	bics	r5, r3
    47e8:	3508      	adds	r5, #8
    47ea:	0006      	movs	r6, r0
    47ec:	2d0c      	cmp	r5, #12
    47ee:	d21e      	bcs.n	482e <_malloc_r+0x4e>
    47f0:	250c      	movs	r5, #12
    47f2:	42a9      	cmp	r1, r5
    47f4:	d81d      	bhi.n	4832 <_malloc_r+0x52>
    47f6:	0030      	movs	r0, r6
    47f8:	f000 fcaf 	bl	515a <__malloc_lock>
    47fc:	4a25      	ldr	r2, [pc, #148]	; (4894 <_malloc_r+0xb4>)
    47fe:	6814      	ldr	r4, [r2, #0]
    4800:	0021      	movs	r1, r4
    4802:	2900      	cmp	r1, #0
    4804:	d119      	bne.n	483a <_malloc_r+0x5a>
    4806:	4c24      	ldr	r4, [pc, #144]	; (4898 <_malloc_r+0xb8>)
    4808:	6823      	ldr	r3, [r4, #0]
    480a:	2b00      	cmp	r3, #0
    480c:	d103      	bne.n	4816 <_malloc_r+0x36>
    480e:	0030      	movs	r0, r6
    4810:	f000 fb10 	bl	4e34 <_sbrk_r>
    4814:	6020      	str	r0, [r4, #0]
    4816:	0029      	movs	r1, r5
    4818:	0030      	movs	r0, r6
    481a:	f000 fb0b 	bl	4e34 <_sbrk_r>
    481e:	1c43      	adds	r3, r0, #1
    4820:	d12c      	bne.n	487c <_malloc_r+0x9c>
    4822:	230c      	movs	r3, #12
    4824:	0030      	movs	r0, r6
    4826:	6033      	str	r3, [r6, #0]
    4828:	f000 fc98 	bl	515c <__malloc_unlock>
    482c:	e003      	b.n	4836 <_malloc_r+0x56>
    482e:	2d00      	cmp	r5, #0
    4830:	dadf      	bge.n	47f2 <_malloc_r+0x12>
    4832:	230c      	movs	r3, #12
    4834:	6033      	str	r3, [r6, #0]
    4836:	2000      	movs	r0, #0
    4838:	bd70      	pop	{r4, r5, r6, pc}
    483a:	680b      	ldr	r3, [r1, #0]
    483c:	1b5b      	subs	r3, r3, r5
    483e:	d41a      	bmi.n	4876 <_malloc_r+0x96>
    4840:	2b0b      	cmp	r3, #11
    4842:	d903      	bls.n	484c <_malloc_r+0x6c>
    4844:	600b      	str	r3, [r1, #0]
    4846:	18cc      	adds	r4, r1, r3
    4848:	6025      	str	r5, [r4, #0]
    484a:	e003      	b.n	4854 <_malloc_r+0x74>
    484c:	428c      	cmp	r4, r1
    484e:	d10e      	bne.n	486e <_malloc_r+0x8e>
    4850:	6863      	ldr	r3, [r4, #4]
    4852:	6013      	str	r3, [r2, #0]
    4854:	0030      	movs	r0, r6
    4856:	f000 fc81 	bl	515c <__malloc_unlock>
    485a:	0020      	movs	r0, r4
    485c:	2207      	movs	r2, #7
    485e:	300b      	adds	r0, #11
    4860:	1d23      	adds	r3, r4, #4
    4862:	4390      	bics	r0, r2
    4864:	1ac3      	subs	r3, r0, r3
    4866:	d0e7      	beq.n	4838 <_malloc_r+0x58>
    4868:	425a      	negs	r2, r3
    486a:	50e2      	str	r2, [r4, r3]
    486c:	e7e4      	b.n	4838 <_malloc_r+0x58>
    486e:	684b      	ldr	r3, [r1, #4]
    4870:	6063      	str	r3, [r4, #4]
    4872:	000c      	movs	r4, r1
    4874:	e7ee      	b.n	4854 <_malloc_r+0x74>
    4876:	000c      	movs	r4, r1
    4878:	6849      	ldr	r1, [r1, #4]
    487a:	e7c2      	b.n	4802 <_malloc_r+0x22>
    487c:	2303      	movs	r3, #3
    487e:	1cc4      	adds	r4, r0, #3
    4880:	439c      	bics	r4, r3
    4882:	42a0      	cmp	r0, r4
    4884:	d0e0      	beq.n	4848 <_malloc_r+0x68>
    4886:	1a21      	subs	r1, r4, r0
    4888:	0030      	movs	r0, r6
    488a:	f000 fad3 	bl	4e34 <_sbrk_r>
    488e:	1c43      	adds	r3, r0, #1
    4890:	d1da      	bne.n	4848 <_malloc_r+0x68>
    4892:	e7c6      	b.n	4822 <_malloc_r+0x42>
    4894:	200000d4 	.word	0x200000d4
    4898:	200000d8 	.word	0x200000d8

0000489c <__sfputc_r>:
    489c:	6893      	ldr	r3, [r2, #8]
    489e:	b510      	push	{r4, lr}
    48a0:	3b01      	subs	r3, #1
    48a2:	6093      	str	r3, [r2, #8]
    48a4:	2b00      	cmp	r3, #0
    48a6:	da05      	bge.n	48b4 <__sfputc_r+0x18>
    48a8:	6994      	ldr	r4, [r2, #24]
    48aa:	42a3      	cmp	r3, r4
    48ac:	db08      	blt.n	48c0 <__sfputc_r+0x24>
    48ae:	b2cb      	uxtb	r3, r1
    48b0:	2b0a      	cmp	r3, #10
    48b2:	d005      	beq.n	48c0 <__sfputc_r+0x24>
    48b4:	6813      	ldr	r3, [r2, #0]
    48b6:	1c58      	adds	r0, r3, #1
    48b8:	6010      	str	r0, [r2, #0]
    48ba:	7019      	strb	r1, [r3, #0]
    48bc:	b2c8      	uxtb	r0, r1
    48be:	bd10      	pop	{r4, pc}
    48c0:	f000 fb16 	bl	4ef0 <__swbuf_r>
    48c4:	e7fb      	b.n	48be <__sfputc_r+0x22>

000048c6 <__sfputs_r>:
    48c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48c8:	0006      	movs	r6, r0
    48ca:	000f      	movs	r7, r1
    48cc:	0014      	movs	r4, r2
    48ce:	18d5      	adds	r5, r2, r3
    48d0:	42ac      	cmp	r4, r5
    48d2:	d101      	bne.n	48d8 <__sfputs_r+0x12>
    48d4:	2000      	movs	r0, #0
    48d6:	e007      	b.n	48e8 <__sfputs_r+0x22>
    48d8:	7821      	ldrb	r1, [r4, #0]
    48da:	003a      	movs	r2, r7
    48dc:	0030      	movs	r0, r6
    48de:	f7ff ffdd 	bl	489c <__sfputc_r>
    48e2:	3401      	adds	r4, #1
    48e4:	1c43      	adds	r3, r0, #1
    48e6:	d1f3      	bne.n	48d0 <__sfputs_r+0xa>
    48e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000048ec <_vfiprintf_r>:
    48ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ee:	b09f      	sub	sp, #124	; 0x7c
    48f0:	0006      	movs	r6, r0
    48f2:	000f      	movs	r7, r1
    48f4:	0014      	movs	r4, r2
    48f6:	9305      	str	r3, [sp, #20]
    48f8:	2800      	cmp	r0, #0
    48fa:	d004      	beq.n	4906 <_vfiprintf_r+0x1a>
    48fc:	6983      	ldr	r3, [r0, #24]
    48fe:	2b00      	cmp	r3, #0
    4900:	d101      	bne.n	4906 <_vfiprintf_r+0x1a>
    4902:	f7ff fe17 	bl	4534 <__sinit>
    4906:	4b7f      	ldr	r3, [pc, #508]	; (4b04 <_vfiprintf_r+0x218>)
    4908:	429f      	cmp	r7, r3
    490a:	d15c      	bne.n	49c6 <_vfiprintf_r+0xda>
    490c:	6877      	ldr	r7, [r6, #4]
    490e:	89bb      	ldrh	r3, [r7, #12]
    4910:	071b      	lsls	r3, r3, #28
    4912:	d562      	bpl.n	49da <_vfiprintf_r+0xee>
    4914:	693b      	ldr	r3, [r7, #16]
    4916:	2b00      	cmp	r3, #0
    4918:	d05f      	beq.n	49da <_vfiprintf_r+0xee>
    491a:	2300      	movs	r3, #0
    491c:	ad06      	add	r5, sp, #24
    491e:	616b      	str	r3, [r5, #20]
    4920:	3320      	adds	r3, #32
    4922:	766b      	strb	r3, [r5, #25]
    4924:	3310      	adds	r3, #16
    4926:	76ab      	strb	r3, [r5, #26]
    4928:	9402      	str	r4, [sp, #8]
    492a:	9c02      	ldr	r4, [sp, #8]
    492c:	7823      	ldrb	r3, [r4, #0]
    492e:	2b00      	cmp	r3, #0
    4930:	d15d      	bne.n	49ee <_vfiprintf_r+0x102>
    4932:	9b02      	ldr	r3, [sp, #8]
    4934:	1ae3      	subs	r3, r4, r3
    4936:	9304      	str	r3, [sp, #16]
    4938:	d00d      	beq.n	4956 <_vfiprintf_r+0x6a>
    493a:	9b04      	ldr	r3, [sp, #16]
    493c:	9a02      	ldr	r2, [sp, #8]
    493e:	0039      	movs	r1, r7
    4940:	0030      	movs	r0, r6
    4942:	f7ff ffc0 	bl	48c6 <__sfputs_r>
    4946:	1c43      	adds	r3, r0, #1
    4948:	d100      	bne.n	494c <_vfiprintf_r+0x60>
    494a:	e0cc      	b.n	4ae6 <_vfiprintf_r+0x1fa>
    494c:	696a      	ldr	r2, [r5, #20]
    494e:	9b04      	ldr	r3, [sp, #16]
    4950:	4694      	mov	ip, r2
    4952:	4463      	add	r3, ip
    4954:	616b      	str	r3, [r5, #20]
    4956:	7823      	ldrb	r3, [r4, #0]
    4958:	2b00      	cmp	r3, #0
    495a:	d100      	bne.n	495e <_vfiprintf_r+0x72>
    495c:	e0c3      	b.n	4ae6 <_vfiprintf_r+0x1fa>
    495e:	2201      	movs	r2, #1
    4960:	2300      	movs	r3, #0
    4962:	4252      	negs	r2, r2
    4964:	606a      	str	r2, [r5, #4]
    4966:	a902      	add	r1, sp, #8
    4968:	3254      	adds	r2, #84	; 0x54
    496a:	1852      	adds	r2, r2, r1
    496c:	3401      	adds	r4, #1
    496e:	602b      	str	r3, [r5, #0]
    4970:	60eb      	str	r3, [r5, #12]
    4972:	60ab      	str	r3, [r5, #8]
    4974:	7013      	strb	r3, [r2, #0]
    4976:	65ab      	str	r3, [r5, #88]	; 0x58
    4978:	7821      	ldrb	r1, [r4, #0]
    497a:	2205      	movs	r2, #5
    497c:	4862      	ldr	r0, [pc, #392]	; (4b08 <_vfiprintf_r+0x21c>)
    497e:	f000 fbe1 	bl	5144 <memchr>
    4982:	1c63      	adds	r3, r4, #1
    4984:	469c      	mov	ip, r3
    4986:	2800      	cmp	r0, #0
    4988:	d135      	bne.n	49f6 <_vfiprintf_r+0x10a>
    498a:	6829      	ldr	r1, [r5, #0]
    498c:	06cb      	lsls	r3, r1, #27
    498e:	d504      	bpl.n	499a <_vfiprintf_r+0xae>
    4990:	2353      	movs	r3, #83	; 0x53
    4992:	aa02      	add	r2, sp, #8
    4994:	3020      	adds	r0, #32
    4996:	189b      	adds	r3, r3, r2
    4998:	7018      	strb	r0, [r3, #0]
    499a:	070b      	lsls	r3, r1, #28
    499c:	d504      	bpl.n	49a8 <_vfiprintf_r+0xbc>
    499e:	2353      	movs	r3, #83	; 0x53
    49a0:	202b      	movs	r0, #43	; 0x2b
    49a2:	aa02      	add	r2, sp, #8
    49a4:	189b      	adds	r3, r3, r2
    49a6:	7018      	strb	r0, [r3, #0]
    49a8:	7823      	ldrb	r3, [r4, #0]
    49aa:	2b2a      	cmp	r3, #42	; 0x2a
    49ac:	d02c      	beq.n	4a08 <_vfiprintf_r+0x11c>
    49ae:	2000      	movs	r0, #0
    49b0:	210a      	movs	r1, #10
    49b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49b4:	7822      	ldrb	r2, [r4, #0]
    49b6:	3a30      	subs	r2, #48	; 0x30
    49b8:	2a09      	cmp	r2, #9
    49ba:	d800      	bhi.n	49be <_vfiprintf_r+0xd2>
    49bc:	e06b      	b.n	4a96 <_vfiprintf_r+0x1aa>
    49be:	2800      	cmp	r0, #0
    49c0:	d02a      	beq.n	4a18 <_vfiprintf_r+0x12c>
    49c2:	9309      	str	r3, [sp, #36]	; 0x24
    49c4:	e028      	b.n	4a18 <_vfiprintf_r+0x12c>
    49c6:	4b51      	ldr	r3, [pc, #324]	; (4b0c <_vfiprintf_r+0x220>)
    49c8:	429f      	cmp	r7, r3
    49ca:	d101      	bne.n	49d0 <_vfiprintf_r+0xe4>
    49cc:	68b7      	ldr	r7, [r6, #8]
    49ce:	e79e      	b.n	490e <_vfiprintf_r+0x22>
    49d0:	4b4f      	ldr	r3, [pc, #316]	; (4b10 <_vfiprintf_r+0x224>)
    49d2:	429f      	cmp	r7, r3
    49d4:	d19b      	bne.n	490e <_vfiprintf_r+0x22>
    49d6:	68f7      	ldr	r7, [r6, #12]
    49d8:	e799      	b.n	490e <_vfiprintf_r+0x22>
    49da:	0039      	movs	r1, r7
    49dc:	0030      	movs	r0, r6
    49de:	f000 faf1 	bl	4fc4 <__swsetup_r>
    49e2:	2800      	cmp	r0, #0
    49e4:	d099      	beq.n	491a <_vfiprintf_r+0x2e>
    49e6:	2001      	movs	r0, #1
    49e8:	4240      	negs	r0, r0
    49ea:	b01f      	add	sp, #124	; 0x7c
    49ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ee:	2b25      	cmp	r3, #37	; 0x25
    49f0:	d09f      	beq.n	4932 <_vfiprintf_r+0x46>
    49f2:	3401      	adds	r4, #1
    49f4:	e79a      	b.n	492c <_vfiprintf_r+0x40>
    49f6:	4b44      	ldr	r3, [pc, #272]	; (4b08 <_vfiprintf_r+0x21c>)
    49f8:	6829      	ldr	r1, [r5, #0]
    49fa:	1ac0      	subs	r0, r0, r3
    49fc:	2301      	movs	r3, #1
    49fe:	4083      	lsls	r3, r0
    4a00:	430b      	orrs	r3, r1
    4a02:	602b      	str	r3, [r5, #0]
    4a04:	4664      	mov	r4, ip
    4a06:	e7b7      	b.n	4978 <_vfiprintf_r+0x8c>
    4a08:	9b05      	ldr	r3, [sp, #20]
    4a0a:	1d18      	adds	r0, r3, #4
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	9005      	str	r0, [sp, #20]
    4a10:	2b00      	cmp	r3, #0
    4a12:	db3a      	blt.n	4a8a <_vfiprintf_r+0x19e>
    4a14:	9309      	str	r3, [sp, #36]	; 0x24
    4a16:	4664      	mov	r4, ip
    4a18:	7823      	ldrb	r3, [r4, #0]
    4a1a:	2b2e      	cmp	r3, #46	; 0x2e
    4a1c:	d10b      	bne.n	4a36 <_vfiprintf_r+0x14a>
    4a1e:	7863      	ldrb	r3, [r4, #1]
    4a20:	1c62      	adds	r2, r4, #1
    4a22:	2b2a      	cmp	r3, #42	; 0x2a
    4a24:	d13f      	bne.n	4aa6 <_vfiprintf_r+0x1ba>
    4a26:	9b05      	ldr	r3, [sp, #20]
    4a28:	3402      	adds	r4, #2
    4a2a:	1d1a      	adds	r2, r3, #4
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	9205      	str	r2, [sp, #20]
    4a30:	2b00      	cmp	r3, #0
    4a32:	db35      	blt.n	4aa0 <_vfiprintf_r+0x1b4>
    4a34:	9307      	str	r3, [sp, #28]
    4a36:	7821      	ldrb	r1, [r4, #0]
    4a38:	2203      	movs	r2, #3
    4a3a:	4836      	ldr	r0, [pc, #216]	; (4b14 <_vfiprintf_r+0x228>)
    4a3c:	f000 fb82 	bl	5144 <memchr>
    4a40:	2800      	cmp	r0, #0
    4a42:	d007      	beq.n	4a54 <_vfiprintf_r+0x168>
    4a44:	4b33      	ldr	r3, [pc, #204]	; (4b14 <_vfiprintf_r+0x228>)
    4a46:	682a      	ldr	r2, [r5, #0]
    4a48:	1ac0      	subs	r0, r0, r3
    4a4a:	2340      	movs	r3, #64	; 0x40
    4a4c:	4083      	lsls	r3, r0
    4a4e:	4313      	orrs	r3, r2
    4a50:	602b      	str	r3, [r5, #0]
    4a52:	3401      	adds	r4, #1
    4a54:	7821      	ldrb	r1, [r4, #0]
    4a56:	1c63      	adds	r3, r4, #1
    4a58:	2206      	movs	r2, #6
    4a5a:	482f      	ldr	r0, [pc, #188]	; (4b18 <_vfiprintf_r+0x22c>)
    4a5c:	9302      	str	r3, [sp, #8]
    4a5e:	7629      	strb	r1, [r5, #24]
    4a60:	f000 fb70 	bl	5144 <memchr>
    4a64:	2800      	cmp	r0, #0
    4a66:	d044      	beq.n	4af2 <_vfiprintf_r+0x206>
    4a68:	4b2c      	ldr	r3, [pc, #176]	; (4b1c <_vfiprintf_r+0x230>)
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d12f      	bne.n	4ace <_vfiprintf_r+0x1e2>
    4a6e:	6829      	ldr	r1, [r5, #0]
    4a70:	9b05      	ldr	r3, [sp, #20]
    4a72:	2207      	movs	r2, #7
    4a74:	05c9      	lsls	r1, r1, #23
    4a76:	d528      	bpl.n	4aca <_vfiprintf_r+0x1de>
    4a78:	189b      	adds	r3, r3, r2
    4a7a:	4393      	bics	r3, r2
    4a7c:	3308      	adds	r3, #8
    4a7e:	9305      	str	r3, [sp, #20]
    4a80:	696b      	ldr	r3, [r5, #20]
    4a82:	9a03      	ldr	r2, [sp, #12]
    4a84:	189b      	adds	r3, r3, r2
    4a86:	616b      	str	r3, [r5, #20]
    4a88:	e74f      	b.n	492a <_vfiprintf_r+0x3e>
    4a8a:	425b      	negs	r3, r3
    4a8c:	60eb      	str	r3, [r5, #12]
    4a8e:	2302      	movs	r3, #2
    4a90:	430b      	orrs	r3, r1
    4a92:	602b      	str	r3, [r5, #0]
    4a94:	e7bf      	b.n	4a16 <_vfiprintf_r+0x12a>
    4a96:	434b      	muls	r3, r1
    4a98:	3401      	adds	r4, #1
    4a9a:	189b      	adds	r3, r3, r2
    4a9c:	2001      	movs	r0, #1
    4a9e:	e789      	b.n	49b4 <_vfiprintf_r+0xc8>
    4aa0:	2301      	movs	r3, #1
    4aa2:	425b      	negs	r3, r3
    4aa4:	e7c6      	b.n	4a34 <_vfiprintf_r+0x148>
    4aa6:	2300      	movs	r3, #0
    4aa8:	0014      	movs	r4, r2
    4aaa:	200a      	movs	r0, #10
    4aac:	001a      	movs	r2, r3
    4aae:	606b      	str	r3, [r5, #4]
    4ab0:	7821      	ldrb	r1, [r4, #0]
    4ab2:	3930      	subs	r1, #48	; 0x30
    4ab4:	2909      	cmp	r1, #9
    4ab6:	d903      	bls.n	4ac0 <_vfiprintf_r+0x1d4>
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d0bc      	beq.n	4a36 <_vfiprintf_r+0x14a>
    4abc:	9207      	str	r2, [sp, #28]
    4abe:	e7ba      	b.n	4a36 <_vfiprintf_r+0x14a>
    4ac0:	4342      	muls	r2, r0
    4ac2:	3401      	adds	r4, #1
    4ac4:	1852      	adds	r2, r2, r1
    4ac6:	2301      	movs	r3, #1
    4ac8:	e7f2      	b.n	4ab0 <_vfiprintf_r+0x1c4>
    4aca:	3307      	adds	r3, #7
    4acc:	e7d5      	b.n	4a7a <_vfiprintf_r+0x18e>
    4ace:	ab05      	add	r3, sp, #20
    4ad0:	9300      	str	r3, [sp, #0]
    4ad2:	003a      	movs	r2, r7
    4ad4:	4b12      	ldr	r3, [pc, #72]	; (4b20 <_vfiprintf_r+0x234>)
    4ad6:	0029      	movs	r1, r5
    4ad8:	0030      	movs	r0, r6
    4ada:	e000      	b.n	4ade <_vfiprintf_r+0x1f2>
    4adc:	bf00      	nop
    4ade:	9003      	str	r0, [sp, #12]
    4ae0:	9b03      	ldr	r3, [sp, #12]
    4ae2:	3301      	adds	r3, #1
    4ae4:	d1cc      	bne.n	4a80 <_vfiprintf_r+0x194>
    4ae6:	89bb      	ldrh	r3, [r7, #12]
    4ae8:	065b      	lsls	r3, r3, #25
    4aea:	d500      	bpl.n	4aee <_vfiprintf_r+0x202>
    4aec:	e77b      	b.n	49e6 <_vfiprintf_r+0xfa>
    4aee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4af0:	e77b      	b.n	49ea <_vfiprintf_r+0xfe>
    4af2:	ab05      	add	r3, sp, #20
    4af4:	9300      	str	r3, [sp, #0]
    4af6:	003a      	movs	r2, r7
    4af8:	4b09      	ldr	r3, [pc, #36]	; (4b20 <_vfiprintf_r+0x234>)
    4afa:	0029      	movs	r1, r5
    4afc:	0030      	movs	r0, r6
    4afe:	f000 f87f 	bl	4c00 <_printf_i>
    4b02:	e7ec      	b.n	4ade <_vfiprintf_r+0x1f2>
    4b04:	00005400 	.word	0x00005400
    4b08:	00005440 	.word	0x00005440
    4b0c:	00005420 	.word	0x00005420
    4b10:	000053e0 	.word	0x000053e0
    4b14:	00005446 	.word	0x00005446
    4b18:	0000544a 	.word	0x0000544a
    4b1c:	00000000 	.word	0x00000000
    4b20:	000048c7 	.word	0x000048c7

00004b24 <_printf_common>:
    4b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b26:	0015      	movs	r5, r2
    4b28:	9301      	str	r3, [sp, #4]
    4b2a:	688a      	ldr	r2, [r1, #8]
    4b2c:	690b      	ldr	r3, [r1, #16]
    4b2e:	9000      	str	r0, [sp, #0]
    4b30:	000c      	movs	r4, r1
    4b32:	4293      	cmp	r3, r2
    4b34:	da00      	bge.n	4b38 <_printf_common+0x14>
    4b36:	0013      	movs	r3, r2
    4b38:	0022      	movs	r2, r4
    4b3a:	602b      	str	r3, [r5, #0]
    4b3c:	3243      	adds	r2, #67	; 0x43
    4b3e:	7812      	ldrb	r2, [r2, #0]
    4b40:	2a00      	cmp	r2, #0
    4b42:	d001      	beq.n	4b48 <_printf_common+0x24>
    4b44:	3301      	adds	r3, #1
    4b46:	602b      	str	r3, [r5, #0]
    4b48:	6823      	ldr	r3, [r4, #0]
    4b4a:	069b      	lsls	r3, r3, #26
    4b4c:	d502      	bpl.n	4b54 <_printf_common+0x30>
    4b4e:	682b      	ldr	r3, [r5, #0]
    4b50:	3302      	adds	r3, #2
    4b52:	602b      	str	r3, [r5, #0]
    4b54:	2706      	movs	r7, #6
    4b56:	6823      	ldr	r3, [r4, #0]
    4b58:	401f      	ands	r7, r3
    4b5a:	d027      	beq.n	4bac <_printf_common+0x88>
    4b5c:	0023      	movs	r3, r4
    4b5e:	3343      	adds	r3, #67	; 0x43
    4b60:	781b      	ldrb	r3, [r3, #0]
    4b62:	1e5a      	subs	r2, r3, #1
    4b64:	4193      	sbcs	r3, r2
    4b66:	6822      	ldr	r2, [r4, #0]
    4b68:	0692      	lsls	r2, r2, #26
    4b6a:	d430      	bmi.n	4bce <_printf_common+0xaa>
    4b6c:	0022      	movs	r2, r4
    4b6e:	9901      	ldr	r1, [sp, #4]
    4b70:	3243      	adds	r2, #67	; 0x43
    4b72:	9800      	ldr	r0, [sp, #0]
    4b74:	9e08      	ldr	r6, [sp, #32]
    4b76:	47b0      	blx	r6
    4b78:	1c43      	adds	r3, r0, #1
    4b7a:	d025      	beq.n	4bc8 <_printf_common+0xa4>
    4b7c:	2306      	movs	r3, #6
    4b7e:	6820      	ldr	r0, [r4, #0]
    4b80:	682a      	ldr	r2, [r5, #0]
    4b82:	68e1      	ldr	r1, [r4, #12]
    4b84:	4003      	ands	r3, r0
    4b86:	2500      	movs	r5, #0
    4b88:	2b04      	cmp	r3, #4
    4b8a:	d103      	bne.n	4b94 <_printf_common+0x70>
    4b8c:	1a8d      	subs	r5, r1, r2
    4b8e:	43eb      	mvns	r3, r5
    4b90:	17db      	asrs	r3, r3, #31
    4b92:	401d      	ands	r5, r3
    4b94:	68a3      	ldr	r3, [r4, #8]
    4b96:	6922      	ldr	r2, [r4, #16]
    4b98:	4293      	cmp	r3, r2
    4b9a:	dd01      	ble.n	4ba0 <_printf_common+0x7c>
    4b9c:	1a9b      	subs	r3, r3, r2
    4b9e:	18ed      	adds	r5, r5, r3
    4ba0:	2700      	movs	r7, #0
    4ba2:	42bd      	cmp	r5, r7
    4ba4:	d120      	bne.n	4be8 <_printf_common+0xc4>
    4ba6:	2000      	movs	r0, #0
    4ba8:	e010      	b.n	4bcc <_printf_common+0xa8>
    4baa:	3701      	adds	r7, #1
    4bac:	68e3      	ldr	r3, [r4, #12]
    4bae:	682a      	ldr	r2, [r5, #0]
    4bb0:	1a9b      	subs	r3, r3, r2
    4bb2:	429f      	cmp	r7, r3
    4bb4:	dad2      	bge.n	4b5c <_printf_common+0x38>
    4bb6:	0022      	movs	r2, r4
    4bb8:	2301      	movs	r3, #1
    4bba:	3219      	adds	r2, #25
    4bbc:	9901      	ldr	r1, [sp, #4]
    4bbe:	9800      	ldr	r0, [sp, #0]
    4bc0:	9e08      	ldr	r6, [sp, #32]
    4bc2:	47b0      	blx	r6
    4bc4:	1c43      	adds	r3, r0, #1
    4bc6:	d1f0      	bne.n	4baa <_printf_common+0x86>
    4bc8:	2001      	movs	r0, #1
    4bca:	4240      	negs	r0, r0
    4bcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4bce:	2030      	movs	r0, #48	; 0x30
    4bd0:	18e1      	adds	r1, r4, r3
    4bd2:	3143      	adds	r1, #67	; 0x43
    4bd4:	7008      	strb	r0, [r1, #0]
    4bd6:	0021      	movs	r1, r4
    4bd8:	1c5a      	adds	r2, r3, #1
    4bda:	3145      	adds	r1, #69	; 0x45
    4bdc:	7809      	ldrb	r1, [r1, #0]
    4bde:	18a2      	adds	r2, r4, r2
    4be0:	3243      	adds	r2, #67	; 0x43
    4be2:	3302      	adds	r3, #2
    4be4:	7011      	strb	r1, [r2, #0]
    4be6:	e7c1      	b.n	4b6c <_printf_common+0x48>
    4be8:	0022      	movs	r2, r4
    4bea:	2301      	movs	r3, #1
    4bec:	321a      	adds	r2, #26
    4bee:	9901      	ldr	r1, [sp, #4]
    4bf0:	9800      	ldr	r0, [sp, #0]
    4bf2:	9e08      	ldr	r6, [sp, #32]
    4bf4:	47b0      	blx	r6
    4bf6:	1c43      	adds	r3, r0, #1
    4bf8:	d0e6      	beq.n	4bc8 <_printf_common+0xa4>
    4bfa:	3701      	adds	r7, #1
    4bfc:	e7d1      	b.n	4ba2 <_printf_common+0x7e>
	...

00004c00 <_printf_i>:
    4c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c02:	b08b      	sub	sp, #44	; 0x2c
    4c04:	9206      	str	r2, [sp, #24]
    4c06:	000a      	movs	r2, r1
    4c08:	3243      	adds	r2, #67	; 0x43
    4c0a:	9307      	str	r3, [sp, #28]
    4c0c:	9005      	str	r0, [sp, #20]
    4c0e:	9204      	str	r2, [sp, #16]
    4c10:	7e0a      	ldrb	r2, [r1, #24]
    4c12:	000c      	movs	r4, r1
    4c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4c16:	2a6e      	cmp	r2, #110	; 0x6e
    4c18:	d100      	bne.n	4c1c <_printf_i+0x1c>
    4c1a:	e08f      	b.n	4d3c <_printf_i+0x13c>
    4c1c:	d817      	bhi.n	4c4e <_printf_i+0x4e>
    4c1e:	2a63      	cmp	r2, #99	; 0x63
    4c20:	d02c      	beq.n	4c7c <_printf_i+0x7c>
    4c22:	d808      	bhi.n	4c36 <_printf_i+0x36>
    4c24:	2a00      	cmp	r2, #0
    4c26:	d100      	bne.n	4c2a <_printf_i+0x2a>
    4c28:	e099      	b.n	4d5e <_printf_i+0x15e>
    4c2a:	2a58      	cmp	r2, #88	; 0x58
    4c2c:	d054      	beq.n	4cd8 <_printf_i+0xd8>
    4c2e:	0026      	movs	r6, r4
    4c30:	3642      	adds	r6, #66	; 0x42
    4c32:	7032      	strb	r2, [r6, #0]
    4c34:	e029      	b.n	4c8a <_printf_i+0x8a>
    4c36:	2a64      	cmp	r2, #100	; 0x64
    4c38:	d001      	beq.n	4c3e <_printf_i+0x3e>
    4c3a:	2a69      	cmp	r2, #105	; 0x69
    4c3c:	d1f7      	bne.n	4c2e <_printf_i+0x2e>
    4c3e:	6821      	ldr	r1, [r4, #0]
    4c40:	681a      	ldr	r2, [r3, #0]
    4c42:	0608      	lsls	r0, r1, #24
    4c44:	d523      	bpl.n	4c8e <_printf_i+0x8e>
    4c46:	1d11      	adds	r1, r2, #4
    4c48:	6019      	str	r1, [r3, #0]
    4c4a:	6815      	ldr	r5, [r2, #0]
    4c4c:	e025      	b.n	4c9a <_printf_i+0x9a>
    4c4e:	2a73      	cmp	r2, #115	; 0x73
    4c50:	d100      	bne.n	4c54 <_printf_i+0x54>
    4c52:	e088      	b.n	4d66 <_printf_i+0x166>
    4c54:	d808      	bhi.n	4c68 <_printf_i+0x68>
    4c56:	2a6f      	cmp	r2, #111	; 0x6f
    4c58:	d029      	beq.n	4cae <_printf_i+0xae>
    4c5a:	2a70      	cmp	r2, #112	; 0x70
    4c5c:	d1e7      	bne.n	4c2e <_printf_i+0x2e>
    4c5e:	2220      	movs	r2, #32
    4c60:	6809      	ldr	r1, [r1, #0]
    4c62:	430a      	orrs	r2, r1
    4c64:	6022      	str	r2, [r4, #0]
    4c66:	e003      	b.n	4c70 <_printf_i+0x70>
    4c68:	2a75      	cmp	r2, #117	; 0x75
    4c6a:	d020      	beq.n	4cae <_printf_i+0xae>
    4c6c:	2a78      	cmp	r2, #120	; 0x78
    4c6e:	d1de      	bne.n	4c2e <_printf_i+0x2e>
    4c70:	0022      	movs	r2, r4
    4c72:	2178      	movs	r1, #120	; 0x78
    4c74:	3245      	adds	r2, #69	; 0x45
    4c76:	7011      	strb	r1, [r2, #0]
    4c78:	4a6c      	ldr	r2, [pc, #432]	; (4e2c <_printf_i+0x22c>)
    4c7a:	e030      	b.n	4cde <_printf_i+0xde>
    4c7c:	000e      	movs	r6, r1
    4c7e:	681a      	ldr	r2, [r3, #0]
    4c80:	3642      	adds	r6, #66	; 0x42
    4c82:	1d11      	adds	r1, r2, #4
    4c84:	6019      	str	r1, [r3, #0]
    4c86:	6813      	ldr	r3, [r2, #0]
    4c88:	7033      	strb	r3, [r6, #0]
    4c8a:	2301      	movs	r3, #1
    4c8c:	e079      	b.n	4d82 <_printf_i+0x182>
    4c8e:	0649      	lsls	r1, r1, #25
    4c90:	d5d9      	bpl.n	4c46 <_printf_i+0x46>
    4c92:	1d11      	adds	r1, r2, #4
    4c94:	6019      	str	r1, [r3, #0]
    4c96:	2300      	movs	r3, #0
    4c98:	5ed5      	ldrsh	r5, [r2, r3]
    4c9a:	2d00      	cmp	r5, #0
    4c9c:	da03      	bge.n	4ca6 <_printf_i+0xa6>
    4c9e:	232d      	movs	r3, #45	; 0x2d
    4ca0:	9a04      	ldr	r2, [sp, #16]
    4ca2:	426d      	negs	r5, r5
    4ca4:	7013      	strb	r3, [r2, #0]
    4ca6:	4b62      	ldr	r3, [pc, #392]	; (4e30 <_printf_i+0x230>)
    4ca8:	270a      	movs	r7, #10
    4caa:	9303      	str	r3, [sp, #12]
    4cac:	e02f      	b.n	4d0e <_printf_i+0x10e>
    4cae:	6820      	ldr	r0, [r4, #0]
    4cb0:	6819      	ldr	r1, [r3, #0]
    4cb2:	0605      	lsls	r5, r0, #24
    4cb4:	d503      	bpl.n	4cbe <_printf_i+0xbe>
    4cb6:	1d08      	adds	r0, r1, #4
    4cb8:	6018      	str	r0, [r3, #0]
    4cba:	680d      	ldr	r5, [r1, #0]
    4cbc:	e005      	b.n	4cca <_printf_i+0xca>
    4cbe:	0640      	lsls	r0, r0, #25
    4cc0:	d5f9      	bpl.n	4cb6 <_printf_i+0xb6>
    4cc2:	680d      	ldr	r5, [r1, #0]
    4cc4:	1d08      	adds	r0, r1, #4
    4cc6:	6018      	str	r0, [r3, #0]
    4cc8:	b2ad      	uxth	r5, r5
    4cca:	4b59      	ldr	r3, [pc, #356]	; (4e30 <_printf_i+0x230>)
    4ccc:	2708      	movs	r7, #8
    4cce:	9303      	str	r3, [sp, #12]
    4cd0:	2a6f      	cmp	r2, #111	; 0x6f
    4cd2:	d018      	beq.n	4d06 <_printf_i+0x106>
    4cd4:	270a      	movs	r7, #10
    4cd6:	e016      	b.n	4d06 <_printf_i+0x106>
    4cd8:	3145      	adds	r1, #69	; 0x45
    4cda:	700a      	strb	r2, [r1, #0]
    4cdc:	4a54      	ldr	r2, [pc, #336]	; (4e30 <_printf_i+0x230>)
    4cde:	9203      	str	r2, [sp, #12]
    4ce0:	681a      	ldr	r2, [r3, #0]
    4ce2:	6821      	ldr	r1, [r4, #0]
    4ce4:	1d10      	adds	r0, r2, #4
    4ce6:	6018      	str	r0, [r3, #0]
    4ce8:	6815      	ldr	r5, [r2, #0]
    4cea:	0608      	lsls	r0, r1, #24
    4cec:	d522      	bpl.n	4d34 <_printf_i+0x134>
    4cee:	07cb      	lsls	r3, r1, #31
    4cf0:	d502      	bpl.n	4cf8 <_printf_i+0xf8>
    4cf2:	2320      	movs	r3, #32
    4cf4:	4319      	orrs	r1, r3
    4cf6:	6021      	str	r1, [r4, #0]
    4cf8:	2710      	movs	r7, #16
    4cfa:	2d00      	cmp	r5, #0
    4cfc:	d103      	bne.n	4d06 <_printf_i+0x106>
    4cfe:	2320      	movs	r3, #32
    4d00:	6822      	ldr	r2, [r4, #0]
    4d02:	439a      	bics	r2, r3
    4d04:	6022      	str	r2, [r4, #0]
    4d06:	0023      	movs	r3, r4
    4d08:	2200      	movs	r2, #0
    4d0a:	3343      	adds	r3, #67	; 0x43
    4d0c:	701a      	strb	r2, [r3, #0]
    4d0e:	6863      	ldr	r3, [r4, #4]
    4d10:	60a3      	str	r3, [r4, #8]
    4d12:	2b00      	cmp	r3, #0
    4d14:	db5c      	blt.n	4dd0 <_printf_i+0x1d0>
    4d16:	2204      	movs	r2, #4
    4d18:	6821      	ldr	r1, [r4, #0]
    4d1a:	4391      	bics	r1, r2
    4d1c:	6021      	str	r1, [r4, #0]
    4d1e:	2d00      	cmp	r5, #0
    4d20:	d158      	bne.n	4dd4 <_printf_i+0x1d4>
    4d22:	9e04      	ldr	r6, [sp, #16]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d064      	beq.n	4df2 <_printf_i+0x1f2>
    4d28:	0026      	movs	r6, r4
    4d2a:	9b03      	ldr	r3, [sp, #12]
    4d2c:	3642      	adds	r6, #66	; 0x42
    4d2e:	781b      	ldrb	r3, [r3, #0]
    4d30:	7033      	strb	r3, [r6, #0]
    4d32:	e05e      	b.n	4df2 <_printf_i+0x1f2>
    4d34:	0648      	lsls	r0, r1, #25
    4d36:	d5da      	bpl.n	4cee <_printf_i+0xee>
    4d38:	b2ad      	uxth	r5, r5
    4d3a:	e7d8      	b.n	4cee <_printf_i+0xee>
    4d3c:	6809      	ldr	r1, [r1, #0]
    4d3e:	681a      	ldr	r2, [r3, #0]
    4d40:	0608      	lsls	r0, r1, #24
    4d42:	d505      	bpl.n	4d50 <_printf_i+0x150>
    4d44:	1d11      	adds	r1, r2, #4
    4d46:	6019      	str	r1, [r3, #0]
    4d48:	6813      	ldr	r3, [r2, #0]
    4d4a:	6962      	ldr	r2, [r4, #20]
    4d4c:	601a      	str	r2, [r3, #0]
    4d4e:	e006      	b.n	4d5e <_printf_i+0x15e>
    4d50:	0649      	lsls	r1, r1, #25
    4d52:	d5f7      	bpl.n	4d44 <_printf_i+0x144>
    4d54:	1d11      	adds	r1, r2, #4
    4d56:	6019      	str	r1, [r3, #0]
    4d58:	6813      	ldr	r3, [r2, #0]
    4d5a:	8aa2      	ldrh	r2, [r4, #20]
    4d5c:	801a      	strh	r2, [r3, #0]
    4d5e:	2300      	movs	r3, #0
    4d60:	9e04      	ldr	r6, [sp, #16]
    4d62:	6123      	str	r3, [r4, #16]
    4d64:	e054      	b.n	4e10 <_printf_i+0x210>
    4d66:	681a      	ldr	r2, [r3, #0]
    4d68:	1d11      	adds	r1, r2, #4
    4d6a:	6019      	str	r1, [r3, #0]
    4d6c:	6816      	ldr	r6, [r2, #0]
    4d6e:	2100      	movs	r1, #0
    4d70:	6862      	ldr	r2, [r4, #4]
    4d72:	0030      	movs	r0, r6
    4d74:	f000 f9e6 	bl	5144 <memchr>
    4d78:	2800      	cmp	r0, #0
    4d7a:	d001      	beq.n	4d80 <_printf_i+0x180>
    4d7c:	1b80      	subs	r0, r0, r6
    4d7e:	6060      	str	r0, [r4, #4]
    4d80:	6863      	ldr	r3, [r4, #4]
    4d82:	6123      	str	r3, [r4, #16]
    4d84:	2300      	movs	r3, #0
    4d86:	9a04      	ldr	r2, [sp, #16]
    4d88:	7013      	strb	r3, [r2, #0]
    4d8a:	e041      	b.n	4e10 <_printf_i+0x210>
    4d8c:	6923      	ldr	r3, [r4, #16]
    4d8e:	0032      	movs	r2, r6
    4d90:	9906      	ldr	r1, [sp, #24]
    4d92:	9805      	ldr	r0, [sp, #20]
    4d94:	9d07      	ldr	r5, [sp, #28]
    4d96:	47a8      	blx	r5
    4d98:	1c43      	adds	r3, r0, #1
    4d9a:	d043      	beq.n	4e24 <_printf_i+0x224>
    4d9c:	6823      	ldr	r3, [r4, #0]
    4d9e:	2500      	movs	r5, #0
    4da0:	079b      	lsls	r3, r3, #30
    4da2:	d40f      	bmi.n	4dc4 <_printf_i+0x1c4>
    4da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4da6:	68e0      	ldr	r0, [r4, #12]
    4da8:	4298      	cmp	r0, r3
    4daa:	da3d      	bge.n	4e28 <_printf_i+0x228>
    4dac:	0018      	movs	r0, r3
    4dae:	e03b      	b.n	4e28 <_printf_i+0x228>
    4db0:	0022      	movs	r2, r4
    4db2:	2301      	movs	r3, #1
    4db4:	3219      	adds	r2, #25
    4db6:	9906      	ldr	r1, [sp, #24]
    4db8:	9805      	ldr	r0, [sp, #20]
    4dba:	9e07      	ldr	r6, [sp, #28]
    4dbc:	47b0      	blx	r6
    4dbe:	1c43      	adds	r3, r0, #1
    4dc0:	d030      	beq.n	4e24 <_printf_i+0x224>
    4dc2:	3501      	adds	r5, #1
    4dc4:	68e3      	ldr	r3, [r4, #12]
    4dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4dc8:	1a9b      	subs	r3, r3, r2
    4dca:	429d      	cmp	r5, r3
    4dcc:	dbf0      	blt.n	4db0 <_printf_i+0x1b0>
    4dce:	e7e9      	b.n	4da4 <_printf_i+0x1a4>
    4dd0:	2d00      	cmp	r5, #0
    4dd2:	d0a9      	beq.n	4d28 <_printf_i+0x128>
    4dd4:	9e04      	ldr	r6, [sp, #16]
    4dd6:	0028      	movs	r0, r5
    4dd8:	0039      	movs	r1, r7
    4dda:	f7fd fd19 	bl	2810 <__aeabi_uidivmod>
    4dde:	9b03      	ldr	r3, [sp, #12]
    4de0:	3e01      	subs	r6, #1
    4de2:	5c5b      	ldrb	r3, [r3, r1]
    4de4:	0028      	movs	r0, r5
    4de6:	7033      	strb	r3, [r6, #0]
    4de8:	0039      	movs	r1, r7
    4dea:	f7fd fc8b 	bl	2704 <__udivsi3>
    4dee:	1e05      	subs	r5, r0, #0
    4df0:	d1f1      	bne.n	4dd6 <_printf_i+0x1d6>
    4df2:	2f08      	cmp	r7, #8
    4df4:	d109      	bne.n	4e0a <_printf_i+0x20a>
    4df6:	6823      	ldr	r3, [r4, #0]
    4df8:	07db      	lsls	r3, r3, #31
    4dfa:	d506      	bpl.n	4e0a <_printf_i+0x20a>
    4dfc:	6863      	ldr	r3, [r4, #4]
    4dfe:	6922      	ldr	r2, [r4, #16]
    4e00:	4293      	cmp	r3, r2
    4e02:	dc02      	bgt.n	4e0a <_printf_i+0x20a>
    4e04:	2330      	movs	r3, #48	; 0x30
    4e06:	3e01      	subs	r6, #1
    4e08:	7033      	strb	r3, [r6, #0]
    4e0a:	9b04      	ldr	r3, [sp, #16]
    4e0c:	1b9b      	subs	r3, r3, r6
    4e0e:	6123      	str	r3, [r4, #16]
    4e10:	9b07      	ldr	r3, [sp, #28]
    4e12:	aa09      	add	r2, sp, #36	; 0x24
    4e14:	9300      	str	r3, [sp, #0]
    4e16:	0021      	movs	r1, r4
    4e18:	9b06      	ldr	r3, [sp, #24]
    4e1a:	9805      	ldr	r0, [sp, #20]
    4e1c:	f7ff fe82 	bl	4b24 <_printf_common>
    4e20:	1c43      	adds	r3, r0, #1
    4e22:	d1b3      	bne.n	4d8c <_printf_i+0x18c>
    4e24:	2001      	movs	r0, #1
    4e26:	4240      	negs	r0, r0
    4e28:	b00b      	add	sp, #44	; 0x2c
    4e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e2c:	00005462 	.word	0x00005462
    4e30:	00005451 	.word	0x00005451

00004e34 <_sbrk_r>:
    4e34:	2300      	movs	r3, #0
    4e36:	b570      	push	{r4, r5, r6, lr}
    4e38:	4c06      	ldr	r4, [pc, #24]	; (4e54 <_sbrk_r+0x20>)
    4e3a:	0005      	movs	r5, r0
    4e3c:	0008      	movs	r0, r1
    4e3e:	6023      	str	r3, [r4, #0]
    4e40:	f7fd fa48 	bl	22d4 <_sbrk>
    4e44:	1c43      	adds	r3, r0, #1
    4e46:	d103      	bne.n	4e50 <_sbrk_r+0x1c>
    4e48:	6823      	ldr	r3, [r4, #0]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d000      	beq.n	4e50 <_sbrk_r+0x1c>
    4e4e:	602b      	str	r3, [r5, #0]
    4e50:	bd70      	pop	{r4, r5, r6, pc}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	200001a0 	.word	0x200001a0

00004e58 <__sread>:
    4e58:	b570      	push	{r4, r5, r6, lr}
    4e5a:	000c      	movs	r4, r1
    4e5c:	250e      	movs	r5, #14
    4e5e:	5f49      	ldrsh	r1, [r1, r5]
    4e60:	f000 f97e 	bl	5160 <_read_r>
    4e64:	2800      	cmp	r0, #0
    4e66:	db03      	blt.n	4e70 <__sread+0x18>
    4e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4e6a:	181b      	adds	r3, r3, r0
    4e6c:	6563      	str	r3, [r4, #84]	; 0x54
    4e6e:	bd70      	pop	{r4, r5, r6, pc}
    4e70:	89a3      	ldrh	r3, [r4, #12]
    4e72:	4a02      	ldr	r2, [pc, #8]	; (4e7c <__sread+0x24>)
    4e74:	4013      	ands	r3, r2
    4e76:	81a3      	strh	r3, [r4, #12]
    4e78:	e7f9      	b.n	4e6e <__sread+0x16>
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	ffffefff 	.word	0xffffefff

00004e80 <__swrite>:
    4e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e82:	001f      	movs	r7, r3
    4e84:	898b      	ldrh	r3, [r1, #12]
    4e86:	0005      	movs	r5, r0
    4e88:	000c      	movs	r4, r1
    4e8a:	0016      	movs	r6, r2
    4e8c:	05db      	lsls	r3, r3, #23
    4e8e:	d505      	bpl.n	4e9c <__swrite+0x1c>
    4e90:	230e      	movs	r3, #14
    4e92:	5ec9      	ldrsh	r1, [r1, r3]
    4e94:	2200      	movs	r2, #0
    4e96:	2302      	movs	r3, #2
    4e98:	f000 f940 	bl	511c <_lseek_r>
    4e9c:	89a3      	ldrh	r3, [r4, #12]
    4e9e:	4a05      	ldr	r2, [pc, #20]	; (4eb4 <__swrite+0x34>)
    4ea0:	0028      	movs	r0, r5
    4ea2:	4013      	ands	r3, r2
    4ea4:	81a3      	strh	r3, [r4, #12]
    4ea6:	0032      	movs	r2, r6
    4ea8:	230e      	movs	r3, #14
    4eaa:	5ee1      	ldrsh	r1, [r4, r3]
    4eac:	003b      	movs	r3, r7
    4eae:	f000 f875 	bl	4f9c <_write_r>
    4eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4eb4:	ffffefff 	.word	0xffffefff

00004eb8 <__sseek>:
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	000c      	movs	r4, r1
    4ebc:	250e      	movs	r5, #14
    4ebe:	5f49      	ldrsh	r1, [r1, r5]
    4ec0:	f000 f92c 	bl	511c <_lseek_r>
    4ec4:	89a3      	ldrh	r3, [r4, #12]
    4ec6:	1c42      	adds	r2, r0, #1
    4ec8:	d103      	bne.n	4ed2 <__sseek+0x1a>
    4eca:	4a05      	ldr	r2, [pc, #20]	; (4ee0 <__sseek+0x28>)
    4ecc:	4013      	ands	r3, r2
    4ece:	81a3      	strh	r3, [r4, #12]
    4ed0:	bd70      	pop	{r4, r5, r6, pc}
    4ed2:	2280      	movs	r2, #128	; 0x80
    4ed4:	0152      	lsls	r2, r2, #5
    4ed6:	4313      	orrs	r3, r2
    4ed8:	81a3      	strh	r3, [r4, #12]
    4eda:	6560      	str	r0, [r4, #84]	; 0x54
    4edc:	e7f8      	b.n	4ed0 <__sseek+0x18>
    4ede:	46c0      	nop			; (mov r8, r8)
    4ee0:	ffffefff 	.word	0xffffefff

00004ee4 <__sclose>:
    4ee4:	b510      	push	{r4, lr}
    4ee6:	230e      	movs	r3, #14
    4ee8:	5ec9      	ldrsh	r1, [r1, r3]
    4eea:	f000 f8e1 	bl	50b0 <_close_r>
    4eee:	bd10      	pop	{r4, pc}

00004ef0 <__swbuf_r>:
    4ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ef2:	0005      	movs	r5, r0
    4ef4:	000e      	movs	r6, r1
    4ef6:	0014      	movs	r4, r2
    4ef8:	2800      	cmp	r0, #0
    4efa:	d004      	beq.n	4f06 <__swbuf_r+0x16>
    4efc:	6983      	ldr	r3, [r0, #24]
    4efe:	2b00      	cmp	r3, #0
    4f00:	d101      	bne.n	4f06 <__swbuf_r+0x16>
    4f02:	f7ff fb17 	bl	4534 <__sinit>
    4f06:	4b22      	ldr	r3, [pc, #136]	; (4f90 <__swbuf_r+0xa0>)
    4f08:	429c      	cmp	r4, r3
    4f0a:	d12d      	bne.n	4f68 <__swbuf_r+0x78>
    4f0c:	686c      	ldr	r4, [r5, #4]
    4f0e:	69a3      	ldr	r3, [r4, #24]
    4f10:	60a3      	str	r3, [r4, #8]
    4f12:	89a3      	ldrh	r3, [r4, #12]
    4f14:	071b      	lsls	r3, r3, #28
    4f16:	d531      	bpl.n	4f7c <__swbuf_r+0x8c>
    4f18:	6923      	ldr	r3, [r4, #16]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d02e      	beq.n	4f7c <__swbuf_r+0x8c>
    4f1e:	6823      	ldr	r3, [r4, #0]
    4f20:	6922      	ldr	r2, [r4, #16]
    4f22:	b2f7      	uxtb	r7, r6
    4f24:	1a98      	subs	r0, r3, r2
    4f26:	6963      	ldr	r3, [r4, #20]
    4f28:	b2f6      	uxtb	r6, r6
    4f2a:	4298      	cmp	r0, r3
    4f2c:	db05      	blt.n	4f3a <__swbuf_r+0x4a>
    4f2e:	0021      	movs	r1, r4
    4f30:	0028      	movs	r0, r5
    4f32:	f7ff fa91 	bl	4458 <_fflush_r>
    4f36:	2800      	cmp	r0, #0
    4f38:	d126      	bne.n	4f88 <__swbuf_r+0x98>
    4f3a:	68a3      	ldr	r3, [r4, #8]
    4f3c:	3001      	adds	r0, #1
    4f3e:	3b01      	subs	r3, #1
    4f40:	60a3      	str	r3, [r4, #8]
    4f42:	6823      	ldr	r3, [r4, #0]
    4f44:	1c5a      	adds	r2, r3, #1
    4f46:	6022      	str	r2, [r4, #0]
    4f48:	701f      	strb	r7, [r3, #0]
    4f4a:	6963      	ldr	r3, [r4, #20]
    4f4c:	4298      	cmp	r0, r3
    4f4e:	d004      	beq.n	4f5a <__swbuf_r+0x6a>
    4f50:	89a3      	ldrh	r3, [r4, #12]
    4f52:	07db      	lsls	r3, r3, #31
    4f54:	d51a      	bpl.n	4f8c <__swbuf_r+0x9c>
    4f56:	2e0a      	cmp	r6, #10
    4f58:	d118      	bne.n	4f8c <__swbuf_r+0x9c>
    4f5a:	0021      	movs	r1, r4
    4f5c:	0028      	movs	r0, r5
    4f5e:	f7ff fa7b 	bl	4458 <_fflush_r>
    4f62:	2800      	cmp	r0, #0
    4f64:	d012      	beq.n	4f8c <__swbuf_r+0x9c>
    4f66:	e00f      	b.n	4f88 <__swbuf_r+0x98>
    4f68:	4b0a      	ldr	r3, [pc, #40]	; (4f94 <__swbuf_r+0xa4>)
    4f6a:	429c      	cmp	r4, r3
    4f6c:	d101      	bne.n	4f72 <__swbuf_r+0x82>
    4f6e:	68ac      	ldr	r4, [r5, #8]
    4f70:	e7cd      	b.n	4f0e <__swbuf_r+0x1e>
    4f72:	4b09      	ldr	r3, [pc, #36]	; (4f98 <__swbuf_r+0xa8>)
    4f74:	429c      	cmp	r4, r3
    4f76:	d1ca      	bne.n	4f0e <__swbuf_r+0x1e>
    4f78:	68ec      	ldr	r4, [r5, #12]
    4f7a:	e7c8      	b.n	4f0e <__swbuf_r+0x1e>
    4f7c:	0021      	movs	r1, r4
    4f7e:	0028      	movs	r0, r5
    4f80:	f000 f820 	bl	4fc4 <__swsetup_r>
    4f84:	2800      	cmp	r0, #0
    4f86:	d0ca      	beq.n	4f1e <__swbuf_r+0x2e>
    4f88:	2601      	movs	r6, #1
    4f8a:	4276      	negs	r6, r6
    4f8c:	0030      	movs	r0, r6
    4f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f90:	00005400 	.word	0x00005400
    4f94:	00005420 	.word	0x00005420
    4f98:	000053e0 	.word	0x000053e0

00004f9c <_write_r>:
    4f9c:	b570      	push	{r4, r5, r6, lr}
    4f9e:	0005      	movs	r5, r0
    4fa0:	0008      	movs	r0, r1
    4fa2:	0011      	movs	r1, r2
    4fa4:	2200      	movs	r2, #0
    4fa6:	4c06      	ldr	r4, [pc, #24]	; (4fc0 <_write_r+0x24>)
    4fa8:	6022      	str	r2, [r4, #0]
    4faa:	001a      	movs	r2, r3
    4fac:	f7fc f88c 	bl	10c8 <_write>
    4fb0:	1c43      	adds	r3, r0, #1
    4fb2:	d103      	bne.n	4fbc <_write_r+0x20>
    4fb4:	6823      	ldr	r3, [r4, #0]
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d000      	beq.n	4fbc <_write_r+0x20>
    4fba:	602b      	str	r3, [r5, #0]
    4fbc:	bd70      	pop	{r4, r5, r6, pc}
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	200001a0 	.word	0x200001a0

00004fc4 <__swsetup_r>:
    4fc4:	4b36      	ldr	r3, [pc, #216]	; (50a0 <__swsetup_r+0xdc>)
    4fc6:	b570      	push	{r4, r5, r6, lr}
    4fc8:	681d      	ldr	r5, [r3, #0]
    4fca:	0006      	movs	r6, r0
    4fcc:	000c      	movs	r4, r1
    4fce:	2d00      	cmp	r5, #0
    4fd0:	d005      	beq.n	4fde <__swsetup_r+0x1a>
    4fd2:	69ab      	ldr	r3, [r5, #24]
    4fd4:	2b00      	cmp	r3, #0
    4fd6:	d102      	bne.n	4fde <__swsetup_r+0x1a>
    4fd8:	0028      	movs	r0, r5
    4fda:	f7ff faab 	bl	4534 <__sinit>
    4fde:	4b31      	ldr	r3, [pc, #196]	; (50a4 <__swsetup_r+0xe0>)
    4fe0:	429c      	cmp	r4, r3
    4fe2:	d10f      	bne.n	5004 <__swsetup_r+0x40>
    4fe4:	686c      	ldr	r4, [r5, #4]
    4fe6:	230c      	movs	r3, #12
    4fe8:	5ee2      	ldrsh	r2, [r4, r3]
    4fea:	b293      	uxth	r3, r2
    4fec:	0719      	lsls	r1, r3, #28
    4fee:	d42d      	bmi.n	504c <__swsetup_r+0x88>
    4ff0:	06d9      	lsls	r1, r3, #27
    4ff2:	d411      	bmi.n	5018 <__swsetup_r+0x54>
    4ff4:	2309      	movs	r3, #9
    4ff6:	2001      	movs	r0, #1
    4ff8:	6033      	str	r3, [r6, #0]
    4ffa:	3337      	adds	r3, #55	; 0x37
    4ffc:	4313      	orrs	r3, r2
    4ffe:	81a3      	strh	r3, [r4, #12]
    5000:	4240      	negs	r0, r0
    5002:	bd70      	pop	{r4, r5, r6, pc}
    5004:	4b28      	ldr	r3, [pc, #160]	; (50a8 <__swsetup_r+0xe4>)
    5006:	429c      	cmp	r4, r3
    5008:	d101      	bne.n	500e <__swsetup_r+0x4a>
    500a:	68ac      	ldr	r4, [r5, #8]
    500c:	e7eb      	b.n	4fe6 <__swsetup_r+0x22>
    500e:	4b27      	ldr	r3, [pc, #156]	; (50ac <__swsetup_r+0xe8>)
    5010:	429c      	cmp	r4, r3
    5012:	d1e8      	bne.n	4fe6 <__swsetup_r+0x22>
    5014:	68ec      	ldr	r4, [r5, #12]
    5016:	e7e6      	b.n	4fe6 <__swsetup_r+0x22>
    5018:	075b      	lsls	r3, r3, #29
    501a:	d513      	bpl.n	5044 <__swsetup_r+0x80>
    501c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    501e:	2900      	cmp	r1, #0
    5020:	d008      	beq.n	5034 <__swsetup_r+0x70>
    5022:	0023      	movs	r3, r4
    5024:	3344      	adds	r3, #68	; 0x44
    5026:	4299      	cmp	r1, r3
    5028:	d002      	beq.n	5030 <__swsetup_r+0x6c>
    502a:	0030      	movs	r0, r6
    502c:	f7ff fb8e 	bl	474c <_free_r>
    5030:	2300      	movs	r3, #0
    5032:	6363      	str	r3, [r4, #52]	; 0x34
    5034:	2224      	movs	r2, #36	; 0x24
    5036:	89a3      	ldrh	r3, [r4, #12]
    5038:	4393      	bics	r3, r2
    503a:	81a3      	strh	r3, [r4, #12]
    503c:	2300      	movs	r3, #0
    503e:	6063      	str	r3, [r4, #4]
    5040:	6923      	ldr	r3, [r4, #16]
    5042:	6023      	str	r3, [r4, #0]
    5044:	2308      	movs	r3, #8
    5046:	89a2      	ldrh	r2, [r4, #12]
    5048:	4313      	orrs	r3, r2
    504a:	81a3      	strh	r3, [r4, #12]
    504c:	6923      	ldr	r3, [r4, #16]
    504e:	2b00      	cmp	r3, #0
    5050:	d10b      	bne.n	506a <__swsetup_r+0xa6>
    5052:	21a0      	movs	r1, #160	; 0xa0
    5054:	2280      	movs	r2, #128	; 0x80
    5056:	89a3      	ldrh	r3, [r4, #12]
    5058:	0089      	lsls	r1, r1, #2
    505a:	0092      	lsls	r2, r2, #2
    505c:	400b      	ands	r3, r1
    505e:	4293      	cmp	r3, r2
    5060:	d003      	beq.n	506a <__swsetup_r+0xa6>
    5062:	0021      	movs	r1, r4
    5064:	0030      	movs	r0, r6
    5066:	f7ff fb23 	bl	46b0 <__smakebuf_r>
    506a:	2301      	movs	r3, #1
    506c:	89a2      	ldrh	r2, [r4, #12]
    506e:	4013      	ands	r3, r2
    5070:	d011      	beq.n	5096 <__swsetup_r+0xd2>
    5072:	2300      	movs	r3, #0
    5074:	60a3      	str	r3, [r4, #8]
    5076:	6963      	ldr	r3, [r4, #20]
    5078:	425b      	negs	r3, r3
    507a:	61a3      	str	r3, [r4, #24]
    507c:	2000      	movs	r0, #0
    507e:	6923      	ldr	r3, [r4, #16]
    5080:	4283      	cmp	r3, r0
    5082:	d1be      	bne.n	5002 <__swsetup_r+0x3e>
    5084:	230c      	movs	r3, #12
    5086:	5ee2      	ldrsh	r2, [r4, r3]
    5088:	0613      	lsls	r3, r2, #24
    508a:	d5ba      	bpl.n	5002 <__swsetup_r+0x3e>
    508c:	2340      	movs	r3, #64	; 0x40
    508e:	4313      	orrs	r3, r2
    5090:	81a3      	strh	r3, [r4, #12]
    5092:	3801      	subs	r0, #1
    5094:	e7b5      	b.n	5002 <__swsetup_r+0x3e>
    5096:	0792      	lsls	r2, r2, #30
    5098:	d400      	bmi.n	509c <__swsetup_r+0xd8>
    509a:	6963      	ldr	r3, [r4, #20]
    509c:	60a3      	str	r3, [r4, #8]
    509e:	e7ed      	b.n	507c <__swsetup_r+0xb8>
    50a0:	2000000c 	.word	0x2000000c
    50a4:	00005400 	.word	0x00005400
    50a8:	00005420 	.word	0x00005420
    50ac:	000053e0 	.word	0x000053e0

000050b0 <_close_r>:
    50b0:	2300      	movs	r3, #0
    50b2:	b570      	push	{r4, r5, r6, lr}
    50b4:	4c06      	ldr	r4, [pc, #24]	; (50d0 <_close_r+0x20>)
    50b6:	0005      	movs	r5, r0
    50b8:	0008      	movs	r0, r1
    50ba:	6023      	str	r3, [r4, #0]
    50bc:	f7fd f91c 	bl	22f8 <_close>
    50c0:	1c43      	adds	r3, r0, #1
    50c2:	d103      	bne.n	50cc <_close_r+0x1c>
    50c4:	6823      	ldr	r3, [r4, #0]
    50c6:	2b00      	cmp	r3, #0
    50c8:	d000      	beq.n	50cc <_close_r+0x1c>
    50ca:	602b      	str	r3, [r5, #0]
    50cc:	bd70      	pop	{r4, r5, r6, pc}
    50ce:	46c0      	nop			; (mov r8, r8)
    50d0:	200001a0 	.word	0x200001a0

000050d4 <_fstat_r>:
    50d4:	2300      	movs	r3, #0
    50d6:	b570      	push	{r4, r5, r6, lr}
    50d8:	4c06      	ldr	r4, [pc, #24]	; (50f4 <_fstat_r+0x20>)
    50da:	0005      	movs	r5, r0
    50dc:	0008      	movs	r0, r1
    50de:	0011      	movs	r1, r2
    50e0:	6023      	str	r3, [r4, #0]
    50e2:	f7fd f90c 	bl	22fe <_fstat>
    50e6:	1c43      	adds	r3, r0, #1
    50e8:	d103      	bne.n	50f2 <_fstat_r+0x1e>
    50ea:	6823      	ldr	r3, [r4, #0]
    50ec:	2b00      	cmp	r3, #0
    50ee:	d000      	beq.n	50f2 <_fstat_r+0x1e>
    50f0:	602b      	str	r3, [r5, #0]
    50f2:	bd70      	pop	{r4, r5, r6, pc}
    50f4:	200001a0 	.word	0x200001a0

000050f8 <_isatty_r>:
    50f8:	2300      	movs	r3, #0
    50fa:	b570      	push	{r4, r5, r6, lr}
    50fc:	4c06      	ldr	r4, [pc, #24]	; (5118 <_isatty_r+0x20>)
    50fe:	0005      	movs	r5, r0
    5100:	0008      	movs	r0, r1
    5102:	6023      	str	r3, [r4, #0]
    5104:	f7fd f900 	bl	2308 <_isatty>
    5108:	1c43      	adds	r3, r0, #1
    510a:	d103      	bne.n	5114 <_isatty_r+0x1c>
    510c:	6823      	ldr	r3, [r4, #0]
    510e:	2b00      	cmp	r3, #0
    5110:	d000      	beq.n	5114 <_isatty_r+0x1c>
    5112:	602b      	str	r3, [r5, #0]
    5114:	bd70      	pop	{r4, r5, r6, pc}
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	200001a0 	.word	0x200001a0

0000511c <_lseek_r>:
    511c:	b570      	push	{r4, r5, r6, lr}
    511e:	0005      	movs	r5, r0
    5120:	0008      	movs	r0, r1
    5122:	0011      	movs	r1, r2
    5124:	2200      	movs	r2, #0
    5126:	4c06      	ldr	r4, [pc, #24]	; (5140 <_lseek_r+0x24>)
    5128:	6022      	str	r2, [r4, #0]
    512a:	001a      	movs	r2, r3
    512c:	f7fd f8ee 	bl	230c <_lseek>
    5130:	1c43      	adds	r3, r0, #1
    5132:	d103      	bne.n	513c <_lseek_r+0x20>
    5134:	6823      	ldr	r3, [r4, #0]
    5136:	2b00      	cmp	r3, #0
    5138:	d000      	beq.n	513c <_lseek_r+0x20>
    513a:	602b      	str	r3, [r5, #0]
    513c:	bd70      	pop	{r4, r5, r6, pc}
    513e:	46c0      	nop			; (mov r8, r8)
    5140:	200001a0 	.word	0x200001a0

00005144 <memchr>:
    5144:	b2c9      	uxtb	r1, r1
    5146:	1882      	adds	r2, r0, r2
    5148:	4290      	cmp	r0, r2
    514a:	d101      	bne.n	5150 <memchr+0xc>
    514c:	2000      	movs	r0, #0
    514e:	4770      	bx	lr
    5150:	7803      	ldrb	r3, [r0, #0]
    5152:	428b      	cmp	r3, r1
    5154:	d0fb      	beq.n	514e <memchr+0xa>
    5156:	3001      	adds	r0, #1
    5158:	e7f6      	b.n	5148 <memchr+0x4>

0000515a <__malloc_lock>:
    515a:	4770      	bx	lr

0000515c <__malloc_unlock>:
    515c:	4770      	bx	lr
	...

00005160 <_read_r>:
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	0005      	movs	r5, r0
    5164:	0008      	movs	r0, r1
    5166:	0011      	movs	r1, r2
    5168:	2200      	movs	r2, #0
    516a:	4c06      	ldr	r4, [pc, #24]	; (5184 <_read_r+0x24>)
    516c:	6022      	str	r2, [r4, #0]
    516e:	001a      	movs	r2, r3
    5170:	f7fb ff88 	bl	1084 <_read>
    5174:	1c43      	adds	r3, r0, #1
    5176:	d103      	bne.n	5180 <_read_r+0x20>
    5178:	6823      	ldr	r3, [r4, #0]
    517a:	2b00      	cmp	r3, #0
    517c:	d000      	beq.n	5180 <_read_r+0x20>
    517e:	602b      	str	r3, [r5, #0]
    5180:	bd70      	pop	{r4, r5, r6, pc}
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	200001a0 	.word	0x200001a0
    5188:	00000326 	.word	0x00000326
    518c:	00000572 	.word	0x00000572
    5190:	00000572 	.word	0x00000572
    5194:	00000572 	.word	0x00000572
    5198:	00000572 	.word	0x00000572
    519c:	00000572 	.word	0x00000572
    51a0:	00000572 	.word	0x00000572
    51a4:	00000572 	.word	0x00000572
    51a8:	00000572 	.word	0x00000572
    51ac:	00000572 	.word	0x00000572
    51b0:	00000572 	.word	0x00000572
    51b4:	00000572 	.word	0x00000572
    51b8:	00000572 	.word	0x00000572
    51bc:	00000572 	.word	0x00000572
    51c0:	00000572 	.word	0x00000572
    51c4:	00000572 	.word	0x00000572
    51c8:	0000030e 	.word	0x0000030e
    51cc:	00000572 	.word	0x00000572
    51d0:	00000572 	.word	0x00000572
    51d4:	00000572 	.word	0x00000572
    51d8:	00000572 	.word	0x00000572
    51dc:	00000572 	.word	0x00000572
    51e0:	00000572 	.word	0x00000572
    51e4:	00000572 	.word	0x00000572
    51e8:	00000572 	.word	0x00000572
    51ec:	00000572 	.word	0x00000572
    51f0:	00000572 	.word	0x00000572
    51f4:	00000572 	.word	0x00000572
    51f8:	00000572 	.word	0x00000572
    51fc:	00000572 	.word	0x00000572
    5200:	00000572 	.word	0x00000572
    5204:	00000572 	.word	0x00000572
    5208:	0000031e 	.word	0x0000031e
    520c:	00000572 	.word	0x00000572
    5210:	00000572 	.word	0x00000572
    5214:	00000572 	.word	0x00000572
    5218:	00000572 	.word	0x00000572
    521c:	00000572 	.word	0x00000572
    5220:	00000572 	.word	0x00000572
    5224:	00000572 	.word	0x00000572
    5228:	00000572 	.word	0x00000572
    522c:	00000572 	.word	0x00000572
    5230:	00000572 	.word	0x00000572
    5234:	00000572 	.word	0x00000572
    5238:	00000572 	.word	0x00000572
    523c:	00000572 	.word	0x00000572
    5240:	00000572 	.word	0x00000572
    5244:	00000572 	.word	0x00000572
    5248:	00000316 	.word	0x00000316
    524c:	0000032e 	.word	0x0000032e
    5250:	000002f6 	.word	0x000002f6
    5254:	00000306 	.word	0x00000306
    5258:	000002fe 	.word	0x000002fe
    525c:	00000002 	.word	0x00000002
    5260:	00000003 	.word	0x00000003
    5264:	00000028 	.word	0x00000028
    5268:	00000029 	.word	0x00000029
    526c:	00000004 	.word	0x00000004
    5270:	00000005 	.word	0x00000005
    5274:	00000006 	.word	0x00000006
    5278:	00000007 	.word	0x00000007
    527c:	0000ffff 	.word	0x0000ffff
    5280:	0000ffff 	.word	0x0000ffff
    5284:	00000022 	.word	0x00000022
    5288:	00000023 	.word	0x00000023
    528c:	0000ffff 	.word	0x0000ffff
    5290:	0000ffff 	.word	0x0000ffff
    5294:	0000ffff 	.word	0x0000ffff
    5298:	0000ffff 	.word	0x0000ffff
    529c:	00000008 	.word	0x00000008
    52a0:	00000009 	.word	0x00000009
    52a4:	0000000a 	.word	0x0000000a
    52a8:	0000000b 	.word	0x0000000b
    52ac:	42000800 	.word	0x42000800
    52b0:	42000c00 	.word	0x42000c00
    52b4:	42001000 	.word	0x42001000
    52b8:	42001400 	.word	0x42001400
    52bc:	42001800 	.word	0x42001800
    52c0:	42001c00 	.word	0x42001c00
    52c4:	00001c62 	.word	0x00001c62
    52c8:	00001c5e 	.word	0x00001c5e
    52cc:	00001c5e 	.word	0x00001c5e
    52d0:	00001cc0 	.word	0x00001cc0
    52d4:	00001cc0 	.word	0x00001cc0
    52d8:	00001c76 	.word	0x00001c76
    52dc:	00001c68 	.word	0x00001c68
    52e0:	00001c7c 	.word	0x00001c7c
    52e4:	00001cae 	.word	0x00001cae
    52e8:	00001d48 	.word	0x00001d48
    52ec:	00001d28 	.word	0x00001d28
    52f0:	00001d28 	.word	0x00001d28
    52f4:	00001db4 	.word	0x00001db4
    52f8:	00001d3a 	.word	0x00001d3a
    52fc:	00001d56 	.word	0x00001d56
    5300:	00001d2c 	.word	0x00001d2c
    5304:	00001d64 	.word	0x00001d64
    5308:	00001da4 	.word	0x00001da4
    530c:	20433249 	.word	0x20433249
    5310:	74697277 	.word	0x74697277
    5314:	74732065 	.word	0x74732065
    5318:	73757461 	.word	0x73757461
    531c:	3d782520 	.word	0x3d782520
    5320:	0a642520 	.word	0x0a642520
    5324:	0000000d 	.word	0x0000000d
    5328:	20433249 	.word	0x20433249
    532c:	64616572 	.word	0x64616572
    5330:	61747320 	.word	0x61747320
    5334:	20737574 	.word	0x20737574
    5338:	203d7825 	.word	0x203d7825
    533c:	0d0a6425 	.word	0x0d0a6425
    5340:	00000000 	.word	0x00000000
    5344:	74655220 	.word	0x74655220
    5348:	206e7275 	.word	0x206e7275
    534c:	756c6156 	.word	0x756c6156
    5350:	30203a65 	.word	0x30203a65
    5354:	0a782578 	.word	0x0a782578
    5358:	0000000d 	.word	0x0000000d
    535c:	00003088 	.word	0x00003088
    5360:	0000306a 	.word	0x0000306a
    5364:	00003024 	.word	0x00003024
    5368:	00002f42 	.word	0x00002f42
    536c:	00003024 	.word	0x00003024
    5370:	0000305c 	.word	0x0000305c
    5374:	00003024 	.word	0x00003024
    5378:	00002f42 	.word	0x00002f42
    537c:	0000306a 	.word	0x0000306a
    5380:	0000306a 	.word	0x0000306a
    5384:	0000305c 	.word	0x0000305c
    5388:	00002f42 	.word	0x00002f42
    538c:	00002f3a 	.word	0x00002f3a
    5390:	00002f3a 	.word	0x00002f3a
    5394:	00002f3a 	.word	0x00002f3a
    5398:	000032a0 	.word	0x000032a0
    539c:	000036e8 	.word	0x000036e8
    53a0:	000035a8 	.word	0x000035a8
    53a4:	000035a8 	.word	0x000035a8
    53a8:	000035a4 	.word	0x000035a4
    53ac:	000036c0 	.word	0x000036c0
    53b0:	000036c0 	.word	0x000036c0
    53b4:	000036b2 	.word	0x000036b2
    53b8:	000035a4 	.word	0x000035a4
    53bc:	000036c0 	.word	0x000036c0
    53c0:	000036b2 	.word	0x000036b2
    53c4:	000036c0 	.word	0x000036c0
    53c8:	000035a4 	.word	0x000035a4
    53cc:	000036c8 	.word	0x000036c8
    53d0:	000036c8 	.word	0x000036c8
    53d4:	000036c8 	.word	0x000036c8
    53d8:	000038cc 	.word	0x000038cc

000053dc <_global_impure_ptr>:
    53dc:	20000010                                ... 

000053e0 <__sf_fake_stderr>:
	...

00005400 <__sf_fake_stdin>:
	...

00005420 <__sf_fake_stdout>:
	...
    5440:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5450:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5460:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5470:	00006665                                ef..

00005474 <_init>:
    5474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5476:	46c0      	nop			; (mov r8, r8)
    5478:	bcf8      	pop	{r3, r4, r5, r6, r7}
    547a:	bc08      	pop	{r3}
    547c:	469e      	mov	lr, r3
    547e:	4770      	bx	lr

00005480 <__init_array_start>:
    5480:	000000dd 	.word	0x000000dd

00005484 <_fini>:
    5484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5486:	46c0      	nop			; (mov r8, r8)
    5488:	bcf8      	pop	{r3, r4, r5, r6, r7}
    548a:	bc08      	pop	{r3}
    548c:	469e      	mov	lr, r3
    548e:	4770      	bx	lr

00005490 <__fini_array_start>:
    5490:	000000b5 	.word	0x000000b5
