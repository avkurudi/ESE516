
roadwatcher_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003198  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d4  20000000  00003198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  200001d4  0000336c  000201d4  2**2
                  ALLOC
  3 .stack        00002004  2000029c  00003434  000201d4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f43f  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002da3  00000000  00000000  0003f694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000418  00000000  00000000  00042437  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000468  00000000  00000000  0004284f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00018bbe  00000000  00000000  00042cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009b0a  00000000  00000000  0005b875  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008691b  00000000  00000000  0006537f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000014b0  00000000  00000000  000ebc9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003dfd  00000000  00000000  000ed14c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 22 00 20 15 12 00 00 11 12 00 00 11 12 00 00     .". ............
	...
      2c:	11 12 00 00 00 00 00 00 00 00 00 00 11 12 00 00     ................
      3c:	11 12 00 00 11 12 00 00 11 12 00 00 11 12 00 00     ................
      4c:	11 12 00 00 11 12 00 00 11 12 00 00 11 12 00 00     ................
      5c:	11 12 00 00 11 12 00 00 6d 05 00 00 7d 05 00 00     ........m...}...
      6c:	8d 05 00 00 9d 05 00 00 ad 05 00 00 bd 05 00 00     ................
      7c:	11 12 00 00 11 12 00 00 11 12 00 00 11 12 00 00     ................
      8c:	11 12 00 00 11 12 00 00 00 00 00 00 00 00 00 00     ................
      9c:	11 12 00 00 11 12 00 00 11 12 00 00 11 12 00 00     ................
      ac:	11 12 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001d4 	.word	0x200001d4
      d4:	00000000 	.word	0x00000000
      d8:	00003198 	.word	0x00003198

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001d8 	.word	0x200001d8
     108:	00003198 	.word	0x00003198
     10c:	00003198 	.word	0x00003198
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     114:	4770      	bx	lr
	...

00000118 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     118:	4b0c      	ldr	r3, [pc, #48]	; (14c <cpu_irq_enter_critical+0x34>)
     11a:	681b      	ldr	r3, [r3, #0]
     11c:	2b00      	cmp	r3, #0
     11e:	d106      	bne.n	12e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     120:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     124:	2b00      	cmp	r3, #0
     126:	d007      	beq.n	138 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     128:	2200      	movs	r2, #0
     12a:	4b09      	ldr	r3, [pc, #36]	; (150 <cpu_irq_enter_critical+0x38>)
     12c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     12e:	4a07      	ldr	r2, [pc, #28]	; (14c <cpu_irq_enter_critical+0x34>)
     130:	6813      	ldr	r3, [r2, #0]
     132:	3301      	adds	r3, #1
     134:	6013      	str	r3, [r2, #0]
}
     136:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     138:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     13a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     13e:	2200      	movs	r2, #0
     140:	4b04      	ldr	r3, [pc, #16]	; (154 <cpu_irq_enter_critical+0x3c>)
     142:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     144:	3201      	adds	r2, #1
     146:	4b02      	ldr	r3, [pc, #8]	; (150 <cpu_irq_enter_critical+0x38>)
     148:	701a      	strb	r2, [r3, #0]
     14a:	e7f0      	b.n	12e <cpu_irq_enter_critical+0x16>
     14c:	200001f0 	.word	0x200001f0
     150:	200001f4 	.word	0x200001f4
     154:	20000000 	.word	0x20000000

00000158 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     158:	4b08      	ldr	r3, [pc, #32]	; (17c <cpu_irq_leave_critical+0x24>)
     15a:	681a      	ldr	r2, [r3, #0]
     15c:	3a01      	subs	r2, #1
     15e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     160:	681b      	ldr	r3, [r3, #0]
     162:	2b00      	cmp	r3, #0
     164:	d109      	bne.n	17a <cpu_irq_leave_critical+0x22>
     166:	4b06      	ldr	r3, [pc, #24]	; (180 <cpu_irq_leave_critical+0x28>)
     168:	781b      	ldrb	r3, [r3, #0]
     16a:	2b00      	cmp	r3, #0
     16c:	d005      	beq.n	17a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16e:	2201      	movs	r2, #1
     170:	4b04      	ldr	r3, [pc, #16]	; (184 <cpu_irq_leave_critical+0x2c>)
     172:	701a      	strb	r2, [r3, #0]
     174:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     178:	b662      	cpsie	i
	}
}
     17a:	4770      	bx	lr
     17c:	200001f0 	.word	0x200001f0
     180:	200001f4 	.word	0x200001f4
     184:	20000000 	.word	0x20000000

00000188 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     188:	b5f0      	push	{r4, r5, r6, r7, lr}
     18a:	46de      	mov	lr, fp
     18c:	4657      	mov	r7, sl
     18e:	464e      	mov	r6, r9
     190:	4645      	mov	r5, r8
     192:	b5e0      	push	{r5, r6, r7, lr}
     194:	b087      	sub	sp, #28
     196:	4680      	mov	r8, r0
     198:	9104      	str	r1, [sp, #16]
     19a:	0016      	movs	r6, r2
     19c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     19e:	2200      	movs	r2, #0
     1a0:	2300      	movs	r3, #0
     1a2:	2100      	movs	r1, #0
     1a4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     1a6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     1a8:	2001      	movs	r0, #1
     1aa:	0021      	movs	r1, r4
     1ac:	9600      	str	r6, [sp, #0]
     1ae:	9701      	str	r7, [sp, #4]
     1b0:	465c      	mov	r4, fp
     1b2:	9403      	str	r4, [sp, #12]
     1b4:	4644      	mov	r4, r8
     1b6:	9405      	str	r4, [sp, #20]
     1b8:	e013      	b.n	1e2 <long_division+0x5a>
     1ba:	2420      	movs	r4, #32
     1bc:	1a64      	subs	r4, r4, r1
     1be:	0005      	movs	r5, r0
     1c0:	40e5      	lsrs	r5, r4
     1c2:	46a8      	mov	r8, r5
     1c4:	e014      	b.n	1f0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     1c6:	9c00      	ldr	r4, [sp, #0]
     1c8:	9d01      	ldr	r5, [sp, #4]
     1ca:	1b12      	subs	r2, r2, r4
     1cc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     1ce:	465c      	mov	r4, fp
     1d0:	464d      	mov	r5, r9
     1d2:	432c      	orrs	r4, r5
     1d4:	46a3      	mov	fp, r4
     1d6:	9c03      	ldr	r4, [sp, #12]
     1d8:	4645      	mov	r5, r8
     1da:	432c      	orrs	r4, r5
     1dc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     1de:	3901      	subs	r1, #1
     1e0:	d325      	bcc.n	22e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     1e2:	2420      	movs	r4, #32
     1e4:	4264      	negs	r4, r4
     1e6:	190c      	adds	r4, r1, r4
     1e8:	d4e7      	bmi.n	1ba <long_division+0x32>
     1ea:	0005      	movs	r5, r0
     1ec:	40a5      	lsls	r5, r4
     1ee:	46a8      	mov	r8, r5
     1f0:	0004      	movs	r4, r0
     1f2:	408c      	lsls	r4, r1
     1f4:	46a1      	mov	r9, r4
		r = r << 1;
     1f6:	1892      	adds	r2, r2, r2
     1f8:	415b      	adcs	r3, r3
     1fa:	0014      	movs	r4, r2
     1fc:	001d      	movs	r5, r3
		if (n & bit_shift) {
     1fe:	9e05      	ldr	r6, [sp, #20]
     200:	464f      	mov	r7, r9
     202:	403e      	ands	r6, r7
     204:	46b4      	mov	ip, r6
     206:	9e04      	ldr	r6, [sp, #16]
     208:	4647      	mov	r7, r8
     20a:	403e      	ands	r6, r7
     20c:	46b2      	mov	sl, r6
     20e:	4666      	mov	r6, ip
     210:	4657      	mov	r7, sl
     212:	433e      	orrs	r6, r7
     214:	d003      	beq.n	21e <long_division+0x96>
			r |= 0x01;
     216:	0006      	movs	r6, r0
     218:	4326      	orrs	r6, r4
     21a:	0032      	movs	r2, r6
     21c:	002b      	movs	r3, r5
		if (r >= d) {
     21e:	9c00      	ldr	r4, [sp, #0]
     220:	9d01      	ldr	r5, [sp, #4]
     222:	429d      	cmp	r5, r3
     224:	d8db      	bhi.n	1de <long_division+0x56>
     226:	d1ce      	bne.n	1c6 <long_division+0x3e>
     228:	4294      	cmp	r4, r2
     22a:	d8d8      	bhi.n	1de <long_division+0x56>
     22c:	e7cb      	b.n	1c6 <long_division+0x3e>
     22e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     230:	4658      	mov	r0, fp
     232:	0019      	movs	r1, r3
     234:	b007      	add	sp, #28
     236:	bc3c      	pop	{r2, r3, r4, r5}
     238:	4690      	mov	r8, r2
     23a:	4699      	mov	r9, r3
     23c:	46a2      	mov	sl, r4
     23e:	46ab      	mov	fp, r5
     240:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000242 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     242:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     244:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     246:	2340      	movs	r3, #64	; 0x40
     248:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     24a:	4281      	cmp	r1, r0
     24c:	d202      	bcs.n	254 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     24e:	0018      	movs	r0, r3
     250:	bd10      	pop	{r4, pc}
		baud_calculated++;
     252:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     254:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     256:	1c63      	adds	r3, r4, #1
     258:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     25a:	4288      	cmp	r0, r1
     25c:	d9f9      	bls.n	252 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     25e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     260:	2cff      	cmp	r4, #255	; 0xff
     262:	d8f4      	bhi.n	24e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     264:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     266:	2300      	movs	r3, #0
     268:	e7f1      	b.n	24e <_sercom_get_sync_baud_val+0xc>
	...

0000026c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     26c:	b5f0      	push	{r4, r5, r6, r7, lr}
     26e:	b083      	sub	sp, #12
     270:	000f      	movs	r7, r1
     272:	0016      	movs	r6, r2
     274:	aa08      	add	r2, sp, #32
     276:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     278:	0004      	movs	r4, r0
     27a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     27c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     27e:	42bc      	cmp	r4, r7
     280:	d902      	bls.n	288 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     282:	0010      	movs	r0, r2
     284:	b003      	add	sp, #12
     286:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     288:	2b00      	cmp	r3, #0
     28a:	d114      	bne.n	2b6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     28c:	0002      	movs	r2, r0
     28e:	0008      	movs	r0, r1
     290:	2100      	movs	r1, #0
     292:	4c19      	ldr	r4, [pc, #100]	; (2f8 <_sercom_get_async_baud_val+0x8c>)
     294:	47a0      	blx	r4
     296:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     298:	003a      	movs	r2, r7
     29a:	2300      	movs	r3, #0
     29c:	2000      	movs	r0, #0
     29e:	4c17      	ldr	r4, [pc, #92]	; (2fc <_sercom_get_async_baud_val+0x90>)
     2a0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     2a2:	2200      	movs	r2, #0
     2a4:	2301      	movs	r3, #1
     2a6:	1a12      	subs	r2, r2, r0
     2a8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     2aa:	0c12      	lsrs	r2, r2, #16
     2ac:	041b      	lsls	r3, r3, #16
     2ae:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     2b0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     2b2:	2200      	movs	r2, #0
     2b4:	e7e5      	b.n	282 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     2b6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     2b8:	2b01      	cmp	r3, #1
     2ba:	d1f9      	bne.n	2b0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     2bc:	000a      	movs	r2, r1
     2be:	2300      	movs	r3, #0
     2c0:	2100      	movs	r1, #0
     2c2:	4c0d      	ldr	r4, [pc, #52]	; (2f8 <_sercom_get_async_baud_val+0x8c>)
     2c4:	47a0      	blx	r4
     2c6:	0002      	movs	r2, r0
     2c8:	000b      	movs	r3, r1
     2ca:	9200      	str	r2, [sp, #0]
     2cc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     2ce:	0038      	movs	r0, r7
     2d0:	2100      	movs	r1, #0
     2d2:	4c0a      	ldr	r4, [pc, #40]	; (2fc <_sercom_get_async_baud_val+0x90>)
     2d4:	47a0      	blx	r4
     2d6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     2d8:	2380      	movs	r3, #128	; 0x80
     2da:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2dc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     2de:	4298      	cmp	r0, r3
     2e0:	d8cf      	bhi.n	282 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     2e2:	0f79      	lsrs	r1, r7, #29
     2e4:	00f8      	lsls	r0, r7, #3
     2e6:	9a00      	ldr	r2, [sp, #0]
     2e8:	9b01      	ldr	r3, [sp, #4]
     2ea:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     2ec:	00ea      	lsls	r2, r5, #3
     2ee:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     2f0:	b2d2      	uxtb	r2, r2
     2f2:	0352      	lsls	r2, r2, #13
     2f4:	432a      	orrs	r2, r5
     2f6:	e7db      	b.n	2b0 <_sercom_get_async_baud_val+0x44>
     2f8:	000016e5 	.word	0x000016e5
     2fc:	00000189 	.word	0x00000189

00000300 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     300:	b510      	push	{r4, lr}
     302:	b082      	sub	sp, #8
     304:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     306:	4b0e      	ldr	r3, [pc, #56]	; (340 <sercom_set_gclk_generator+0x40>)
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	2b00      	cmp	r3, #0
     30c:	d007      	beq.n	31e <sercom_set_gclk_generator+0x1e>
     30e:	2900      	cmp	r1, #0
     310:	d105      	bne.n	31e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <sercom_set_gclk_generator+0x40>)
     314:	785b      	ldrb	r3, [r3, #1]
     316:	4283      	cmp	r3, r0
     318:	d010      	beq.n	33c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     31a:	201d      	movs	r0, #29
     31c:	e00c      	b.n	338 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     31e:	a901      	add	r1, sp, #4
     320:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     322:	2013      	movs	r0, #19
     324:	4b07      	ldr	r3, [pc, #28]	; (344 <sercom_set_gclk_generator+0x44>)
     326:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     328:	2013      	movs	r0, #19
     32a:	4b07      	ldr	r3, [pc, #28]	; (348 <sercom_set_gclk_generator+0x48>)
     32c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     32e:	4b04      	ldr	r3, [pc, #16]	; (340 <sercom_set_gclk_generator+0x40>)
     330:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     332:	2201      	movs	r2, #1
     334:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     336:	2000      	movs	r0, #0
}
     338:	b002      	add	sp, #8
     33a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     33c:	2000      	movs	r0, #0
     33e:	e7fb      	b.n	338 <sercom_set_gclk_generator+0x38>
     340:	200001f8 	.word	0x200001f8
     344:	000010b9 	.word	0x000010b9
     348:	0000102d 	.word	0x0000102d

0000034c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     34c:	4b40      	ldr	r3, [pc, #256]	; (450 <_sercom_get_default_pad+0x104>)
     34e:	4298      	cmp	r0, r3
     350:	d031      	beq.n	3b6 <_sercom_get_default_pad+0x6a>
     352:	d90a      	bls.n	36a <_sercom_get_default_pad+0x1e>
     354:	4b3f      	ldr	r3, [pc, #252]	; (454 <_sercom_get_default_pad+0x108>)
     356:	4298      	cmp	r0, r3
     358:	d04d      	beq.n	3f6 <_sercom_get_default_pad+0xaa>
     35a:	4b3f      	ldr	r3, [pc, #252]	; (458 <_sercom_get_default_pad+0x10c>)
     35c:	4298      	cmp	r0, r3
     35e:	d05a      	beq.n	416 <_sercom_get_default_pad+0xca>
     360:	4b3e      	ldr	r3, [pc, #248]	; (45c <_sercom_get_default_pad+0x110>)
     362:	4298      	cmp	r0, r3
     364:	d037      	beq.n	3d6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     366:	2000      	movs	r0, #0
}
     368:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     36a:	4b3d      	ldr	r3, [pc, #244]	; (460 <_sercom_get_default_pad+0x114>)
     36c:	4298      	cmp	r0, r3
     36e:	d00c      	beq.n	38a <_sercom_get_default_pad+0x3e>
     370:	4b3c      	ldr	r3, [pc, #240]	; (464 <_sercom_get_default_pad+0x118>)
     372:	4298      	cmp	r0, r3
     374:	d1f7      	bne.n	366 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	2901      	cmp	r1, #1
     378:	d017      	beq.n	3aa <_sercom_get_default_pad+0x5e>
     37a:	2900      	cmp	r1, #0
     37c:	d05d      	beq.n	43a <_sercom_get_default_pad+0xee>
     37e:	2902      	cmp	r1, #2
     380:	d015      	beq.n	3ae <_sercom_get_default_pad+0x62>
     382:	2903      	cmp	r1, #3
     384:	d015      	beq.n	3b2 <_sercom_get_default_pad+0x66>
	return 0;
     386:	2000      	movs	r0, #0
     388:	e7ee      	b.n	368 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     38a:	2901      	cmp	r1, #1
     38c:	d007      	beq.n	39e <_sercom_get_default_pad+0x52>
     38e:	2900      	cmp	r1, #0
     390:	d051      	beq.n	436 <_sercom_get_default_pad+0xea>
     392:	2902      	cmp	r1, #2
     394:	d005      	beq.n	3a2 <_sercom_get_default_pad+0x56>
     396:	2903      	cmp	r1, #3
     398:	d005      	beq.n	3a6 <_sercom_get_default_pad+0x5a>
	return 0;
     39a:	2000      	movs	r0, #0
     39c:	e7e4      	b.n	368 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     39e:	4832      	ldr	r0, [pc, #200]	; (468 <_sercom_get_default_pad+0x11c>)
     3a0:	e7e2      	b.n	368 <_sercom_get_default_pad+0x1c>
     3a2:	4832      	ldr	r0, [pc, #200]	; (46c <_sercom_get_default_pad+0x120>)
     3a4:	e7e0      	b.n	368 <_sercom_get_default_pad+0x1c>
     3a6:	4832      	ldr	r0, [pc, #200]	; (470 <_sercom_get_default_pad+0x124>)
     3a8:	e7de      	b.n	368 <_sercom_get_default_pad+0x1c>
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <_sercom_get_default_pad+0x128>)
     3ac:	e7dc      	b.n	368 <_sercom_get_default_pad+0x1c>
     3ae:	4832      	ldr	r0, [pc, #200]	; (478 <_sercom_get_default_pad+0x12c>)
     3b0:	e7da      	b.n	368 <_sercom_get_default_pad+0x1c>
     3b2:	4832      	ldr	r0, [pc, #200]	; (47c <_sercom_get_default_pad+0x130>)
     3b4:	e7d8      	b.n	368 <_sercom_get_default_pad+0x1c>
     3b6:	2901      	cmp	r1, #1
     3b8:	d007      	beq.n	3ca <_sercom_get_default_pad+0x7e>
     3ba:	2900      	cmp	r1, #0
     3bc:	d03f      	beq.n	43e <_sercom_get_default_pad+0xf2>
     3be:	2902      	cmp	r1, #2
     3c0:	d005      	beq.n	3ce <_sercom_get_default_pad+0x82>
     3c2:	2903      	cmp	r1, #3
     3c4:	d005      	beq.n	3d2 <_sercom_get_default_pad+0x86>
	return 0;
     3c6:	2000      	movs	r0, #0
     3c8:	e7ce      	b.n	368 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3ca:	482d      	ldr	r0, [pc, #180]	; (480 <_sercom_get_default_pad+0x134>)
     3cc:	e7cc      	b.n	368 <_sercom_get_default_pad+0x1c>
     3ce:	482d      	ldr	r0, [pc, #180]	; (484 <_sercom_get_default_pad+0x138>)
     3d0:	e7ca      	b.n	368 <_sercom_get_default_pad+0x1c>
     3d2:	482d      	ldr	r0, [pc, #180]	; (488 <_sercom_get_default_pad+0x13c>)
     3d4:	e7c8      	b.n	368 <_sercom_get_default_pad+0x1c>
     3d6:	2901      	cmp	r1, #1
     3d8:	d007      	beq.n	3ea <_sercom_get_default_pad+0x9e>
     3da:	2900      	cmp	r1, #0
     3dc:	d031      	beq.n	442 <_sercom_get_default_pad+0xf6>
     3de:	2902      	cmp	r1, #2
     3e0:	d005      	beq.n	3ee <_sercom_get_default_pad+0xa2>
     3e2:	2903      	cmp	r1, #3
     3e4:	d005      	beq.n	3f2 <_sercom_get_default_pad+0xa6>
	return 0;
     3e6:	2000      	movs	r0, #0
     3e8:	e7be      	b.n	368 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3ea:	4828      	ldr	r0, [pc, #160]	; (48c <_sercom_get_default_pad+0x140>)
     3ec:	e7bc      	b.n	368 <_sercom_get_default_pad+0x1c>
     3ee:	4828      	ldr	r0, [pc, #160]	; (490 <_sercom_get_default_pad+0x144>)
     3f0:	e7ba      	b.n	368 <_sercom_get_default_pad+0x1c>
     3f2:	4828      	ldr	r0, [pc, #160]	; (494 <_sercom_get_default_pad+0x148>)
     3f4:	e7b8      	b.n	368 <_sercom_get_default_pad+0x1c>
     3f6:	2901      	cmp	r1, #1
     3f8:	d007      	beq.n	40a <_sercom_get_default_pad+0xbe>
     3fa:	2900      	cmp	r1, #0
     3fc:	d023      	beq.n	446 <_sercom_get_default_pad+0xfa>
     3fe:	2902      	cmp	r1, #2
     400:	d005      	beq.n	40e <_sercom_get_default_pad+0xc2>
     402:	2903      	cmp	r1, #3
     404:	d005      	beq.n	412 <_sercom_get_default_pad+0xc6>
	return 0;
     406:	2000      	movs	r0, #0
     408:	e7ae      	b.n	368 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     40a:	4823      	ldr	r0, [pc, #140]	; (498 <_sercom_get_default_pad+0x14c>)
     40c:	e7ac      	b.n	368 <_sercom_get_default_pad+0x1c>
     40e:	4823      	ldr	r0, [pc, #140]	; (49c <_sercom_get_default_pad+0x150>)
     410:	e7aa      	b.n	368 <_sercom_get_default_pad+0x1c>
     412:	4823      	ldr	r0, [pc, #140]	; (4a0 <_sercom_get_default_pad+0x154>)
     414:	e7a8      	b.n	368 <_sercom_get_default_pad+0x1c>
     416:	2901      	cmp	r1, #1
     418:	d007      	beq.n	42a <_sercom_get_default_pad+0xde>
     41a:	2900      	cmp	r1, #0
     41c:	d015      	beq.n	44a <_sercom_get_default_pad+0xfe>
     41e:	2902      	cmp	r1, #2
     420:	d005      	beq.n	42e <_sercom_get_default_pad+0xe2>
     422:	2903      	cmp	r1, #3
     424:	d005      	beq.n	432 <_sercom_get_default_pad+0xe6>
	return 0;
     426:	2000      	movs	r0, #0
     428:	e79e      	b.n	368 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     42a:	481e      	ldr	r0, [pc, #120]	; (4a4 <_sercom_get_default_pad+0x158>)
     42c:	e79c      	b.n	368 <_sercom_get_default_pad+0x1c>
     42e:	481e      	ldr	r0, [pc, #120]	; (4a8 <_sercom_get_default_pad+0x15c>)
     430:	e79a      	b.n	368 <_sercom_get_default_pad+0x1c>
     432:	481e      	ldr	r0, [pc, #120]	; (4ac <_sercom_get_default_pad+0x160>)
     434:	e798      	b.n	368 <_sercom_get_default_pad+0x1c>
     436:	481e      	ldr	r0, [pc, #120]	; (4b0 <_sercom_get_default_pad+0x164>)
     438:	e796      	b.n	368 <_sercom_get_default_pad+0x1c>
     43a:	2003      	movs	r0, #3
     43c:	e794      	b.n	368 <_sercom_get_default_pad+0x1c>
     43e:	481d      	ldr	r0, [pc, #116]	; (4b4 <_sercom_get_default_pad+0x168>)
     440:	e792      	b.n	368 <_sercom_get_default_pad+0x1c>
     442:	481d      	ldr	r0, [pc, #116]	; (4b8 <_sercom_get_default_pad+0x16c>)
     444:	e790      	b.n	368 <_sercom_get_default_pad+0x1c>
     446:	481d      	ldr	r0, [pc, #116]	; (4bc <_sercom_get_default_pad+0x170>)
     448:	e78e      	b.n	368 <_sercom_get_default_pad+0x1c>
     44a:	481d      	ldr	r0, [pc, #116]	; (4c0 <_sercom_get_default_pad+0x174>)
     44c:	e78c      	b.n	368 <_sercom_get_default_pad+0x1c>
     44e:	46c0      	nop			; (mov r8, r8)
     450:	42001000 	.word	0x42001000
     454:	42001800 	.word	0x42001800
     458:	42001c00 	.word	0x42001c00
     45c:	42001400 	.word	0x42001400
     460:	42000800 	.word	0x42000800
     464:	42000c00 	.word	0x42000c00
     468:	00050003 	.word	0x00050003
     46c:	00060003 	.word	0x00060003
     470:	00070003 	.word	0x00070003
     474:	00010003 	.word	0x00010003
     478:	001e0003 	.word	0x001e0003
     47c:	001f0003 	.word	0x001f0003
     480:	00090003 	.word	0x00090003
     484:	000a0003 	.word	0x000a0003
     488:	000b0003 	.word	0x000b0003
     48c:	00110003 	.word	0x00110003
     490:	00120003 	.word	0x00120003
     494:	00130003 	.word	0x00130003
     498:	000d0003 	.word	0x000d0003
     49c:	000e0003 	.word	0x000e0003
     4a0:	000f0003 	.word	0x000f0003
     4a4:	00170003 	.word	0x00170003
     4a8:	00180003 	.word	0x00180003
     4ac:	00190003 	.word	0x00190003
     4b0:	00040003 	.word	0x00040003
     4b4:	00080003 	.word	0x00080003
     4b8:	00100003 	.word	0x00100003
     4bc:	000c0003 	.word	0x000c0003
     4c0:	00160003 	.word	0x00160003

000004c4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4c8:	4b0b      	ldr	r3, [pc, #44]	; (4f8 <_sercom_get_sercom_inst_index+0x34>)
     4ca:	466a      	mov	r2, sp
     4cc:	cb32      	ldmia	r3!, {r1, r4, r5}
     4ce:	c232      	stmia	r2!, {r1, r4, r5}
     4d0:	cb32      	ldmia	r3!, {r1, r4, r5}
     4d2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4d4:	9b00      	ldr	r3, [sp, #0]
     4d6:	4283      	cmp	r3, r0
     4d8:	d00b      	beq.n	4f2 <_sercom_get_sercom_inst_index+0x2e>
     4da:	2301      	movs	r3, #1
     4dc:	009a      	lsls	r2, r3, #2
     4de:	4669      	mov	r1, sp
     4e0:	5852      	ldr	r2, [r2, r1]
     4e2:	4282      	cmp	r2, r0
     4e4:	d006      	beq.n	4f4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4e6:	3301      	adds	r3, #1
     4e8:	2b06      	cmp	r3, #6
     4ea:	d1f7      	bne.n	4dc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     4ec:	2000      	movs	r0, #0
}
     4ee:	b007      	add	sp, #28
     4f0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4f2:	2300      	movs	r3, #0
			return i;
     4f4:	b2d8      	uxtb	r0, r3
     4f6:	e7fa      	b.n	4ee <_sercom_get_sercom_inst_index+0x2a>
     4f8:	00002f58 	.word	0x00002f58

000004fc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     4fc:	4770      	bx	lr
	...

00000500 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     502:	4b0a      	ldr	r3, [pc, #40]	; (52c <_sercom_set_handler+0x2c>)
     504:	781b      	ldrb	r3, [r3, #0]
     506:	2b00      	cmp	r3, #0
     508:	d10c      	bne.n	524 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     50a:	4f09      	ldr	r7, [pc, #36]	; (530 <_sercom_set_handler+0x30>)
     50c:	4e09      	ldr	r6, [pc, #36]	; (534 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     50e:	4d0a      	ldr	r5, [pc, #40]	; (538 <_sercom_set_handler+0x38>)
     510:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     512:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     514:	195a      	adds	r2, r3, r5
     516:	6014      	str	r4, [r2, #0]
     518:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     51a:	2b18      	cmp	r3, #24
     51c:	d1f9      	bne.n	512 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     51e:	2201      	movs	r2, #1
     520:	4b02      	ldr	r3, [pc, #8]	; (52c <_sercom_set_handler+0x2c>)
     522:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     524:	0080      	lsls	r0, r0, #2
     526:	4b02      	ldr	r3, [pc, #8]	; (530 <_sercom_set_handler+0x30>)
     528:	50c1      	str	r1, [r0, r3]
}
     52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     52c:	200001fa 	.word	0x200001fa
     530:	200001fc 	.word	0x200001fc
     534:	000004fd 	.word	0x000004fd
     538:	20000238 	.word	0x20000238

0000053c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     53c:	b500      	push	{lr}
     53e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     540:	2309      	movs	r3, #9
     542:	466a      	mov	r2, sp
     544:	7013      	strb	r3, [r2, #0]
     546:	3301      	adds	r3, #1
     548:	7053      	strb	r3, [r2, #1]
     54a:	3301      	adds	r3, #1
     54c:	7093      	strb	r3, [r2, #2]
     54e:	3301      	adds	r3, #1
     550:	70d3      	strb	r3, [r2, #3]
     552:	3301      	adds	r3, #1
     554:	7113      	strb	r3, [r2, #4]
     556:	3301      	adds	r3, #1
     558:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     55a:	4b03      	ldr	r3, [pc, #12]	; (568 <_sercom_get_interrupt_vector+0x2c>)
     55c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     55e:	466b      	mov	r3, sp
     560:	5618      	ldrsb	r0, [r3, r0]
}
     562:	b003      	add	sp, #12
     564:	bd00      	pop	{pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	000004c5 	.word	0x000004c5

0000056c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     56c:	b510      	push	{r4, lr}
     56e:	4b02      	ldr	r3, [pc, #8]	; (578 <SERCOM0_Handler+0xc>)
     570:	681b      	ldr	r3, [r3, #0]
     572:	2000      	movs	r0, #0
     574:	4798      	blx	r3
     576:	bd10      	pop	{r4, pc}
     578:	200001fc 	.word	0x200001fc

0000057c <SERCOM1_Handler>:
     57c:	b510      	push	{r4, lr}
     57e:	4b02      	ldr	r3, [pc, #8]	; (588 <SERCOM1_Handler+0xc>)
     580:	685b      	ldr	r3, [r3, #4]
     582:	2001      	movs	r0, #1
     584:	4798      	blx	r3
     586:	bd10      	pop	{r4, pc}
     588:	200001fc 	.word	0x200001fc

0000058c <SERCOM2_Handler>:
     58c:	b510      	push	{r4, lr}
     58e:	4b02      	ldr	r3, [pc, #8]	; (598 <SERCOM2_Handler+0xc>)
     590:	689b      	ldr	r3, [r3, #8]
     592:	2002      	movs	r0, #2
     594:	4798      	blx	r3
     596:	bd10      	pop	{r4, pc}
     598:	200001fc 	.word	0x200001fc

0000059c <SERCOM3_Handler>:
     59c:	b510      	push	{r4, lr}
     59e:	4b02      	ldr	r3, [pc, #8]	; (5a8 <SERCOM3_Handler+0xc>)
     5a0:	68db      	ldr	r3, [r3, #12]
     5a2:	2003      	movs	r0, #3
     5a4:	4798      	blx	r3
     5a6:	bd10      	pop	{r4, pc}
     5a8:	200001fc 	.word	0x200001fc

000005ac <SERCOM4_Handler>:
     5ac:	b510      	push	{r4, lr}
     5ae:	4b02      	ldr	r3, [pc, #8]	; (5b8 <SERCOM4_Handler+0xc>)
     5b0:	691b      	ldr	r3, [r3, #16]
     5b2:	2004      	movs	r0, #4
     5b4:	4798      	blx	r3
     5b6:	bd10      	pop	{r4, pc}
     5b8:	200001fc 	.word	0x200001fc

000005bc <SERCOM5_Handler>:
     5bc:	b510      	push	{r4, lr}
     5be:	4b02      	ldr	r3, [pc, #8]	; (5c8 <SERCOM5_Handler+0xc>)
     5c0:	695b      	ldr	r3, [r3, #20]
     5c2:	2005      	movs	r0, #5
     5c4:	4798      	blx	r3
     5c6:	bd10      	pop	{r4, pc}
     5c8:	200001fc 	.word	0x200001fc

000005cc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	46de      	mov	lr, fp
     5d0:	4657      	mov	r7, sl
     5d2:	464e      	mov	r6, r9
     5d4:	4645      	mov	r5, r8
     5d6:	b5e0      	push	{r5, r6, r7, lr}
     5d8:	b091      	sub	sp, #68	; 0x44
     5da:	0005      	movs	r5, r0
     5dc:	000c      	movs	r4, r1
     5de:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5e0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5e2:	0008      	movs	r0, r1
     5e4:	4bbc      	ldr	r3, [pc, #752]	; (8d8 <usart_init+0x30c>)
     5e6:	4798      	blx	r3
     5e8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5ea:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5ec:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5ee:	07db      	lsls	r3, r3, #31
     5f0:	d506      	bpl.n	600 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     5f2:	b011      	add	sp, #68	; 0x44
     5f4:	bc3c      	pop	{r2, r3, r4, r5}
     5f6:	4690      	mov	r8, r2
     5f8:	4699      	mov	r9, r3
     5fa:	46a2      	mov	sl, r4
     5fc:	46ab      	mov	fp, r5
     5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     600:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     602:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     604:	079b      	lsls	r3, r3, #30
     606:	d4f4      	bmi.n	5f2 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     608:	49b4      	ldr	r1, [pc, #720]	; (8dc <usart_init+0x310>)
     60a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     60c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     60e:	2301      	movs	r3, #1
     610:	40bb      	lsls	r3, r7
     612:	4303      	orrs	r3, r0
     614:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     616:	a90f      	add	r1, sp, #60	; 0x3c
     618:	272d      	movs	r7, #45	; 0x2d
     61a:	5df3      	ldrb	r3, [r6, r7]
     61c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     61e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     620:	b2d3      	uxtb	r3, r2
     622:	9302      	str	r3, [sp, #8]
     624:	0018      	movs	r0, r3
     626:	4bae      	ldr	r3, [pc, #696]	; (8e0 <usart_init+0x314>)
     628:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     62a:	9802      	ldr	r0, [sp, #8]
     62c:	4bad      	ldr	r3, [pc, #692]	; (8e4 <usart_init+0x318>)
     62e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     630:	5df0      	ldrb	r0, [r6, r7]
     632:	2100      	movs	r1, #0
     634:	4bac      	ldr	r3, [pc, #688]	; (8e8 <usart_init+0x31c>)
     636:	4798      	blx	r3
	module->character_size = config->character_size;
     638:	7af3      	ldrb	r3, [r6, #11]
     63a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     63c:	2324      	movs	r3, #36	; 0x24
     63e:	5cf3      	ldrb	r3, [r6, r3]
     640:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     642:	2325      	movs	r3, #37	; 0x25
     644:	5cf3      	ldrb	r3, [r6, r3]
     646:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     648:	7ef3      	ldrb	r3, [r6, #27]
     64a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     64c:	7f33      	ldrb	r3, [r6, #28]
     64e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     650:	682b      	ldr	r3, [r5, #0]
     652:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     654:	0018      	movs	r0, r3
     656:	4ba0      	ldr	r3, [pc, #640]	; (8d8 <usart_init+0x30c>)
     658:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     65a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     65c:	2200      	movs	r2, #0
     65e:	230e      	movs	r3, #14
     660:	a906      	add	r1, sp, #24
     662:	468c      	mov	ip, r1
     664:	4463      	add	r3, ip
     666:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     668:	8a32      	ldrh	r2, [r6, #16]
     66a:	9202      	str	r2, [sp, #8]
     66c:	2380      	movs	r3, #128	; 0x80
     66e:	01db      	lsls	r3, r3, #7
     670:	429a      	cmp	r2, r3
     672:	d100      	bne.n	676 <usart_init+0xaa>
     674:	e09e      	b.n	7b4 <usart_init+0x1e8>
     676:	d90f      	bls.n	698 <usart_init+0xcc>
     678:	23c0      	movs	r3, #192	; 0xc0
     67a:	01db      	lsls	r3, r3, #7
     67c:	9a02      	ldr	r2, [sp, #8]
     67e:	429a      	cmp	r2, r3
     680:	d100      	bne.n	684 <usart_init+0xb8>
     682:	e092      	b.n	7aa <usart_init+0x1de>
     684:	2380      	movs	r3, #128	; 0x80
     686:	021b      	lsls	r3, r3, #8
     688:	429a      	cmp	r2, r3
     68a:	d000      	beq.n	68e <usart_init+0xc2>
     68c:	e11f      	b.n	8ce <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     68e:	2303      	movs	r3, #3
     690:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     692:	2300      	movs	r3, #0
     694:	9307      	str	r3, [sp, #28]
     696:	e008      	b.n	6aa <usart_init+0xde>
	switch (config->sample_rate) {
     698:	2380      	movs	r3, #128	; 0x80
     69a:	019b      	lsls	r3, r3, #6
     69c:	429a      	cmp	r2, r3
     69e:	d000      	beq.n	6a2 <usart_init+0xd6>
     6a0:	e115      	b.n	8ce <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     6a2:	2310      	movs	r3, #16
     6a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6a6:	3b0f      	subs	r3, #15
     6a8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     6aa:	6833      	ldr	r3, [r6, #0]
     6ac:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     6ae:	68f3      	ldr	r3, [r6, #12]
     6b0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     6b2:	6973      	ldr	r3, [r6, #20]
     6b4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6b6:	7e33      	ldrb	r3, [r6, #24]
     6b8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6ba:	2326      	movs	r3, #38	; 0x26
     6bc:	5cf3      	ldrb	r3, [r6, r3]
     6be:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     6c0:	6873      	ldr	r3, [r6, #4]
     6c2:	4699      	mov	r9, r3
	switch (transfer_mode)
     6c4:	2b00      	cmp	r3, #0
     6c6:	d100      	bne.n	6ca <usart_init+0xfe>
     6c8:	e0a0      	b.n	80c <usart_init+0x240>
     6ca:	2380      	movs	r3, #128	; 0x80
     6cc:	055b      	lsls	r3, r3, #21
     6ce:	4599      	cmp	r9, r3
     6d0:	d100      	bne.n	6d4 <usart_init+0x108>
     6d2:	e084      	b.n	7de <usart_init+0x212>
	if(config->encoding_format_enable) {
     6d4:	7e73      	ldrb	r3, [r6, #25]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d002      	beq.n	6e0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     6da:	7eb3      	ldrb	r3, [r6, #26]
     6dc:	4642      	mov	r2, r8
     6de:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     6e0:	682a      	ldr	r2, [r5, #0]
     6e2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6e4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6e6:	2b00      	cmp	r3, #0
     6e8:	d1fc      	bne.n	6e4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     6ea:	330e      	adds	r3, #14
     6ec:	aa06      	add	r2, sp, #24
     6ee:	4694      	mov	ip, r2
     6f0:	4463      	add	r3, ip
     6f2:	881b      	ldrh	r3, [r3, #0]
     6f4:	4642      	mov	r2, r8
     6f6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     6f8:	9b05      	ldr	r3, [sp, #20]
     6fa:	9a03      	ldr	r2, [sp, #12]
     6fc:	4313      	orrs	r3, r2
     6fe:	9a04      	ldr	r2, [sp, #16]
     700:	4313      	orrs	r3, r2
     702:	464a      	mov	r2, r9
     704:	4313      	orrs	r3, r2
     706:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     708:	465b      	mov	r3, fp
     70a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     70c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     70e:	4653      	mov	r3, sl
     710:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     712:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     714:	2327      	movs	r3, #39	; 0x27
     716:	5cf3      	ldrb	r3, [r6, r3]
     718:	2b00      	cmp	r3, #0
     71a:	d101      	bne.n	720 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     71c:	3304      	adds	r3, #4
     71e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     720:	7e73      	ldrb	r3, [r6, #25]
     722:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     724:	7f32      	ldrb	r2, [r6, #28]
     726:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     728:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     72a:	7f72      	ldrb	r2, [r6, #29]
     72c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     72e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     730:	2224      	movs	r2, #36	; 0x24
     732:	5cb2      	ldrb	r2, [r6, r2]
     734:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     736:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     738:	2225      	movs	r2, #37	; 0x25
     73a:	5cb2      	ldrb	r2, [r6, r2]
     73c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     73e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     740:	7ab1      	ldrb	r1, [r6, #10]
     742:	7af2      	ldrb	r2, [r6, #11]
     744:	4311      	orrs	r1, r2
     746:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     748:	8933      	ldrh	r3, [r6, #8]
     74a:	2bff      	cmp	r3, #255	; 0xff
     74c:	d100      	bne.n	750 <usart_init+0x184>
     74e:	e081      	b.n	854 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     750:	2280      	movs	r2, #128	; 0x80
     752:	0452      	lsls	r2, r2, #17
     754:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     756:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     758:	232c      	movs	r3, #44	; 0x2c
     75a:	5cf3      	ldrb	r3, [r6, r3]
     75c:	2b00      	cmp	r3, #0
     75e:	d103      	bne.n	768 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     760:	4b62      	ldr	r3, [pc, #392]	; (8ec <usart_init+0x320>)
     762:	789b      	ldrb	r3, [r3, #2]
     764:	079b      	lsls	r3, r3, #30
     766:	d501      	bpl.n	76c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     768:	2380      	movs	r3, #128	; 0x80
     76a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     76c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     76e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     770:	2b00      	cmp	r3, #0
     772:	d1fc      	bne.n	76e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     774:	4643      	mov	r3, r8
     776:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     778:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     77a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     77c:	2b00      	cmp	r3, #0
     77e:	d1fc      	bne.n	77a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     780:	4643      	mov	r3, r8
     782:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     784:	ab0e      	add	r3, sp, #56	; 0x38
     786:	2280      	movs	r2, #128	; 0x80
     788:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     78a:	2200      	movs	r2, #0
     78c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     78e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     790:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     792:	6b33      	ldr	r3, [r6, #48]	; 0x30
     794:	930a      	str	r3, [sp, #40]	; 0x28
     796:	6b73      	ldr	r3, [r6, #52]	; 0x34
     798:	930b      	str	r3, [sp, #44]	; 0x2c
     79a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     79c:	930c      	str	r3, [sp, #48]	; 0x30
     79e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     7a0:	9302      	str	r3, [sp, #8]
     7a2:	930d      	str	r3, [sp, #52]	; 0x34
     7a4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7a6:	ae0a      	add	r6, sp, #40	; 0x28
     7a8:	e063      	b.n	872 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     7aa:	2308      	movs	r3, #8
     7ac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     7ae:	3b07      	subs	r3, #7
     7b0:	9307      	str	r3, [sp, #28]
     7b2:	e77a      	b.n	6aa <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     7b4:	6833      	ldr	r3, [r6, #0]
     7b6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     7b8:	68f3      	ldr	r3, [r6, #12]
     7ba:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     7bc:	6973      	ldr	r3, [r6, #20]
     7be:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7c0:	7e33      	ldrb	r3, [r6, #24]
     7c2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7c4:	2326      	movs	r3, #38	; 0x26
     7c6:	5cf3      	ldrb	r3, [r6, r3]
     7c8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     7ca:	6873      	ldr	r3, [r6, #4]
     7cc:	4699      	mov	r9, r3
	switch (transfer_mode)
     7ce:	2b00      	cmp	r3, #0
     7d0:	d018      	beq.n	804 <usart_init+0x238>
     7d2:	2380      	movs	r3, #128	; 0x80
     7d4:	055b      	lsls	r3, r3, #21
     7d6:	4599      	cmp	r9, r3
     7d8:	d001      	beq.n	7de <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     7da:	2000      	movs	r0, #0
     7dc:	e025      	b.n	82a <usart_init+0x25e>
			if (!config->use_external_clock) {
     7de:	2327      	movs	r3, #39	; 0x27
     7e0:	5cf3      	ldrb	r3, [r6, r3]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d000      	beq.n	7e8 <usart_init+0x21c>
     7e6:	e775      	b.n	6d4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     7e8:	6a33      	ldr	r3, [r6, #32]
     7ea:	001f      	movs	r7, r3
     7ec:	b2c0      	uxtb	r0, r0
     7ee:	4b40      	ldr	r3, [pc, #256]	; (8f0 <usart_init+0x324>)
     7f0:	4798      	blx	r3
     7f2:	0001      	movs	r1, r0
     7f4:	220e      	movs	r2, #14
     7f6:	ab06      	add	r3, sp, #24
     7f8:	469c      	mov	ip, r3
     7fa:	4462      	add	r2, ip
     7fc:	0038      	movs	r0, r7
     7fe:	4b3d      	ldr	r3, [pc, #244]	; (8f4 <usart_init+0x328>)
     800:	4798      	blx	r3
     802:	e012      	b.n	82a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     804:	2308      	movs	r3, #8
     806:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     808:	2300      	movs	r3, #0
     80a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     80c:	2327      	movs	r3, #39	; 0x27
     80e:	5cf3      	ldrb	r3, [r6, r3]
     810:	2b00      	cmp	r3, #0
     812:	d00e      	beq.n	832 <usart_init+0x266>
				status_code =
     814:	9b06      	ldr	r3, [sp, #24]
     816:	9300      	str	r3, [sp, #0]
     818:	9b07      	ldr	r3, [sp, #28]
     81a:	220e      	movs	r2, #14
     81c:	a906      	add	r1, sp, #24
     81e:	468c      	mov	ip, r1
     820:	4462      	add	r2, ip
     822:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     824:	6a30      	ldr	r0, [r6, #32]
     826:	4f34      	ldr	r7, [pc, #208]	; (8f8 <usart_init+0x32c>)
     828:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     82a:	2800      	cmp	r0, #0
     82c:	d000      	beq.n	830 <usart_init+0x264>
     82e:	e6e0      	b.n	5f2 <usart_init+0x26>
     830:	e750      	b.n	6d4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     832:	6a33      	ldr	r3, [r6, #32]
     834:	001f      	movs	r7, r3
     836:	b2c0      	uxtb	r0, r0
     838:	4b2d      	ldr	r3, [pc, #180]	; (8f0 <usart_init+0x324>)
     83a:	4798      	blx	r3
     83c:	0001      	movs	r1, r0
				status_code =
     83e:	9b06      	ldr	r3, [sp, #24]
     840:	9300      	str	r3, [sp, #0]
     842:	9b07      	ldr	r3, [sp, #28]
     844:	220e      	movs	r2, #14
     846:	a806      	add	r0, sp, #24
     848:	4684      	mov	ip, r0
     84a:	4462      	add	r2, ip
     84c:	0038      	movs	r0, r7
     84e:	4f2a      	ldr	r7, [pc, #168]	; (8f8 <usart_init+0x32c>)
     850:	47b8      	blx	r7
     852:	e7ea      	b.n	82a <usart_init+0x25e>
		if(config->lin_slave_enable) {
     854:	7ef3      	ldrb	r3, [r6, #27]
     856:	2b00      	cmp	r3, #0
     858:	d100      	bne.n	85c <usart_init+0x290>
     85a:	e77d      	b.n	758 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     85c:	2380      	movs	r3, #128	; 0x80
     85e:	04db      	lsls	r3, r3, #19
     860:	431f      	orrs	r7, r3
     862:	e779      	b.n	758 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     864:	0020      	movs	r0, r4
     866:	4b25      	ldr	r3, [pc, #148]	; (8fc <usart_init+0x330>)
     868:	4798      	blx	r3
     86a:	e007      	b.n	87c <usart_init+0x2b0>
     86c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     86e:	2f04      	cmp	r7, #4
     870:	d00d      	beq.n	88e <usart_init+0x2c2>
     872:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     874:	00bb      	lsls	r3, r7, #2
     876:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     878:	2800      	cmp	r0, #0
     87a:	d0f3      	beq.n	864 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     87c:	1c43      	adds	r3, r0, #1
     87e:	d0f5      	beq.n	86c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     880:	a90e      	add	r1, sp, #56	; 0x38
     882:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     884:	0c00      	lsrs	r0, r0, #16
     886:	b2c0      	uxtb	r0, r0
     888:	4b1d      	ldr	r3, [pc, #116]	; (900 <usart_init+0x334>)
     88a:	4798      	blx	r3
     88c:	e7ee      	b.n	86c <usart_init+0x2a0>
		module->callback[i]            = NULL;
     88e:	2300      	movs	r3, #0
     890:	60eb      	str	r3, [r5, #12]
     892:	612b      	str	r3, [r5, #16]
     894:	616b      	str	r3, [r5, #20]
     896:	61ab      	str	r3, [r5, #24]
     898:	61eb      	str	r3, [r5, #28]
     89a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     89c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     89e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     8a0:	2200      	movs	r2, #0
     8a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     8a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     8a6:	3330      	adds	r3, #48	; 0x30
     8a8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     8aa:	3301      	adds	r3, #1
     8ac:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     8ae:	3301      	adds	r3, #1
     8b0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     8b2:	3301      	adds	r3, #1
     8b4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     8b6:	6828      	ldr	r0, [r5, #0]
     8b8:	4b07      	ldr	r3, [pc, #28]	; (8d8 <usart_init+0x30c>)
     8ba:	4798      	blx	r3
     8bc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     8be:	4911      	ldr	r1, [pc, #68]	; (904 <usart_init+0x338>)
     8c0:	4b11      	ldr	r3, [pc, #68]	; (908 <usart_init+0x33c>)
     8c2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     8c4:	00a4      	lsls	r4, r4, #2
     8c6:	4b11      	ldr	r3, [pc, #68]	; (90c <usart_init+0x340>)
     8c8:	50e5      	str	r5, [r4, r3]
	return status_code;
     8ca:	2000      	movs	r0, #0
     8cc:	e691      	b.n	5f2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8ce:	2310      	movs	r3, #16
     8d0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8d2:	2300      	movs	r3, #0
     8d4:	9307      	str	r3, [sp, #28]
     8d6:	e6e8      	b.n	6aa <usart_init+0xde>
     8d8:	000004c5 	.word	0x000004c5
     8dc:	40000400 	.word	0x40000400
     8e0:	000010b9 	.word	0x000010b9
     8e4:	0000102d 	.word	0x0000102d
     8e8:	00000301 	.word	0x00000301
     8ec:	41002000 	.word	0x41002000
     8f0:	000010d5 	.word	0x000010d5
     8f4:	00000243 	.word	0x00000243
     8f8:	0000026d 	.word	0x0000026d
     8fc:	0000034d 	.word	0x0000034d
     900:	000011b1 	.word	0x000011b1
     904:	00000ae1 	.word	0x00000ae1
     908:	00000501 	.word	0x00000501
     90c:	20000238 	.word	0x20000238

00000910 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     910:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     912:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     914:	2a00      	cmp	r2, #0
     916:	d101      	bne.n	91c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     918:	0018      	movs	r0, r3
     91a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     91c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     91e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     920:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     922:	2a00      	cmp	r2, #0
     924:	d1f8      	bne.n	918 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     926:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     928:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     92a:	2a00      	cmp	r2, #0
     92c:	d1fc      	bne.n	928 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     92e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     930:	2102      	movs	r1, #2
     932:	7e1a      	ldrb	r2, [r3, #24]
     934:	420a      	tst	r2, r1
     936:	d0fc      	beq.n	932 <usart_write_wait+0x22>
	return STATUS_OK;
     938:	2300      	movs	r3, #0
     93a:	e7ed      	b.n	918 <usart_write_wait+0x8>

0000093c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     93c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     93e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     940:	2a00      	cmp	r2, #0
     942:	d101      	bne.n	948 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     944:	0018      	movs	r0, r3
     946:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     948:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     94a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     94c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     94e:	2a00      	cmp	r2, #0
     950:	d1f8      	bne.n	944 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     952:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     954:	7e10      	ldrb	r0, [r2, #24]
     956:	0740      	lsls	r0, r0, #29
     958:	d5f4      	bpl.n	944 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     95a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     95c:	2b00      	cmp	r3, #0
     95e:	d1fc      	bne.n	95a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     960:	8b53      	ldrh	r3, [r2, #26]
     962:	b2db      	uxtb	r3, r3
	if (error_code) {
     964:	0698      	lsls	r0, r3, #26
     966:	d01d      	beq.n	9a4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     968:	0798      	lsls	r0, r3, #30
     96a:	d503      	bpl.n	974 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     96c:	2302      	movs	r3, #2
     96e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     970:	3318      	adds	r3, #24
     972:	e7e7      	b.n	944 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     974:	0758      	lsls	r0, r3, #29
     976:	d503      	bpl.n	980 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     978:	2304      	movs	r3, #4
     97a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     97c:	331a      	adds	r3, #26
     97e:	e7e1      	b.n	944 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     980:	07d8      	lsls	r0, r3, #31
     982:	d503      	bpl.n	98c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     984:	2301      	movs	r3, #1
     986:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     988:	3312      	adds	r3, #18
     98a:	e7db      	b.n	944 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     98c:	06d8      	lsls	r0, r3, #27
     98e:	d503      	bpl.n	998 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     990:	2310      	movs	r3, #16
     992:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     994:	3332      	adds	r3, #50	; 0x32
     996:	e7d5      	b.n	944 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     998:	069b      	lsls	r3, r3, #26
     99a:	d503      	bpl.n	9a4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     99c:	2320      	movs	r3, #32
     99e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     9a0:	3321      	adds	r3, #33	; 0x21
     9a2:	e7cf      	b.n	944 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     9a4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     9a6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     9a8:	2300      	movs	r3, #0
     9aa:	e7cb      	b.n	944 <usart_read_wait+0x8>

000009ac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ae:	46ce      	mov	lr, r9
     9b0:	4647      	mov	r7, r8
     9b2:	b580      	push	{r7, lr}
     9b4:	b083      	sub	sp, #12
     9b6:	0005      	movs	r5, r0
     9b8:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9ba:	2017      	movs	r0, #23
	if (length == 0) {
     9bc:	2a00      	cmp	r2, #0
     9be:	d104      	bne.n	9ca <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     9c0:	b003      	add	sp, #12
     9c2:	bc0c      	pop	{r2, r3}
     9c4:	4690      	mov	r8, r2
     9c6:	4699      	mov	r9, r3
     9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     9ca:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     9cc:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     9ce:	2b00      	cmp	r3, #0
     9d0:	d0f6      	beq.n	9c0 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9d2:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9d4:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     9d6:	2b00      	cmp	r3, #0
     9d8:	d1fc      	bne.n	9d4 <usart_write_buffer_wait+0x28>
	while (length--) {
     9da:	3a01      	subs	r2, #1
     9dc:	b293      	uxth	r3, r2
     9de:	4699      	mov	r9, r3
     9e0:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     9e2:	2701      	movs	r7, #1
	while (length--) {
     9e4:	4b1f      	ldr	r3, [pc, #124]	; (a64 <usart_write_buffer_wait+0xb8>)
     9e6:	4698      	mov	r8, r3
     9e8:	e011      	b.n	a0e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     9ea:	1c73      	adds	r3, r6, #1
     9ec:	b29b      	uxth	r3, r3
     9ee:	9a01      	ldr	r2, [sp, #4]
     9f0:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9f2:	796a      	ldrb	r2, [r5, #5]
     9f4:	2a01      	cmp	r2, #1
     9f6:	d017      	beq.n	a28 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     9f8:	b289      	uxth	r1, r1
     9fa:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     9fc:	0028      	movs	r0, r5
     9fe:	4b1a      	ldr	r3, [pc, #104]	; (a68 <usart_write_buffer_wait+0xbc>)
     a00:	4798      	blx	r3
	while (length--) {
     a02:	464b      	mov	r3, r9
     a04:	3b01      	subs	r3, #1
     a06:	b29b      	uxth	r3, r3
     a08:	4699      	mov	r9, r3
     a0a:	4543      	cmp	r3, r8
     a0c:	d013      	beq.n	a36 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     a0e:	7e23      	ldrb	r3, [r4, #24]
     a10:	423b      	tst	r3, r7
     a12:	d1ea      	bne.n	9ea <usart_write_buffer_wait+0x3e>
     a14:	4b13      	ldr	r3, [pc, #76]	; (a64 <usart_write_buffer_wait+0xb8>)
     a16:	7e22      	ldrb	r2, [r4, #24]
     a18:	423a      	tst	r2, r7
     a1a:	d1e6      	bne.n	9ea <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     a1c:	2b01      	cmp	r3, #1
     a1e:	d019      	beq.n	a54 <usart_write_buffer_wait+0xa8>
     a20:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a22:	2b00      	cmp	r3, #0
     a24:	d1f7      	bne.n	a16 <usart_write_buffer_wait+0x6a>
     a26:	e7e0      	b.n	9ea <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     a28:	3602      	adds	r6, #2
     a2a:	b2b6      	uxth	r6, r6
     a2c:	9a01      	ldr	r2, [sp, #4]
     a2e:	5cd3      	ldrb	r3, [r2, r3]
     a30:	021b      	lsls	r3, r3, #8
     a32:	4319      	orrs	r1, r3
     a34:	e7e2      	b.n	9fc <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     a36:	7e23      	ldrb	r3, [r4, #24]
     a38:	079b      	lsls	r3, r3, #30
     a3a:	d40d      	bmi.n	a58 <usart_write_buffer_wait+0xac>
     a3c:	4b09      	ldr	r3, [pc, #36]	; (a64 <usart_write_buffer_wait+0xb8>)
     a3e:	2102      	movs	r1, #2
     a40:	7e22      	ldrb	r2, [r4, #24]
     a42:	420a      	tst	r2, r1
     a44:	d10a      	bne.n	a5c <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     a46:	2b01      	cmp	r3, #1
     a48:	d00a      	beq.n	a60 <usart_write_buffer_wait+0xb4>
     a4a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a4c:	2b00      	cmp	r3, #0
     a4e:	d1f7      	bne.n	a40 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     a50:	2000      	movs	r0, #0
     a52:	e7b5      	b.n	9c0 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     a54:	2012      	movs	r0, #18
     a56:	e7b3      	b.n	9c0 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     a58:	2000      	movs	r0, #0
     a5a:	e7b1      	b.n	9c0 <usart_write_buffer_wait+0x14>
     a5c:	2000      	movs	r0, #0
     a5e:	e7af      	b.n	9c0 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     a60:	2012      	movs	r0, #18
     a62:	e7ad      	b.n	9c0 <usart_write_buffer_wait+0x14>
     a64:	0000ffff 	.word	0x0000ffff
     a68:	00000911 	.word	0x00000911

00000a6c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a6e:	0006      	movs	r6, r0
     a70:	000c      	movs	r4, r1
     a72:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a74:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     a76:	4b0a      	ldr	r3, [pc, #40]	; (aa0 <_usart_write_buffer+0x34>)
     a78:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     a7a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     a7c:	b29b      	uxth	r3, r3
     a7e:	2b00      	cmp	r3, #0
     a80:	d003      	beq.n	a8a <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     a82:	4b08      	ldr	r3, [pc, #32]	; (aa4 <_usart_write_buffer+0x38>)
     a84:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     a86:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     a8a:	85f5      	strh	r5, [r6, #46]	; 0x2e
     a8c:	4b05      	ldr	r3, [pc, #20]	; (aa4 <_usart_write_buffer+0x38>)
     a8e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     a90:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     a92:	2205      	movs	r2, #5
     a94:	2333      	movs	r3, #51	; 0x33
     a96:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     a98:	3b32      	subs	r3, #50	; 0x32
     a9a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     a9c:	2000      	movs	r0, #0
     a9e:	e7f3      	b.n	a88 <_usart_write_buffer+0x1c>
     aa0:	00000119 	.word	0x00000119
     aa4:	00000159 	.word	0x00000159

00000aa8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     aa8:	1c93      	adds	r3, r2, #2
     aaa:	009b      	lsls	r3, r3, #2
     aac:	18c3      	adds	r3, r0, r3
     aae:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     ab0:	2130      	movs	r1, #48	; 0x30
     ab2:	2301      	movs	r3, #1
     ab4:	4093      	lsls	r3, r2
     ab6:	001a      	movs	r2, r3
     ab8:	5c43      	ldrb	r3, [r0, r1]
     aba:	4313      	orrs	r3, r2
     abc:	5443      	strb	r3, [r0, r1]
}
     abe:	4770      	bx	lr

00000ac0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     ac0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ac2:	2317      	movs	r3, #23
	if (length == 0) {
     ac4:	2a00      	cmp	r2, #0
     ac6:	d101      	bne.n	acc <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     ac8:	0018      	movs	r0, r3
     aca:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     acc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     ace:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     ad0:	2c00      	cmp	r4, #0
     ad2:	d0f9      	beq.n	ac8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     ad4:	4b01      	ldr	r3, [pc, #4]	; (adc <usart_write_buffer_job+0x1c>)
     ad6:	4798      	blx	r3
     ad8:	0003      	movs	r3, r0
     ada:	e7f5      	b.n	ac8 <usart_write_buffer_job+0x8>
     adc:	00000a6d 	.word	0x00000a6d

00000ae0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     ae2:	0080      	lsls	r0, r0, #2
     ae4:	4b62      	ldr	r3, [pc, #392]	; (c70 <_usart_interrupt_handler+0x190>)
     ae6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ae8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     aea:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     aec:	2b00      	cmp	r3, #0
     aee:	d1fc      	bne.n	aea <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     af0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     af2:	7da6      	ldrb	r6, [r4, #22]
     af4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     af6:	2330      	movs	r3, #48	; 0x30
     af8:	5ceb      	ldrb	r3, [r5, r3]
     afa:	2231      	movs	r2, #49	; 0x31
     afc:	5caf      	ldrb	r7, [r5, r2]
     afe:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     b00:	07f3      	lsls	r3, r6, #31
     b02:	d522      	bpl.n	b4a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     b04:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b06:	b29b      	uxth	r3, r3
     b08:	2b00      	cmp	r3, #0
     b0a:	d01c      	beq.n	b46 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     b0e:	7813      	ldrb	r3, [r2, #0]
     b10:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     b12:	1c51      	adds	r1, r2, #1
     b14:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b16:	7969      	ldrb	r1, [r5, #5]
     b18:	2901      	cmp	r1, #1
     b1a:	d00e      	beq.n	b3a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b1c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     b1e:	05db      	lsls	r3, r3, #23
     b20:	0ddb      	lsrs	r3, r3, #23
     b22:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     b24:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b26:	3b01      	subs	r3, #1
     b28:	b29b      	uxth	r3, r3
     b2a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     b2c:	2b00      	cmp	r3, #0
     b2e:	d10c      	bne.n	b4a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b30:	3301      	adds	r3, #1
     b32:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b34:	3301      	adds	r3, #1
     b36:	75a3      	strb	r3, [r4, #22]
     b38:	e007      	b.n	b4a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b3a:	7851      	ldrb	r1, [r2, #1]
     b3c:	0209      	lsls	r1, r1, #8
     b3e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b40:	3202      	adds	r2, #2
     b42:	62aa      	str	r2, [r5, #40]	; 0x28
     b44:	e7eb      	b.n	b1e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b46:	2301      	movs	r3, #1
     b48:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b4a:	07b3      	lsls	r3, r6, #30
     b4c:	d506      	bpl.n	b5c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b4e:	2302      	movs	r3, #2
     b50:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     b52:	2200      	movs	r2, #0
     b54:	3331      	adds	r3, #49	; 0x31
     b56:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b58:	07fb      	lsls	r3, r7, #31
     b5a:	d41a      	bmi.n	b92 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b5c:	0773      	lsls	r3, r6, #29
     b5e:	d565      	bpl.n	c2c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     b60:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b62:	b29b      	uxth	r3, r3
     b64:	2b00      	cmp	r3, #0
     b66:	d05f      	beq.n	c28 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b68:	8b63      	ldrh	r3, [r4, #26]
     b6a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     b6c:	071a      	lsls	r2, r3, #28
     b6e:	d414      	bmi.n	b9a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b70:	223f      	movs	r2, #63	; 0x3f
     b72:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b74:	2b00      	cmp	r3, #0
     b76:	d034      	beq.n	be2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b78:	079a      	lsls	r2, r3, #30
     b7a:	d511      	bpl.n	ba0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b7c:	221a      	movs	r2, #26
     b7e:	2332      	movs	r3, #50	; 0x32
     b80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b82:	3b30      	subs	r3, #48	; 0x30
     b84:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     b86:	077b      	lsls	r3, r7, #29
     b88:	d550      	bpl.n	c2c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b8a:	0028      	movs	r0, r5
     b8c:	696b      	ldr	r3, [r5, #20]
     b8e:	4798      	blx	r3
     b90:	e04c      	b.n	c2c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b92:	0028      	movs	r0, r5
     b94:	68eb      	ldr	r3, [r5, #12]
     b96:	4798      	blx	r3
     b98:	e7e0      	b.n	b5c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b9a:	2237      	movs	r2, #55	; 0x37
     b9c:	4013      	ands	r3, r2
     b9e:	e7e9      	b.n	b74 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ba0:	075a      	lsls	r2, r3, #29
     ba2:	d505      	bpl.n	bb0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     ba4:	221e      	movs	r2, #30
     ba6:	2332      	movs	r3, #50	; 0x32
     ba8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     baa:	3b2e      	subs	r3, #46	; 0x2e
     bac:	8363      	strh	r3, [r4, #26]
     bae:	e7ea      	b.n	b86 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bb0:	07da      	lsls	r2, r3, #31
     bb2:	d505      	bpl.n	bc0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     bb4:	2213      	movs	r2, #19
     bb6:	2332      	movs	r3, #50	; 0x32
     bb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bba:	3b31      	subs	r3, #49	; 0x31
     bbc:	8363      	strh	r3, [r4, #26]
     bbe:	e7e2      	b.n	b86 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     bc0:	06da      	lsls	r2, r3, #27
     bc2:	d505      	bpl.n	bd0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     bc4:	2242      	movs	r2, #66	; 0x42
     bc6:	2332      	movs	r3, #50	; 0x32
     bc8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     bca:	3b22      	subs	r3, #34	; 0x22
     bcc:	8363      	strh	r3, [r4, #26]
     bce:	e7da      	b.n	b86 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     bd0:	2220      	movs	r2, #32
     bd2:	421a      	tst	r2, r3
     bd4:	d0d7      	beq.n	b86 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     bd6:	3221      	adds	r2, #33	; 0x21
     bd8:	2332      	movs	r3, #50	; 0x32
     bda:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     bdc:	3b12      	subs	r3, #18
     bde:	8363      	strh	r3, [r4, #26]
     be0:	e7d1      	b.n	b86 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     be2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     be4:	05db      	lsls	r3, r3, #23
     be6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     be8:	b2da      	uxtb	r2, r3
     bea:	6a69      	ldr	r1, [r5, #36]	; 0x24
     bec:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     bee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     bf0:	1c51      	adds	r1, r2, #1
     bf2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bf4:	7969      	ldrb	r1, [r5, #5]
     bf6:	2901      	cmp	r1, #1
     bf8:	d010      	beq.n	c1c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     bfa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     bfc:	3b01      	subs	r3, #1
     bfe:	b29b      	uxth	r3, r3
     c00:	85ab      	strh	r3, [r5, #44]	; 0x2c
     c02:	2b00      	cmp	r3, #0
     c04:	d112      	bne.n	c2c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c06:	3304      	adds	r3, #4
     c08:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     c0a:	2200      	movs	r2, #0
     c0c:	332e      	adds	r3, #46	; 0x2e
     c0e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     c10:	07bb      	lsls	r3, r7, #30
     c12:	d50b      	bpl.n	c2c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c14:	0028      	movs	r0, r5
     c16:	692b      	ldr	r3, [r5, #16]
     c18:	4798      	blx	r3
     c1a:	e007      	b.n	c2c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c1c:	0a1b      	lsrs	r3, r3, #8
     c1e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     c22:	3301      	adds	r3, #1
     c24:	626b      	str	r3, [r5, #36]	; 0x24
     c26:	e7e8      	b.n	bfa <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c28:	2304      	movs	r3, #4
     c2a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     c2c:	06f3      	lsls	r3, r6, #27
     c2e:	d504      	bpl.n	c3a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     c30:	2310      	movs	r3, #16
     c32:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     c34:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     c36:	06fb      	lsls	r3, r7, #27
     c38:	d40e      	bmi.n	c58 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     c3a:	06b3      	lsls	r3, r6, #26
     c3c:	d504      	bpl.n	c48 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     c3e:	2320      	movs	r3, #32
     c40:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     c42:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     c44:	073b      	lsls	r3, r7, #28
     c46:	d40b      	bmi.n	c60 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     c48:	0733      	lsls	r3, r6, #28
     c4a:	d504      	bpl.n	c56 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     c4c:	2308      	movs	r3, #8
     c4e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     c50:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     c52:	06bb      	lsls	r3, r7, #26
     c54:	d408      	bmi.n	c68 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     c58:	0028      	movs	r0, r5
     c5a:	69eb      	ldr	r3, [r5, #28]
     c5c:	4798      	blx	r3
     c5e:	e7ec      	b.n	c3a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     c60:	0028      	movs	r0, r5
     c62:	69ab      	ldr	r3, [r5, #24]
     c64:	4798      	blx	r3
     c66:	e7ef      	b.n	c48 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     c68:	6a2b      	ldr	r3, [r5, #32]
     c6a:	0028      	movs	r0, r5
     c6c:	4798      	blx	r3
}
     c6e:	e7f2      	b.n	c56 <_usart_interrupt_handler+0x176>
     c70:	20000238 	.word	0x20000238

00000c74 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c74:	b510      	push	{r4, lr}
	switch (clock_source) {
     c76:	2808      	cmp	r0, #8
     c78:	d803      	bhi.n	c82 <system_clock_source_get_hz+0xe>
     c7a:	0080      	lsls	r0, r0, #2
     c7c:	4b1b      	ldr	r3, [pc, #108]	; (cec <system_clock_source_get_hz+0x78>)
     c7e:	581b      	ldr	r3, [r3, r0]
     c80:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     c82:	2000      	movs	r0, #0
     c84:	e030      	b.n	ce8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     c86:	4b1a      	ldr	r3, [pc, #104]	; (cf0 <system_clock_source_get_hz+0x7c>)
     c88:	6918      	ldr	r0, [r3, #16]
     c8a:	e02d      	b.n	ce8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c8c:	4b19      	ldr	r3, [pc, #100]	; (cf4 <system_clock_source_get_hz+0x80>)
     c8e:	6a1b      	ldr	r3, [r3, #32]
     c90:	059b      	lsls	r3, r3, #22
     c92:	0f9b      	lsrs	r3, r3, #30
     c94:	4818      	ldr	r0, [pc, #96]	; (cf8 <system_clock_source_get_hz+0x84>)
     c96:	40d8      	lsrs	r0, r3
     c98:	e026      	b.n	ce8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     c9a:	4b15      	ldr	r3, [pc, #84]	; (cf0 <system_clock_source_get_hz+0x7c>)
     c9c:	6958      	ldr	r0, [r3, #20]
     c9e:	e023      	b.n	ce8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ca0:	4b13      	ldr	r3, [pc, #76]	; (cf0 <system_clock_source_get_hz+0x7c>)
     ca2:	681b      	ldr	r3, [r3, #0]
			return 0;
     ca4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ca6:	079b      	lsls	r3, r3, #30
     ca8:	d51e      	bpl.n	ce8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     caa:	4912      	ldr	r1, [pc, #72]	; (cf4 <system_clock_source_get_hz+0x80>)
     cac:	2210      	movs	r2, #16
     cae:	68cb      	ldr	r3, [r1, #12]
     cb0:	421a      	tst	r2, r3
     cb2:	d0fc      	beq.n	cae <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     cb4:	4b0e      	ldr	r3, [pc, #56]	; (cf0 <system_clock_source_get_hz+0x7c>)
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	075b      	lsls	r3, r3, #29
     cba:	d401      	bmi.n	cc0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     cbc:	480f      	ldr	r0, [pc, #60]	; (cfc <system_clock_source_get_hz+0x88>)
     cbe:	e013      	b.n	ce8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cc0:	2000      	movs	r0, #0
     cc2:	4b0f      	ldr	r3, [pc, #60]	; (d00 <system_clock_source_get_hz+0x8c>)
     cc4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <system_clock_source_get_hz+0x7c>)
     cc8:	689b      	ldr	r3, [r3, #8]
     cca:	041b      	lsls	r3, r3, #16
     ccc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cce:	4358      	muls	r0, r3
     cd0:	e00a      	b.n	ce8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cd2:	2350      	movs	r3, #80	; 0x50
     cd4:	4a07      	ldr	r2, [pc, #28]	; (cf4 <system_clock_source_get_hz+0x80>)
     cd6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     cd8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cda:	075b      	lsls	r3, r3, #29
     cdc:	d504      	bpl.n	ce8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <system_clock_source_get_hz+0x7c>)
     ce0:	68d8      	ldr	r0, [r3, #12]
     ce2:	e001      	b.n	ce8 <system_clock_source_get_hz+0x74>
		return 32768UL;
     ce4:	2080      	movs	r0, #128	; 0x80
     ce6:	0200      	lsls	r0, r0, #8
	}
}
     ce8:	bd10      	pop	{r4, pc}
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	00002f70 	.word	0x00002f70
     cf0:	20000214 	.word	0x20000214
     cf4:	40000800 	.word	0x40000800
     cf8:	007a1200 	.word	0x007a1200
     cfc:	02dc6c00 	.word	0x02dc6c00
     d00:	000010d5 	.word	0x000010d5

00000d04 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d04:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d06:	490c      	ldr	r1, [pc, #48]	; (d38 <system_clock_source_osc8m_set_config+0x34>)
     d08:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d0a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d0c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d0e:	7840      	ldrb	r0, [r0, #1]
     d10:	2201      	movs	r2, #1
     d12:	4010      	ands	r0, r2
     d14:	0180      	lsls	r0, r0, #6
     d16:	2640      	movs	r6, #64	; 0x40
     d18:	43b3      	bics	r3, r6
     d1a:	4303      	orrs	r3, r0
     d1c:	402a      	ands	r2, r5
     d1e:	01d2      	lsls	r2, r2, #7
     d20:	2080      	movs	r0, #128	; 0x80
     d22:	4383      	bics	r3, r0
     d24:	4313      	orrs	r3, r2
     d26:	2203      	movs	r2, #3
     d28:	4022      	ands	r2, r4
     d2a:	0212      	lsls	r2, r2, #8
     d2c:	4803      	ldr	r0, [pc, #12]	; (d3c <system_clock_source_osc8m_set_config+0x38>)
     d2e:	4003      	ands	r3, r0
     d30:	4313      	orrs	r3, r2
     d32:	620b      	str	r3, [r1, #32]
}
     d34:	bd70      	pop	{r4, r5, r6, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	40000800 	.word	0x40000800
     d3c:	fffffcff 	.word	0xfffffcff

00000d40 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d40:	2808      	cmp	r0, #8
     d42:	d803      	bhi.n	d4c <system_clock_source_enable+0xc>
     d44:	0080      	lsls	r0, r0, #2
     d46:	4b25      	ldr	r3, [pc, #148]	; (ddc <system_clock_source_enable+0x9c>)
     d48:	581b      	ldr	r3, [r3, r0]
     d4a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d4c:	2017      	movs	r0, #23
     d4e:	e044      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d50:	4a23      	ldr	r2, [pc, #140]	; (de0 <system_clock_source_enable+0xa0>)
     d52:	6a13      	ldr	r3, [r2, #32]
     d54:	2102      	movs	r1, #2
     d56:	430b      	orrs	r3, r1
     d58:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d5a:	2000      	movs	r0, #0
     d5c:	e03d      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d5e:	4a20      	ldr	r2, [pc, #128]	; (de0 <system_clock_source_enable+0xa0>)
     d60:	6993      	ldr	r3, [r2, #24]
     d62:	2102      	movs	r1, #2
     d64:	430b      	orrs	r3, r1
     d66:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     d68:	2000      	movs	r0, #0
		break;
     d6a:	e036      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d6c:	4a1c      	ldr	r2, [pc, #112]	; (de0 <system_clock_source_enable+0xa0>)
     d6e:	8a13      	ldrh	r3, [r2, #16]
     d70:	2102      	movs	r1, #2
     d72:	430b      	orrs	r3, r1
     d74:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     d76:	2000      	movs	r0, #0
		break;
     d78:	e02f      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d7a:	4a19      	ldr	r2, [pc, #100]	; (de0 <system_clock_source_enable+0xa0>)
     d7c:	8a93      	ldrh	r3, [r2, #20]
     d7e:	2102      	movs	r1, #2
     d80:	430b      	orrs	r3, r1
     d82:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     d84:	2000      	movs	r0, #0
		break;
     d86:	e028      	b.n	dda <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     d88:	4916      	ldr	r1, [pc, #88]	; (de4 <system_clock_source_enable+0xa4>)
     d8a:	680b      	ldr	r3, [r1, #0]
     d8c:	2202      	movs	r2, #2
     d8e:	4313      	orrs	r3, r2
     d90:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     d92:	4b13      	ldr	r3, [pc, #76]	; (de0 <system_clock_source_enable+0xa0>)
     d94:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d96:	0019      	movs	r1, r3
     d98:	320e      	adds	r2, #14
     d9a:	68cb      	ldr	r3, [r1, #12]
     d9c:	421a      	tst	r2, r3
     d9e:	d0fc      	beq.n	d9a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     da0:	4a10      	ldr	r2, [pc, #64]	; (de4 <system_clock_source_enable+0xa4>)
     da2:	6891      	ldr	r1, [r2, #8]
     da4:	4b0e      	ldr	r3, [pc, #56]	; (de0 <system_clock_source_enable+0xa0>)
     da6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     da8:	6852      	ldr	r2, [r2, #4]
     daa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     dac:	2200      	movs	r2, #0
     dae:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     db0:	0019      	movs	r1, r3
     db2:	3210      	adds	r2, #16
     db4:	68cb      	ldr	r3, [r1, #12]
     db6:	421a      	tst	r2, r3
     db8:	d0fc      	beq.n	db4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     dba:	4b0a      	ldr	r3, [pc, #40]	; (de4 <system_clock_source_enable+0xa4>)
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	b29b      	uxth	r3, r3
     dc0:	4a07      	ldr	r2, [pc, #28]	; (de0 <system_clock_source_enable+0xa0>)
     dc2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     dc4:	2000      	movs	r0, #0
     dc6:	e008      	b.n	dda <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     dc8:	4905      	ldr	r1, [pc, #20]	; (de0 <system_clock_source_enable+0xa0>)
     dca:	2244      	movs	r2, #68	; 0x44
     dcc:	5c8b      	ldrb	r3, [r1, r2]
     dce:	2002      	movs	r0, #2
     dd0:	4303      	orrs	r3, r0
     dd2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     dd4:	2000      	movs	r0, #0
		break;
     dd6:	e000      	b.n	dda <system_clock_source_enable+0x9a>
		return STATUS_OK;
     dd8:	2000      	movs	r0, #0
}
     dda:	4770      	bx	lr
     ddc:	00002f94 	.word	0x00002f94
     de0:	40000800 	.word	0x40000800
     de4:	20000214 	.word	0x20000214

00000de8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     de8:	b530      	push	{r4, r5, lr}
     dea:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dec:	22c2      	movs	r2, #194	; 0xc2
     dee:	00d2      	lsls	r2, r2, #3
     df0:	4b1a      	ldr	r3, [pc, #104]	; (e5c <system_clock_init+0x74>)
     df2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     df4:	4a1a      	ldr	r2, [pc, #104]	; (e60 <system_clock_init+0x78>)
     df6:	6853      	ldr	r3, [r2, #4]
     df8:	211e      	movs	r1, #30
     dfa:	438b      	bics	r3, r1
     dfc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     dfe:	2301      	movs	r3, #1
     e00:	466a      	mov	r2, sp
     e02:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e04:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e06:	4d17      	ldr	r5, [pc, #92]	; (e64 <system_clock_init+0x7c>)
     e08:	b2e0      	uxtb	r0, r4
     e0a:	4669      	mov	r1, sp
     e0c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e0e:	3401      	adds	r4, #1
     e10:	2c25      	cmp	r4, #37	; 0x25
     e12:	d1f9      	bne.n	e08 <system_clock_init+0x20>
	config->run_in_standby  = false;
     e14:	a803      	add	r0, sp, #12
     e16:	2400      	movs	r4, #0
     e18:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     e1a:	2501      	movs	r5, #1
     e1c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e1e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e20:	4b11      	ldr	r3, [pc, #68]	; (e68 <system_clock_init+0x80>)
     e22:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e24:	2006      	movs	r0, #6
     e26:	4b11      	ldr	r3, [pc, #68]	; (e6c <system_clock_init+0x84>)
     e28:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e2a:	4b11      	ldr	r3, [pc, #68]	; (e70 <system_clock_init+0x88>)
     e2c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     e2e:	4b11      	ldr	r3, [pc, #68]	; (e74 <system_clock_init+0x8c>)
     e30:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e32:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e34:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e36:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e38:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e3a:	466b      	mov	r3, sp
     e3c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e3e:	2306      	movs	r3, #6
     e40:	466a      	mov	r2, sp
     e42:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     e44:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     e46:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e48:	4669      	mov	r1, sp
     e4a:	2000      	movs	r0, #0
     e4c:	4b0a      	ldr	r3, [pc, #40]	; (e78 <system_clock_init+0x90>)
     e4e:	4798      	blx	r3
     e50:	2000      	movs	r0, #0
     e52:	4b0a      	ldr	r3, [pc, #40]	; (e7c <system_clock_init+0x94>)
     e54:	4798      	blx	r3
#endif
}
     e56:	b005      	add	sp, #20
     e58:	bd30      	pop	{r4, r5, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	40000800 	.word	0x40000800
     e60:	41004000 	.word	0x41004000
     e64:	000010b9 	.word	0x000010b9
     e68:	00000d05 	.word	0x00000d05
     e6c:	00000d41 	.word	0x00000d41
     e70:	00000e81 	.word	0x00000e81
     e74:	40000400 	.word	0x40000400
     e78:	00000ea5 	.word	0x00000ea5
     e7c:	00000f5d 	.word	0x00000f5d

00000e80 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     e80:	4a06      	ldr	r2, [pc, #24]	; (e9c <system_gclk_init+0x1c>)
     e82:	6993      	ldr	r3, [r2, #24]
     e84:	2108      	movs	r1, #8
     e86:	430b      	orrs	r3, r1
     e88:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     e8a:	2201      	movs	r2, #1
     e8c:	4b04      	ldr	r3, [pc, #16]	; (ea0 <system_gclk_init+0x20>)
     e8e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     e90:	0019      	movs	r1, r3
     e92:	780b      	ldrb	r3, [r1, #0]
     e94:	4213      	tst	r3, r2
     e96:	d1fc      	bne.n	e92 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     e98:	4770      	bx	lr
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	40000400 	.word	0x40000400
     ea0:	40000c00 	.word	0x40000c00

00000ea4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ea4:	b570      	push	{r4, r5, r6, lr}
     ea6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     ea8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     eaa:	780d      	ldrb	r5, [r1, #0]
     eac:	022d      	lsls	r5, r5, #8
     eae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     eb0:	784b      	ldrb	r3, [r1, #1]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d002      	beq.n	ebc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     eb6:	2380      	movs	r3, #128	; 0x80
     eb8:	02db      	lsls	r3, r3, #11
     eba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     ebc:	7a4b      	ldrb	r3, [r1, #9]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d002      	beq.n	ec8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     ec2:	2380      	movs	r3, #128	; 0x80
     ec4:	031b      	lsls	r3, r3, #12
     ec6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ec8:	6848      	ldr	r0, [r1, #4]
     eca:	2801      	cmp	r0, #1
     ecc:	d910      	bls.n	ef0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     ece:	1e43      	subs	r3, r0, #1
     ed0:	4218      	tst	r0, r3
     ed2:	d134      	bne.n	f3e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     ed4:	2802      	cmp	r0, #2
     ed6:	d930      	bls.n	f3a <system_gclk_gen_set_config+0x96>
     ed8:	2302      	movs	r3, #2
     eda:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     edc:	3201      	adds	r2, #1
						mask <<= 1) {
     ede:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     ee0:	4298      	cmp	r0, r3
     ee2:	d8fb      	bhi.n	edc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     ee4:	0212      	lsls	r2, r2, #8
     ee6:	4332      	orrs	r2, r6
     ee8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     eea:	2380      	movs	r3, #128	; 0x80
     eec:	035b      	lsls	r3, r3, #13
     eee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     ef0:	7a0b      	ldrb	r3, [r1, #8]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d002      	beq.n	efc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     ef6:	2380      	movs	r3, #128	; 0x80
     ef8:	039b      	lsls	r3, r3, #14
     efa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     efc:	4a13      	ldr	r2, [pc, #76]	; (f4c <system_gclk_gen_set_config+0xa8>)
     efe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f00:	b25b      	sxtb	r3, r3
     f02:	2b00      	cmp	r3, #0
     f04:	dbfb      	blt.n	efe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     f06:	4b12      	ldr	r3, [pc, #72]	; (f50 <system_gclk_gen_set_config+0xac>)
     f08:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f0a:	4b12      	ldr	r3, [pc, #72]	; (f54 <system_gclk_gen_set_config+0xb0>)
     f0c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f0e:	4a0f      	ldr	r2, [pc, #60]	; (f4c <system_gclk_gen_set_config+0xa8>)
     f10:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f12:	b25b      	sxtb	r3, r3
     f14:	2b00      	cmp	r3, #0
     f16:	dbfb      	blt.n	f10 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f18:	4b0c      	ldr	r3, [pc, #48]	; (f4c <system_gclk_gen_set_config+0xa8>)
     f1a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f1c:	001a      	movs	r2, r3
     f1e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     f20:	b25b      	sxtb	r3, r3
     f22:	2b00      	cmp	r3, #0
     f24:	dbfb      	blt.n	f1e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f26:	4a09      	ldr	r2, [pc, #36]	; (f4c <system_gclk_gen_set_config+0xa8>)
     f28:	6853      	ldr	r3, [r2, #4]
     f2a:	2180      	movs	r1, #128	; 0x80
     f2c:	0249      	lsls	r1, r1, #9
     f2e:	400b      	ands	r3, r1
     f30:	431d      	orrs	r5, r3
     f32:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     f34:	4b08      	ldr	r3, [pc, #32]	; (f58 <system_gclk_gen_set_config+0xb4>)
     f36:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f38:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f3a:	2200      	movs	r2, #0
     f3c:	e7d2      	b.n	ee4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     f3e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     f40:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f42:	2380      	movs	r3, #128	; 0x80
     f44:	029b      	lsls	r3, r3, #10
     f46:	431d      	orrs	r5, r3
     f48:	e7d2      	b.n	ef0 <system_gclk_gen_set_config+0x4c>
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	40000c00 	.word	0x40000c00
     f50:	00000119 	.word	0x00000119
     f54:	40000c08 	.word	0x40000c08
     f58:	00000159 	.word	0x00000159

00000f5c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f5c:	b510      	push	{r4, lr}
     f5e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f60:	4a0b      	ldr	r2, [pc, #44]	; (f90 <system_gclk_gen_enable+0x34>)
     f62:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f64:	b25b      	sxtb	r3, r3
     f66:	2b00      	cmp	r3, #0
     f68:	dbfb      	blt.n	f62 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     f6a:	4b0a      	ldr	r3, [pc, #40]	; (f94 <system_gclk_gen_enable+0x38>)
     f6c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f6e:	4b0a      	ldr	r3, [pc, #40]	; (f98 <system_gclk_gen_enable+0x3c>)
     f70:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f72:	4a07      	ldr	r2, [pc, #28]	; (f90 <system_gclk_gen_enable+0x34>)
     f74:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f76:	b25b      	sxtb	r3, r3
     f78:	2b00      	cmp	r3, #0
     f7a:	dbfb      	blt.n	f74 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f7c:	4a04      	ldr	r2, [pc, #16]	; (f90 <system_gclk_gen_enable+0x34>)
     f7e:	6851      	ldr	r1, [r2, #4]
     f80:	2380      	movs	r3, #128	; 0x80
     f82:	025b      	lsls	r3, r3, #9
     f84:	430b      	orrs	r3, r1
     f86:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     f88:	4b04      	ldr	r3, [pc, #16]	; (f9c <system_gclk_gen_enable+0x40>)
     f8a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f8c:	bd10      	pop	{r4, pc}
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	40000c00 	.word	0x40000c00
     f94:	00000119 	.word	0x00000119
     f98:	40000c04 	.word	0x40000c04
     f9c:	00000159 	.word	0x00000159

00000fa0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fa0:	b570      	push	{r4, r5, r6, lr}
     fa2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fa4:	4a1a      	ldr	r2, [pc, #104]	; (1010 <system_gclk_gen_get_hz+0x70>)
     fa6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fa8:	b25b      	sxtb	r3, r3
     faa:	2b00      	cmp	r3, #0
     fac:	dbfb      	blt.n	fa6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     fae:	4b19      	ldr	r3, [pc, #100]	; (1014 <system_gclk_gen_get_hz+0x74>)
     fb0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fb2:	4b19      	ldr	r3, [pc, #100]	; (1018 <system_gclk_gen_get_hz+0x78>)
     fb4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fb6:	4a16      	ldr	r2, [pc, #88]	; (1010 <system_gclk_gen_get_hz+0x70>)
     fb8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fba:	b25b      	sxtb	r3, r3
     fbc:	2b00      	cmp	r3, #0
     fbe:	dbfb      	blt.n	fb8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     fc0:	4e13      	ldr	r6, [pc, #76]	; (1010 <system_gclk_gen_get_hz+0x70>)
     fc2:	6870      	ldr	r0, [r6, #4]
     fc4:	04c0      	lsls	r0, r0, #19
     fc6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     fc8:	4b14      	ldr	r3, [pc, #80]	; (101c <system_gclk_gen_get_hz+0x7c>)
     fca:	4798      	blx	r3
     fcc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <system_gclk_gen_get_hz+0x78>)
     fd0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     fd2:	6876      	ldr	r6, [r6, #4]
     fd4:	02f6      	lsls	r6, r6, #11
     fd6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fd8:	4b11      	ldr	r3, [pc, #68]	; (1020 <system_gclk_gen_get_hz+0x80>)
     fda:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fdc:	4a0c      	ldr	r2, [pc, #48]	; (1010 <system_gclk_gen_get_hz+0x70>)
     fde:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fe0:	b25b      	sxtb	r3, r3
     fe2:	2b00      	cmp	r3, #0
     fe4:	dbfb      	blt.n	fde <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     fe6:	4b0a      	ldr	r3, [pc, #40]	; (1010 <system_gclk_gen_get_hz+0x70>)
     fe8:	689c      	ldr	r4, [r3, #8]
     fea:	0224      	lsls	r4, r4, #8
     fec:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     fee:	4b0d      	ldr	r3, [pc, #52]	; (1024 <system_gclk_gen_get_hz+0x84>)
     ff0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     ff2:	2e00      	cmp	r6, #0
     ff4:	d107      	bne.n	1006 <system_gclk_gen_get_hz+0x66>
     ff6:	2c01      	cmp	r4, #1
     ff8:	d907      	bls.n	100a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     ffa:	0021      	movs	r1, r4
     ffc:	0028      	movs	r0, r5
     ffe:	4b0a      	ldr	r3, [pc, #40]	; (1028 <system_gclk_gen_get_hz+0x88>)
    1000:	4798      	blx	r3
    1002:	0005      	movs	r5, r0
    1004:	e001      	b.n	100a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1006:	3401      	adds	r4, #1
    1008:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    100a:	0028      	movs	r0, r5
    100c:	bd70      	pop	{r4, r5, r6, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	40000c00 	.word	0x40000c00
    1014:	00000119 	.word	0x00000119
    1018:	40000c04 	.word	0x40000c04
    101c:	00000c75 	.word	0x00000c75
    1020:	40000c08 	.word	0x40000c08
    1024:	00000159 	.word	0x00000159
    1028:	000015cd 	.word	0x000015cd

0000102c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    102c:	b510      	push	{r4, lr}
    102e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <system_gclk_chan_enable+0x20>)
    1032:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1034:	4b06      	ldr	r3, [pc, #24]	; (1050 <system_gclk_chan_enable+0x24>)
    1036:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1038:	4a06      	ldr	r2, [pc, #24]	; (1054 <system_gclk_chan_enable+0x28>)
    103a:	8853      	ldrh	r3, [r2, #2]
    103c:	2180      	movs	r1, #128	; 0x80
    103e:	01c9      	lsls	r1, r1, #7
    1040:	430b      	orrs	r3, r1
    1042:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1044:	4b04      	ldr	r3, [pc, #16]	; (1058 <system_gclk_chan_enable+0x2c>)
    1046:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1048:	bd10      	pop	{r4, pc}
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	00000119 	.word	0x00000119
    1050:	40000c02 	.word	0x40000c02
    1054:	40000c00 	.word	0x40000c00
    1058:	00000159 	.word	0x00000159

0000105c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    105c:	b510      	push	{r4, lr}
    105e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1060:	4b0f      	ldr	r3, [pc, #60]	; (10a0 <system_gclk_chan_disable+0x44>)
    1062:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1064:	4b0f      	ldr	r3, [pc, #60]	; (10a4 <system_gclk_chan_disable+0x48>)
    1066:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1068:	4a0f      	ldr	r2, [pc, #60]	; (10a8 <system_gclk_chan_disable+0x4c>)
    106a:	8853      	ldrh	r3, [r2, #2]
    106c:	051b      	lsls	r3, r3, #20
    106e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1070:	8853      	ldrh	r3, [r2, #2]
    1072:	490e      	ldr	r1, [pc, #56]	; (10ac <system_gclk_chan_disable+0x50>)
    1074:	400b      	ands	r3, r1
    1076:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1078:	8853      	ldrh	r3, [r2, #2]
    107a:	490d      	ldr	r1, [pc, #52]	; (10b0 <system_gclk_chan_disable+0x54>)
    107c:	400b      	ands	r3, r1
    107e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1080:	0011      	movs	r1, r2
    1082:	2280      	movs	r2, #128	; 0x80
    1084:	01d2      	lsls	r2, r2, #7
    1086:	884b      	ldrh	r3, [r1, #2]
    1088:	4213      	tst	r3, r2
    108a:	d1fc      	bne.n	1086 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    108c:	4906      	ldr	r1, [pc, #24]	; (10a8 <system_gclk_chan_disable+0x4c>)
    108e:	884a      	ldrh	r2, [r1, #2]
    1090:	0203      	lsls	r3, r0, #8
    1092:	4806      	ldr	r0, [pc, #24]	; (10ac <system_gclk_chan_disable+0x50>)
    1094:	4002      	ands	r2, r0
    1096:	4313      	orrs	r3, r2
    1098:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    109a:	4b06      	ldr	r3, [pc, #24]	; (10b4 <system_gclk_chan_disable+0x58>)
    109c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    109e:	bd10      	pop	{r4, pc}
    10a0:	00000119 	.word	0x00000119
    10a4:	40000c02 	.word	0x40000c02
    10a8:	40000c00 	.word	0x40000c00
    10ac:	fffff0ff 	.word	0xfffff0ff
    10b0:	ffffbfff 	.word	0xffffbfff
    10b4:	00000159 	.word	0x00000159

000010b8 <system_gclk_chan_set_config>:
{
    10b8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    10ba:	780c      	ldrb	r4, [r1, #0]
    10bc:	0224      	lsls	r4, r4, #8
    10be:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    10c0:	4b02      	ldr	r3, [pc, #8]	; (10cc <system_gclk_chan_set_config+0x14>)
    10c2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    10c4:	b2a4      	uxth	r4, r4
    10c6:	4b02      	ldr	r3, [pc, #8]	; (10d0 <system_gclk_chan_set_config+0x18>)
    10c8:	805c      	strh	r4, [r3, #2]
}
    10ca:	bd10      	pop	{r4, pc}
    10cc:	0000105d 	.word	0x0000105d
    10d0:	40000c00 	.word	0x40000c00

000010d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    10d4:	b510      	push	{r4, lr}
    10d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10d8:	4b06      	ldr	r3, [pc, #24]	; (10f4 <system_gclk_chan_get_hz+0x20>)
    10da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10dc:	4b06      	ldr	r3, [pc, #24]	; (10f8 <system_gclk_chan_get_hz+0x24>)
    10de:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    10e0:	4b06      	ldr	r3, [pc, #24]	; (10fc <system_gclk_chan_get_hz+0x28>)
    10e2:	885c      	ldrh	r4, [r3, #2]
    10e4:	0524      	lsls	r4, r4, #20
    10e6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    10e8:	4b05      	ldr	r3, [pc, #20]	; (1100 <system_gclk_chan_get_hz+0x2c>)
    10ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    10ec:	0020      	movs	r0, r4
    10ee:	4b05      	ldr	r3, [pc, #20]	; (1104 <system_gclk_chan_get_hz+0x30>)
    10f0:	4798      	blx	r3
}
    10f2:	bd10      	pop	{r4, pc}
    10f4:	00000119 	.word	0x00000119
    10f8:	40000c02 	.word	0x40000c02
    10fc:	40000c00 	.word	0x40000c00
    1100:	00000159 	.word	0x00000159
    1104:	00000fa1 	.word	0x00000fa1

00001108 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1108:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    110a:	78d3      	ldrb	r3, [r2, #3]
    110c:	2b00      	cmp	r3, #0
    110e:	d135      	bne.n	117c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1110:	7813      	ldrb	r3, [r2, #0]
    1112:	2b80      	cmp	r3, #128	; 0x80
    1114:	d029      	beq.n	116a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1116:	061b      	lsls	r3, r3, #24
    1118:	2480      	movs	r4, #128	; 0x80
    111a:	0264      	lsls	r4, r4, #9
    111c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    111e:	7854      	ldrb	r4, [r2, #1]
    1120:	2502      	movs	r5, #2
    1122:	43ac      	bics	r4, r5
    1124:	d106      	bne.n	1134 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1126:	7894      	ldrb	r4, [r2, #2]
    1128:	2c00      	cmp	r4, #0
    112a:	d120      	bne.n	116e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    112c:	2480      	movs	r4, #128	; 0x80
    112e:	02a4      	lsls	r4, r4, #10
    1130:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1132:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1134:	7854      	ldrb	r4, [r2, #1]
    1136:	3c01      	subs	r4, #1
    1138:	2c01      	cmp	r4, #1
    113a:	d91c      	bls.n	1176 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    113c:	040d      	lsls	r5, r1, #16
    113e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1140:	24a0      	movs	r4, #160	; 0xa0
    1142:	05e4      	lsls	r4, r4, #23
    1144:	432c      	orrs	r4, r5
    1146:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1148:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    114a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    114c:	24d0      	movs	r4, #208	; 0xd0
    114e:	0624      	lsls	r4, r4, #24
    1150:	432c      	orrs	r4, r5
    1152:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1154:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1156:	78d4      	ldrb	r4, [r2, #3]
    1158:	2c00      	cmp	r4, #0
    115a:	d122      	bne.n	11a2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    115c:	035b      	lsls	r3, r3, #13
    115e:	d51c      	bpl.n	119a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1160:	7893      	ldrb	r3, [r2, #2]
    1162:	2b01      	cmp	r3, #1
    1164:	d01e      	beq.n	11a4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1166:	6141      	str	r1, [r0, #20]
    1168:	e017      	b.n	119a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    116a:	2300      	movs	r3, #0
    116c:	e7d7      	b.n	111e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    116e:	24c0      	movs	r4, #192	; 0xc0
    1170:	02e4      	lsls	r4, r4, #11
    1172:	4323      	orrs	r3, r4
    1174:	e7dd      	b.n	1132 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1176:	4c0d      	ldr	r4, [pc, #52]	; (11ac <_system_pinmux_config+0xa4>)
    1178:	4023      	ands	r3, r4
    117a:	e7df      	b.n	113c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    117c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    117e:	040c      	lsls	r4, r1, #16
    1180:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1182:	23a0      	movs	r3, #160	; 0xa0
    1184:	05db      	lsls	r3, r3, #23
    1186:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1188:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    118a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    118c:	23d0      	movs	r3, #208	; 0xd0
    118e:	061b      	lsls	r3, r3, #24
    1190:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1192:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1194:	78d3      	ldrb	r3, [r2, #3]
    1196:	2b00      	cmp	r3, #0
    1198:	d103      	bne.n	11a2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    119a:	7853      	ldrb	r3, [r2, #1]
    119c:	3b01      	subs	r3, #1
    119e:	2b01      	cmp	r3, #1
    11a0:	d902      	bls.n	11a8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    11a2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    11a4:	6181      	str	r1, [r0, #24]
    11a6:	e7f8      	b.n	119a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    11a8:	6081      	str	r1, [r0, #8]
}
    11aa:	e7fa      	b.n	11a2 <_system_pinmux_config+0x9a>
    11ac:	fffbffff 	.word	0xfffbffff

000011b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    11b0:	b510      	push	{r4, lr}
    11b2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11b4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11b8:	2900      	cmp	r1, #0
    11ba:	d104      	bne.n	11c6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    11bc:	0943      	lsrs	r3, r0, #5
    11be:	01db      	lsls	r3, r3, #7
    11c0:	4905      	ldr	r1, [pc, #20]	; (11d8 <system_pinmux_pin_set_config+0x28>)
    11c2:	468c      	mov	ip, r1
    11c4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    11c6:	241f      	movs	r4, #31
    11c8:	4020      	ands	r0, r4
    11ca:	2101      	movs	r1, #1
    11cc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    11ce:	0018      	movs	r0, r3
    11d0:	4b02      	ldr	r3, [pc, #8]	; (11dc <system_pinmux_pin_set_config+0x2c>)
    11d2:	4798      	blx	r3
}
    11d4:	bd10      	pop	{r4, pc}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	41004400 	.word	0x41004400
    11dc:	00001109 	.word	0x00001109

000011e0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    11e0:	4770      	bx	lr
	...

000011e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    11e4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    11e6:	4b05      	ldr	r3, [pc, #20]	; (11fc <system_init+0x18>)
    11e8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    11ea:	4b05      	ldr	r3, [pc, #20]	; (1200 <system_init+0x1c>)
    11ec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    11ee:	4b05      	ldr	r3, [pc, #20]	; (1204 <system_init+0x20>)
    11f0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    11f2:	4b05      	ldr	r3, [pc, #20]	; (1208 <system_init+0x24>)
    11f4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    11f6:	4b05      	ldr	r3, [pc, #20]	; (120c <system_init+0x28>)
    11f8:	4798      	blx	r3
}
    11fa:	bd10      	pop	{r4, pc}
    11fc:	00000de9 	.word	0x00000de9
    1200:	00000115 	.word	0x00000115
    1204:	000011e1 	.word	0x000011e1
    1208:	000011e1 	.word	0x000011e1
    120c:	000011e1 	.word	0x000011e1

00001210 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1210:	e7fe      	b.n	1210 <Dummy_Handler>
	...

00001214 <Reset_Handler>:
{
    1214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1216:	4a2a      	ldr	r2, [pc, #168]	; (12c0 <Reset_Handler+0xac>)
    1218:	4b2a      	ldr	r3, [pc, #168]	; (12c4 <Reset_Handler+0xb0>)
    121a:	429a      	cmp	r2, r3
    121c:	d011      	beq.n	1242 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    121e:	001a      	movs	r2, r3
    1220:	4b29      	ldr	r3, [pc, #164]	; (12c8 <Reset_Handler+0xb4>)
    1222:	429a      	cmp	r2, r3
    1224:	d20d      	bcs.n	1242 <Reset_Handler+0x2e>
    1226:	4a29      	ldr	r2, [pc, #164]	; (12cc <Reset_Handler+0xb8>)
    1228:	3303      	adds	r3, #3
    122a:	1a9b      	subs	r3, r3, r2
    122c:	089b      	lsrs	r3, r3, #2
    122e:	3301      	adds	r3, #1
    1230:	009b      	lsls	r3, r3, #2
    1232:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1234:	4823      	ldr	r0, [pc, #140]	; (12c4 <Reset_Handler+0xb0>)
    1236:	4922      	ldr	r1, [pc, #136]	; (12c0 <Reset_Handler+0xac>)
    1238:	588c      	ldr	r4, [r1, r2]
    123a:	5084      	str	r4, [r0, r2]
    123c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    123e:	429a      	cmp	r2, r3
    1240:	d1fa      	bne.n	1238 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1242:	4a23      	ldr	r2, [pc, #140]	; (12d0 <Reset_Handler+0xbc>)
    1244:	4b23      	ldr	r3, [pc, #140]	; (12d4 <Reset_Handler+0xc0>)
    1246:	429a      	cmp	r2, r3
    1248:	d20a      	bcs.n	1260 <Reset_Handler+0x4c>
    124a:	43d3      	mvns	r3, r2
    124c:	4921      	ldr	r1, [pc, #132]	; (12d4 <Reset_Handler+0xc0>)
    124e:	185b      	adds	r3, r3, r1
    1250:	2103      	movs	r1, #3
    1252:	438b      	bics	r3, r1
    1254:	3304      	adds	r3, #4
    1256:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1258:	2100      	movs	r1, #0
    125a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    125c:	4293      	cmp	r3, r2
    125e:	d1fc      	bne.n	125a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1260:	4a1d      	ldr	r2, [pc, #116]	; (12d8 <Reset_Handler+0xc4>)
    1262:	21ff      	movs	r1, #255	; 0xff
    1264:	4b1d      	ldr	r3, [pc, #116]	; (12dc <Reset_Handler+0xc8>)
    1266:	438b      	bics	r3, r1
    1268:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    126a:	39fd      	subs	r1, #253	; 0xfd
    126c:	2390      	movs	r3, #144	; 0x90
    126e:	005b      	lsls	r3, r3, #1
    1270:	4a1b      	ldr	r2, [pc, #108]	; (12e0 <Reset_Handler+0xcc>)
    1272:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1274:	4a1b      	ldr	r2, [pc, #108]	; (12e4 <Reset_Handler+0xd0>)
    1276:	78d3      	ldrb	r3, [r2, #3]
    1278:	2503      	movs	r5, #3
    127a:	43ab      	bics	r3, r5
    127c:	2402      	movs	r4, #2
    127e:	4323      	orrs	r3, r4
    1280:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1282:	78d3      	ldrb	r3, [r2, #3]
    1284:	270c      	movs	r7, #12
    1286:	43bb      	bics	r3, r7
    1288:	2608      	movs	r6, #8
    128a:	4333      	orrs	r3, r6
    128c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    128e:	4b16      	ldr	r3, [pc, #88]	; (12e8 <Reset_Handler+0xd4>)
    1290:	7b98      	ldrb	r0, [r3, #14]
    1292:	2230      	movs	r2, #48	; 0x30
    1294:	4390      	bics	r0, r2
    1296:	2220      	movs	r2, #32
    1298:	4310      	orrs	r0, r2
    129a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    129c:	7b99      	ldrb	r1, [r3, #14]
    129e:	43b9      	bics	r1, r7
    12a0:	4331      	orrs	r1, r6
    12a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    12a4:	7b9a      	ldrb	r2, [r3, #14]
    12a6:	43aa      	bics	r2, r5
    12a8:	4322      	orrs	r2, r4
    12aa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    12ac:	4a0f      	ldr	r2, [pc, #60]	; (12ec <Reset_Handler+0xd8>)
    12ae:	6853      	ldr	r3, [r2, #4]
    12b0:	2180      	movs	r1, #128	; 0x80
    12b2:	430b      	orrs	r3, r1
    12b4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    12b6:	4b0e      	ldr	r3, [pc, #56]	; (12f0 <Reset_Handler+0xdc>)
    12b8:	4798      	blx	r3
        main();
    12ba:	4b0e      	ldr	r3, [pc, #56]	; (12f4 <Reset_Handler+0xe0>)
    12bc:	4798      	blx	r3
    12be:	e7fe      	b.n	12be <Reset_Handler+0xaa>
    12c0:	00003198 	.word	0x00003198
    12c4:	20000000 	.word	0x20000000
    12c8:	200001d4 	.word	0x200001d4
    12cc:	20000004 	.word	0x20000004
    12d0:	200001d4 	.word	0x200001d4
    12d4:	2000029c 	.word	0x2000029c
    12d8:	e000ed00 	.word	0xe000ed00
    12dc:	00000000 	.word	0x00000000
    12e0:	41007000 	.word	0x41007000
    12e4:	41005000 	.word	0x41005000
    12e8:	41004800 	.word	0x41004800
    12ec:	41004000 	.word	0x41004000
    12f0:	00001739 	.word	0x00001739
    12f4:	00001551 	.word	0x00001551

000012f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    12f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12fa:	46c6      	mov	lr, r8
    12fc:	b500      	push	{lr}
    12fe:	000c      	movs	r4, r1
    1300:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1302:	2800      	cmp	r0, #0
    1304:	d10f      	bne.n	1326 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1306:	2a00      	cmp	r2, #0
    1308:	dd11      	ble.n	132e <_read+0x36>
    130a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    130c:	4e09      	ldr	r6, [pc, #36]	; (1334 <_read+0x3c>)
    130e:	4d0a      	ldr	r5, [pc, #40]	; (1338 <_read+0x40>)
    1310:	6830      	ldr	r0, [r6, #0]
    1312:	0021      	movs	r1, r4
    1314:	682b      	ldr	r3, [r5, #0]
    1316:	4798      	blx	r3
		ptr++;
    1318:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    131a:	42bc      	cmp	r4, r7
    131c:	d1f8      	bne.n	1310 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    131e:	4640      	mov	r0, r8
    1320:	bc04      	pop	{r2}
    1322:	4690      	mov	r8, r2
    1324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1326:	2301      	movs	r3, #1
    1328:	425b      	negs	r3, r3
    132a:	4698      	mov	r8, r3
    132c:	e7f7      	b.n	131e <_read+0x26>
	for (; len > 0; --len) {
    132e:	4680      	mov	r8, r0
    1330:	e7f5      	b.n	131e <_read+0x26>
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	20000258 	.word	0x20000258
    1338:	20000250 	.word	0x20000250

0000133c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    133c:	b5f0      	push	{r4, r5, r6, r7, lr}
    133e:	46c6      	mov	lr, r8
    1340:	b500      	push	{lr}
    1342:	000e      	movs	r6, r1
    1344:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1346:	3801      	subs	r0, #1
    1348:	2802      	cmp	r0, #2
    134a:	d810      	bhi.n	136e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    134c:	2a00      	cmp	r2, #0
    134e:	d011      	beq.n	1374 <_write+0x38>
    1350:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1352:	4b0c      	ldr	r3, [pc, #48]	; (1384 <_write+0x48>)
    1354:	4698      	mov	r8, r3
    1356:	4f0c      	ldr	r7, [pc, #48]	; (1388 <_write+0x4c>)
    1358:	4643      	mov	r3, r8
    135a:	6818      	ldr	r0, [r3, #0]
    135c:	5d31      	ldrb	r1, [r6, r4]
    135e:	683b      	ldr	r3, [r7, #0]
    1360:	4798      	blx	r3
    1362:	2800      	cmp	r0, #0
    1364:	db08      	blt.n	1378 <_write+0x3c>
			return -1;
		}
		++nChars;
    1366:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1368:	42a5      	cmp	r5, r4
    136a:	d1f5      	bne.n	1358 <_write+0x1c>
    136c:	e006      	b.n	137c <_write+0x40>
		return -1;
    136e:	2401      	movs	r4, #1
    1370:	4264      	negs	r4, r4
    1372:	e003      	b.n	137c <_write+0x40>
	for (; len != 0; --len) {
    1374:	0014      	movs	r4, r2
    1376:	e001      	b.n	137c <_write+0x40>
			return -1;
    1378:	2401      	movs	r4, #1
    137a:	4264      	negs	r4, r4
	}
	return nChars;
}
    137c:	0020      	movs	r0, r4
    137e:	bc04      	pop	{r2}
    1380:	4690      	mov	r8, r2
    1382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1384:	20000258 	.word	0x20000258
    1388:	20000254 	.word	0x20000254

0000138c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    138c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    138e:	4a06      	ldr	r2, [pc, #24]	; (13a8 <_sbrk+0x1c>)
    1390:	6812      	ldr	r2, [r2, #0]
    1392:	2a00      	cmp	r2, #0
    1394:	d004      	beq.n	13a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1396:	4a04      	ldr	r2, [pc, #16]	; (13a8 <_sbrk+0x1c>)
    1398:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    139a:	18c3      	adds	r3, r0, r3
    139c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    139e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    13a0:	4902      	ldr	r1, [pc, #8]	; (13ac <_sbrk+0x20>)
    13a2:	4a01      	ldr	r2, [pc, #4]	; (13a8 <_sbrk+0x1c>)
    13a4:	6011      	str	r1, [r2, #0]
    13a6:	e7f6      	b.n	1396 <_sbrk+0xa>
    13a8:	2000022c 	.word	0x2000022c
    13ac:	200022a0 	.word	0x200022a0

000013b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    13b0:	2001      	movs	r0, #1
    13b2:	4240      	negs	r0, r0
    13b4:	4770      	bx	lr

000013b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    13b6:	2380      	movs	r3, #128	; 0x80
    13b8:	019b      	lsls	r3, r3, #6
    13ba:	604b      	str	r3, [r1, #4]

	return 0;
}
    13bc:	2000      	movs	r0, #0
    13be:	4770      	bx	lr

000013c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    13c0:	2001      	movs	r0, #1
    13c2:	4770      	bx	lr

000013c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    13c4:	2000      	movs	r0, #0
    13c6:	4770      	bx	lr

000013c8 <usart_write_callback>:
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
void usart_write_callback(struct usart_module *const usart_module)
{
//	port_pin_toggle_output_level(LED_0_PIN);
}
    13c8:	4770      	bx	lr
	...

000013cc <usart_read_callback>:
{usart_write_buffer_job(&usart_instance,
    13cc:	b510      	push	{r4, lr}
    13ce:	2205      	movs	r2, #5
    13d0:	4902      	ldr	r1, [pc, #8]	; (13dc <usart_read_callback+0x10>)
    13d2:	4803      	ldr	r0, [pc, #12]	; (13e0 <usart_read_callback+0x14>)
    13d4:	4b03      	ldr	r3, [pc, #12]	; (13e4 <usart_read_callback+0x18>)
    13d6:	4798      	blx	r3
}
    13d8:	bd10      	pop	{r4, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	20000290 	.word	0x20000290
    13e0:	2000025c 	.word	0x2000025c
    13e4:	00000ac1 	.word	0x00000ac1

000013e8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    13e8:	b570      	push	{r4, r5, r6, lr}
    13ea:	b082      	sub	sp, #8
    13ec:	0005      	movs	r5, r0
    13ee:	000e      	movs	r6, r1
	uint16_t temp = 0;
    13f0:	2200      	movs	r2, #0
    13f2:	466b      	mov	r3, sp
    13f4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    13f6:	4c06      	ldr	r4, [pc, #24]	; (1410 <usart_serial_getchar+0x28>)
    13f8:	466b      	mov	r3, sp
    13fa:	1d99      	adds	r1, r3, #6
    13fc:	0028      	movs	r0, r5
    13fe:	47a0      	blx	r4
    1400:	2800      	cmp	r0, #0
    1402:	d1f9      	bne.n	13f8 <usart_serial_getchar+0x10>

	*c = temp;
    1404:	466b      	mov	r3, sp
    1406:	3306      	adds	r3, #6
    1408:	881b      	ldrh	r3, [r3, #0]
    140a:	7033      	strb	r3, [r6, #0]
}
    140c:	b002      	add	sp, #8
    140e:	bd70      	pop	{r4, r5, r6, pc}
    1410:	0000093d 	.word	0x0000093d

00001414 <usart_serial_putchar>:
{
    1414:	b570      	push	{r4, r5, r6, lr}
    1416:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1418:	b28c      	uxth	r4, r1
    141a:	4e03      	ldr	r6, [pc, #12]	; (1428 <usart_serial_putchar+0x14>)
    141c:	0021      	movs	r1, r4
    141e:	0028      	movs	r0, r5
    1420:	47b0      	blx	r6
    1422:	2800      	cmp	r0, #0
    1424:	d1fa      	bne.n	141c <usart_serial_putchar+0x8>
}
    1426:	bd70      	pop	{r4, r5, r6, pc}
    1428:	00000911 	.word	0x00000911

0000142c <configure_usart>:
void configure_usart(void)
{
    142c:	b5f0      	push	{r4, r5, r6, r7, lr}
    142e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1430:	2380      	movs	r3, #128	; 0x80
    1432:	05db      	lsls	r3, r3, #23
    1434:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1436:	2300      	movs	r3, #0
    1438:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    143a:	22ff      	movs	r2, #255	; 0xff
    143c:	4669      	mov	r1, sp
    143e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1440:	2200      	movs	r2, #0
    1442:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1444:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1446:	2196      	movs	r1, #150	; 0x96
    1448:	0189      	lsls	r1, r1, #6
    144a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    144c:	2401      	movs	r4, #1
    144e:	2124      	movs	r1, #36	; 0x24
    1450:	4668      	mov	r0, sp
    1452:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1454:	3101      	adds	r1, #1
    1456:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1458:	3101      	adds	r1, #1
    145a:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    145c:	3101      	adds	r1, #1
    145e:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1460:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1462:	3105      	adds	r1, #5
    1464:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1466:	3101      	adds	r1, #1
    1468:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    146a:	930c      	str	r3, [sp, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    146c:	930d      	str	r3, [sp, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    146e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1470:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1472:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1474:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1476:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1478:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    147a:	2313      	movs	r3, #19
    147c:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    147e:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 9600;
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1480:	23c4      	movs	r3, #196	; 0xc4
    1482:	039b      	lsls	r3, r3, #14
    1484:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
    1486:	4b17      	ldr	r3, [pc, #92]	; (14e4 <configure_usart+0xb8>)
    1488:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;
    148a:	4b17      	ldr	r3, [pc, #92]	; (14e8 <configure_usart+0xbc>)
    148c:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    148e:	4d17      	ldr	r5, [pc, #92]	; (14ec <configure_usart+0xc0>)
    1490:	4b17      	ldr	r3, [pc, #92]	; (14f0 <configure_usart+0xc4>)
    1492:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1494:	4a17      	ldr	r2, [pc, #92]	; (14f4 <configure_usart+0xc8>)
    1496:	4b18      	ldr	r3, [pc, #96]	; (14f8 <configure_usart+0xcc>)
    1498:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    149a:	4a18      	ldr	r2, [pc, #96]	; (14fc <configure_usart+0xd0>)
    149c:	4b18      	ldr	r3, [pc, #96]	; (1500 <configure_usart+0xd4>)
    149e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    14a0:	466a      	mov	r2, sp
    14a2:	4918      	ldr	r1, [pc, #96]	; (1504 <configure_usart+0xd8>)
    14a4:	0028      	movs	r0, r5
    14a6:	4b18      	ldr	r3, [pc, #96]	; (1508 <configure_usart+0xdc>)
    14a8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    14aa:	4f18      	ldr	r7, [pc, #96]	; (150c <configure_usart+0xe0>)
    14ac:	683b      	ldr	r3, [r7, #0]
    14ae:	6898      	ldr	r0, [r3, #8]
    14b0:	2100      	movs	r1, #0
    14b2:	4e17      	ldr	r6, [pc, #92]	; (1510 <configure_usart+0xe4>)
    14b4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    14b6:	683b      	ldr	r3, [r7, #0]
    14b8:	6858      	ldr	r0, [r3, #4]
    14ba:	2100      	movs	r1, #0
    14bc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14be:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14c0:	0030      	movs	r0, r6
    14c2:	4b14      	ldr	r3, [pc, #80]	; (1514 <configure_usart+0xe8>)
    14c4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14c6:	231f      	movs	r3, #31
    14c8:	4018      	ands	r0, r3
    14ca:	4084      	lsls	r4, r0
    14cc:	4b12      	ldr	r3, [pc, #72]	; (1518 <configure_usart+0xec>)
    14ce:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14d0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14d4:	2b00      	cmp	r3, #0
    14d6:	d1fc      	bne.n	14d2 <configure_usart+0xa6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    14d8:	6833      	ldr	r3, [r6, #0]
    14da:	2202      	movs	r2, #2
    14dc:	4313      	orrs	r3, r2
    14de:	6033      	str	r3, [r6, #0]
//	while (stdio_serial_init(&usart_instance, SERCOM3, &config_usart) != STATUS_OK){}
	stdio_serial_init(&usart_instance, SERCOM3, &config_usart);
	usart_enable(&usart_instance);
}
    14e0:	b011      	add	sp, #68	; 0x44
    14e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14e4:	00140003 	.word	0x00140003
    14e8:	00150003 	.word	0x00150003
    14ec:	2000025c 	.word	0x2000025c
    14f0:	20000258 	.word	0x20000258
    14f4:	00001415 	.word	0x00001415
    14f8:	20000254 	.word	0x20000254
    14fc:	000013e9 	.word	0x000013e9
    1500:	20000250 	.word	0x20000250
    1504:	42001400 	.word	0x42001400
    1508:	000005cd 	.word	0x000005cd
    150c:	20000004 	.word	0x20000004
    1510:	00001899 	.word	0x00001899
    1514:	0000053d 	.word	0x0000053d
    1518:	e000e100 	.word	0xe000e100

0000151c <configure_usart_callbacks>:
void configure_usart_callbacks(void)
{
    151c:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    151e:	4c08      	ldr	r4, [pc, #32]	; (1540 <configure_usart_callbacks+0x24>)
    1520:	2200      	movs	r2, #0
    1522:	4908      	ldr	r1, [pc, #32]	; (1544 <configure_usart_callbacks+0x28>)
    1524:	0020      	movs	r0, r4
    1526:	4d08      	ldr	r5, [pc, #32]	; (1548 <configure_usart_callbacks+0x2c>)
    1528:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    152a:	2201      	movs	r2, #1
    152c:	4907      	ldr	r1, [pc, #28]	; (154c <configure_usart_callbacks+0x30>)
    152e:	0020      	movs	r0, r4
    1530:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1532:	2231      	movs	r2, #49	; 0x31
    1534:	5ca3      	ldrb	r3, [r4, r2]
    1536:	2103      	movs	r1, #3
    1538:	430b      	orrs	r3, r1
    153a:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance,
	USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    153c:	bd70      	pop	{r4, r5, r6, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	2000025c 	.word	0x2000025c
    1544:	000013c9 	.word	0x000013c9
    1548:	00000aa9 	.word	0x00000aa9
    154c:	000013cd 	.word	0x000013cd

00001550 <main>:

int main (void)
{
    1550:	b570      	push	{r4, r5, r6, lr}
    1552:	b086      	sub	sp, #24
	system_init();
    1554:	4b12      	ldr	r3, [pc, #72]	; (15a0 <main+0x50>)
    1556:	4798      	blx	r3
	
	configure_usart();
    1558:	4b12      	ldr	r3, [pc, #72]	; (15a4 <main+0x54>)
    155a:	4798      	blx	r3
	configure_usart_callbacks();
    155c:	4b12      	ldr	r3, [pc, #72]	; (15a8 <main+0x58>)
    155e:	4798      	blx	r3
	cpu_irq_enable();
    1560:	2201      	movs	r2, #1
    1562:	4b12      	ldr	r3, [pc, #72]	; (15ac <main+0x5c>)
    1564:	701a      	strb	r2, [r3, #0]
    1566:	f3bf 8f5f 	dmb	sy
    156a:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	uint8_t string[] = "Hello World!\r\n";
    156c:	a902      	add	r1, sp, #8
    156e:	4b10      	ldr	r3, [pc, #64]	; (15b0 <main+0x60>)
    1570:	000a      	movs	r2, r1
    1572:	cb31      	ldmia	r3!, {r0, r4, r5}
    1574:	c231      	stmia	r2!, {r0, r4, r5}
    1576:	8818      	ldrh	r0, [r3, #0]
    1578:	8010      	strh	r0, [r2, #0]
    157a:	789b      	ldrb	r3, [r3, #2]
    157c:	7093      	strb	r3, [r2, #2]
	usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    157e:	220f      	movs	r2, #15
    1580:	480c      	ldr	r0, [pc, #48]	; (15b4 <main+0x64>)
    1582:	4b0d      	ldr	r3, [pc, #52]	; (15b8 <main+0x68>)
    1584:	4798      	blx	r3
	printf("Hi from printf!\n");
    1586:	480d      	ldr	r0, [pc, #52]	; (15bc <main+0x6c>)
    1588:	4b0d      	ldr	r3, [pc, #52]	; (15c0 <main+0x70>)
    158a:	4798      	blx	r3

	char str1[1];

	while(true)
	{
		scanf("%s", str1);
    158c:	4e0d      	ldr	r6, [pc, #52]	; (15c4 <main+0x74>)
    158e:	4d0e      	ldr	r5, [pc, #56]	; (15c8 <main+0x78>)
		printf("%s\n", str1);
    1590:	4c0b      	ldr	r4, [pc, #44]	; (15c0 <main+0x70>)
		scanf("%s", str1);
    1592:	a901      	add	r1, sp, #4
    1594:	0030      	movs	r0, r6
    1596:	47a8      	blx	r5
		printf("%s\n", str1);
    1598:	a801      	add	r0, sp, #4
    159a:	47a0      	blx	r4
    159c:	e7f9      	b.n	1592 <main+0x42>
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	000011e5 	.word	0x000011e5
    15a4:	0000142d 	.word	0x0000142d
    15a8:	0000151d 	.word	0x0000151d
    15ac:	20000000 	.word	0x20000000
    15b0:	00002fcc 	.word	0x00002fcc
    15b4:	2000025c 	.word	0x2000025c
    15b8:	000009ad 	.word	0x000009ad
    15bc:	00002fb8 	.word	0x00002fb8
    15c0:	00001851 	.word	0x00001851
    15c4:	00002fc8 	.word	0x00002fc8
    15c8:	00001865 	.word	0x00001865

000015cc <__udivsi3>:
    15cc:	2200      	movs	r2, #0
    15ce:	0843      	lsrs	r3, r0, #1
    15d0:	428b      	cmp	r3, r1
    15d2:	d374      	bcc.n	16be <__udivsi3+0xf2>
    15d4:	0903      	lsrs	r3, r0, #4
    15d6:	428b      	cmp	r3, r1
    15d8:	d35f      	bcc.n	169a <__udivsi3+0xce>
    15da:	0a03      	lsrs	r3, r0, #8
    15dc:	428b      	cmp	r3, r1
    15de:	d344      	bcc.n	166a <__udivsi3+0x9e>
    15e0:	0b03      	lsrs	r3, r0, #12
    15e2:	428b      	cmp	r3, r1
    15e4:	d328      	bcc.n	1638 <__udivsi3+0x6c>
    15e6:	0c03      	lsrs	r3, r0, #16
    15e8:	428b      	cmp	r3, r1
    15ea:	d30d      	bcc.n	1608 <__udivsi3+0x3c>
    15ec:	22ff      	movs	r2, #255	; 0xff
    15ee:	0209      	lsls	r1, r1, #8
    15f0:	ba12      	rev	r2, r2
    15f2:	0c03      	lsrs	r3, r0, #16
    15f4:	428b      	cmp	r3, r1
    15f6:	d302      	bcc.n	15fe <__udivsi3+0x32>
    15f8:	1212      	asrs	r2, r2, #8
    15fa:	0209      	lsls	r1, r1, #8
    15fc:	d065      	beq.n	16ca <__udivsi3+0xfe>
    15fe:	0b03      	lsrs	r3, r0, #12
    1600:	428b      	cmp	r3, r1
    1602:	d319      	bcc.n	1638 <__udivsi3+0x6c>
    1604:	e000      	b.n	1608 <__udivsi3+0x3c>
    1606:	0a09      	lsrs	r1, r1, #8
    1608:	0bc3      	lsrs	r3, r0, #15
    160a:	428b      	cmp	r3, r1
    160c:	d301      	bcc.n	1612 <__udivsi3+0x46>
    160e:	03cb      	lsls	r3, r1, #15
    1610:	1ac0      	subs	r0, r0, r3
    1612:	4152      	adcs	r2, r2
    1614:	0b83      	lsrs	r3, r0, #14
    1616:	428b      	cmp	r3, r1
    1618:	d301      	bcc.n	161e <__udivsi3+0x52>
    161a:	038b      	lsls	r3, r1, #14
    161c:	1ac0      	subs	r0, r0, r3
    161e:	4152      	adcs	r2, r2
    1620:	0b43      	lsrs	r3, r0, #13
    1622:	428b      	cmp	r3, r1
    1624:	d301      	bcc.n	162a <__udivsi3+0x5e>
    1626:	034b      	lsls	r3, r1, #13
    1628:	1ac0      	subs	r0, r0, r3
    162a:	4152      	adcs	r2, r2
    162c:	0b03      	lsrs	r3, r0, #12
    162e:	428b      	cmp	r3, r1
    1630:	d301      	bcc.n	1636 <__udivsi3+0x6a>
    1632:	030b      	lsls	r3, r1, #12
    1634:	1ac0      	subs	r0, r0, r3
    1636:	4152      	adcs	r2, r2
    1638:	0ac3      	lsrs	r3, r0, #11
    163a:	428b      	cmp	r3, r1
    163c:	d301      	bcc.n	1642 <__udivsi3+0x76>
    163e:	02cb      	lsls	r3, r1, #11
    1640:	1ac0      	subs	r0, r0, r3
    1642:	4152      	adcs	r2, r2
    1644:	0a83      	lsrs	r3, r0, #10
    1646:	428b      	cmp	r3, r1
    1648:	d301      	bcc.n	164e <__udivsi3+0x82>
    164a:	028b      	lsls	r3, r1, #10
    164c:	1ac0      	subs	r0, r0, r3
    164e:	4152      	adcs	r2, r2
    1650:	0a43      	lsrs	r3, r0, #9
    1652:	428b      	cmp	r3, r1
    1654:	d301      	bcc.n	165a <__udivsi3+0x8e>
    1656:	024b      	lsls	r3, r1, #9
    1658:	1ac0      	subs	r0, r0, r3
    165a:	4152      	adcs	r2, r2
    165c:	0a03      	lsrs	r3, r0, #8
    165e:	428b      	cmp	r3, r1
    1660:	d301      	bcc.n	1666 <__udivsi3+0x9a>
    1662:	020b      	lsls	r3, r1, #8
    1664:	1ac0      	subs	r0, r0, r3
    1666:	4152      	adcs	r2, r2
    1668:	d2cd      	bcs.n	1606 <__udivsi3+0x3a>
    166a:	09c3      	lsrs	r3, r0, #7
    166c:	428b      	cmp	r3, r1
    166e:	d301      	bcc.n	1674 <__udivsi3+0xa8>
    1670:	01cb      	lsls	r3, r1, #7
    1672:	1ac0      	subs	r0, r0, r3
    1674:	4152      	adcs	r2, r2
    1676:	0983      	lsrs	r3, r0, #6
    1678:	428b      	cmp	r3, r1
    167a:	d301      	bcc.n	1680 <__udivsi3+0xb4>
    167c:	018b      	lsls	r3, r1, #6
    167e:	1ac0      	subs	r0, r0, r3
    1680:	4152      	adcs	r2, r2
    1682:	0943      	lsrs	r3, r0, #5
    1684:	428b      	cmp	r3, r1
    1686:	d301      	bcc.n	168c <__udivsi3+0xc0>
    1688:	014b      	lsls	r3, r1, #5
    168a:	1ac0      	subs	r0, r0, r3
    168c:	4152      	adcs	r2, r2
    168e:	0903      	lsrs	r3, r0, #4
    1690:	428b      	cmp	r3, r1
    1692:	d301      	bcc.n	1698 <__udivsi3+0xcc>
    1694:	010b      	lsls	r3, r1, #4
    1696:	1ac0      	subs	r0, r0, r3
    1698:	4152      	adcs	r2, r2
    169a:	08c3      	lsrs	r3, r0, #3
    169c:	428b      	cmp	r3, r1
    169e:	d301      	bcc.n	16a4 <__udivsi3+0xd8>
    16a0:	00cb      	lsls	r3, r1, #3
    16a2:	1ac0      	subs	r0, r0, r3
    16a4:	4152      	adcs	r2, r2
    16a6:	0883      	lsrs	r3, r0, #2
    16a8:	428b      	cmp	r3, r1
    16aa:	d301      	bcc.n	16b0 <__udivsi3+0xe4>
    16ac:	008b      	lsls	r3, r1, #2
    16ae:	1ac0      	subs	r0, r0, r3
    16b0:	4152      	adcs	r2, r2
    16b2:	0843      	lsrs	r3, r0, #1
    16b4:	428b      	cmp	r3, r1
    16b6:	d301      	bcc.n	16bc <__udivsi3+0xf0>
    16b8:	004b      	lsls	r3, r1, #1
    16ba:	1ac0      	subs	r0, r0, r3
    16bc:	4152      	adcs	r2, r2
    16be:	1a41      	subs	r1, r0, r1
    16c0:	d200      	bcs.n	16c4 <__udivsi3+0xf8>
    16c2:	4601      	mov	r1, r0
    16c4:	4152      	adcs	r2, r2
    16c6:	4610      	mov	r0, r2
    16c8:	4770      	bx	lr
    16ca:	e7ff      	b.n	16cc <__udivsi3+0x100>
    16cc:	b501      	push	{r0, lr}
    16ce:	2000      	movs	r0, #0
    16d0:	f000 f806 	bl	16e0 <__aeabi_idiv0>
    16d4:	bd02      	pop	{r1, pc}
    16d6:	46c0      	nop			; (mov r8, r8)

000016d8 <__aeabi_uidivmod>:
    16d8:	2900      	cmp	r1, #0
    16da:	d0f7      	beq.n	16cc <__udivsi3+0x100>
    16dc:	e776      	b.n	15cc <__udivsi3>
    16de:	4770      	bx	lr

000016e0 <__aeabi_idiv0>:
    16e0:	4770      	bx	lr
    16e2:	46c0      	nop			; (mov r8, r8)

000016e4 <__aeabi_lmul>:
    16e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16e6:	46ce      	mov	lr, r9
    16e8:	4647      	mov	r7, r8
    16ea:	0415      	lsls	r5, r2, #16
    16ec:	0c2d      	lsrs	r5, r5, #16
    16ee:	002e      	movs	r6, r5
    16f0:	b580      	push	{r7, lr}
    16f2:	0407      	lsls	r7, r0, #16
    16f4:	0c14      	lsrs	r4, r2, #16
    16f6:	0c3f      	lsrs	r7, r7, #16
    16f8:	4699      	mov	r9, r3
    16fa:	0c03      	lsrs	r3, r0, #16
    16fc:	437e      	muls	r6, r7
    16fe:	435d      	muls	r5, r3
    1700:	4367      	muls	r7, r4
    1702:	4363      	muls	r3, r4
    1704:	197f      	adds	r7, r7, r5
    1706:	0c34      	lsrs	r4, r6, #16
    1708:	19e4      	adds	r4, r4, r7
    170a:	469c      	mov	ip, r3
    170c:	42a5      	cmp	r5, r4
    170e:	d903      	bls.n	1718 <__aeabi_lmul+0x34>
    1710:	2380      	movs	r3, #128	; 0x80
    1712:	025b      	lsls	r3, r3, #9
    1714:	4698      	mov	r8, r3
    1716:	44c4      	add	ip, r8
    1718:	464b      	mov	r3, r9
    171a:	4351      	muls	r1, r2
    171c:	4343      	muls	r3, r0
    171e:	0436      	lsls	r6, r6, #16
    1720:	0c36      	lsrs	r6, r6, #16
    1722:	0c25      	lsrs	r5, r4, #16
    1724:	0424      	lsls	r4, r4, #16
    1726:	4465      	add	r5, ip
    1728:	19a4      	adds	r4, r4, r6
    172a:	1859      	adds	r1, r3, r1
    172c:	1949      	adds	r1, r1, r5
    172e:	0020      	movs	r0, r4
    1730:	bc0c      	pop	{r2, r3}
    1732:	4690      	mov	r8, r2
    1734:	4699      	mov	r9, r3
    1736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001738 <__libc_init_array>:
    1738:	b570      	push	{r4, r5, r6, lr}
    173a:	2600      	movs	r6, #0
    173c:	4d0c      	ldr	r5, [pc, #48]	; (1770 <__libc_init_array+0x38>)
    173e:	4c0d      	ldr	r4, [pc, #52]	; (1774 <__libc_init_array+0x3c>)
    1740:	1b64      	subs	r4, r4, r5
    1742:	10a4      	asrs	r4, r4, #2
    1744:	42a6      	cmp	r6, r4
    1746:	d109      	bne.n	175c <__libc_init_array+0x24>
    1748:	2600      	movs	r6, #0
    174a:	f001 fd15 	bl	3178 <_init>
    174e:	4d0a      	ldr	r5, [pc, #40]	; (1778 <__libc_init_array+0x40>)
    1750:	4c0a      	ldr	r4, [pc, #40]	; (177c <__libc_init_array+0x44>)
    1752:	1b64      	subs	r4, r4, r5
    1754:	10a4      	asrs	r4, r4, #2
    1756:	42a6      	cmp	r6, r4
    1758:	d105      	bne.n	1766 <__libc_init_array+0x2e>
    175a:	bd70      	pop	{r4, r5, r6, pc}
    175c:	00b3      	lsls	r3, r6, #2
    175e:	58eb      	ldr	r3, [r5, r3]
    1760:	4798      	blx	r3
    1762:	3601      	adds	r6, #1
    1764:	e7ee      	b.n	1744 <__libc_init_array+0xc>
    1766:	00b3      	lsls	r3, r6, #2
    1768:	58eb      	ldr	r3, [r5, r3]
    176a:	4798      	blx	r3
    176c:	3601      	adds	r6, #1
    176e:	e7f2      	b.n	1756 <__libc_init_array+0x1e>
    1770:	00003184 	.word	0x00003184
    1774:	00003184 	.word	0x00003184
    1778:	00003184 	.word	0x00003184
    177c:	00003188 	.word	0x00003188

00001780 <memset>:
    1780:	0003      	movs	r3, r0
    1782:	1882      	adds	r2, r0, r2
    1784:	4293      	cmp	r3, r2
    1786:	d100      	bne.n	178a <memset+0xa>
    1788:	4770      	bx	lr
    178a:	7019      	strb	r1, [r3, #0]
    178c:	3301      	adds	r3, #1
    178e:	e7f9      	b.n	1784 <memset+0x4>

00001790 <_puts_r>:
    1790:	b570      	push	{r4, r5, r6, lr}
    1792:	0005      	movs	r5, r0
    1794:	000e      	movs	r6, r1
    1796:	2800      	cmp	r0, #0
    1798:	d004      	beq.n	17a4 <_puts_r+0x14>
    179a:	6983      	ldr	r3, [r0, #24]
    179c:	2b00      	cmp	r3, #0
    179e:	d101      	bne.n	17a4 <_puts_r+0x14>
    17a0:	f000 fb08 	bl	1db4 <__sinit>
    17a4:	69ab      	ldr	r3, [r5, #24]
    17a6:	68ac      	ldr	r4, [r5, #8]
    17a8:	2b00      	cmp	r3, #0
    17aa:	d102      	bne.n	17b2 <_puts_r+0x22>
    17ac:	0028      	movs	r0, r5
    17ae:	f000 fb01 	bl	1db4 <__sinit>
    17b2:	4b24      	ldr	r3, [pc, #144]	; (1844 <_puts_r+0xb4>)
    17b4:	429c      	cmp	r4, r3
    17b6:	d10f      	bne.n	17d8 <_puts_r+0x48>
    17b8:	686c      	ldr	r4, [r5, #4]
    17ba:	89a3      	ldrh	r3, [r4, #12]
    17bc:	071b      	lsls	r3, r3, #28
    17be:	d502      	bpl.n	17c6 <_puts_r+0x36>
    17c0:	6923      	ldr	r3, [r4, #16]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d120      	bne.n	1808 <_puts_r+0x78>
    17c6:	0021      	movs	r1, r4
    17c8:	0028      	movs	r0, r5
    17ca:	f000 f971 	bl	1ab0 <__swsetup_r>
    17ce:	2800      	cmp	r0, #0
    17d0:	d01a      	beq.n	1808 <_puts_r+0x78>
    17d2:	2001      	movs	r0, #1
    17d4:	4240      	negs	r0, r0
    17d6:	bd70      	pop	{r4, r5, r6, pc}
    17d8:	4b1b      	ldr	r3, [pc, #108]	; (1848 <_puts_r+0xb8>)
    17da:	429c      	cmp	r4, r3
    17dc:	d101      	bne.n	17e2 <_puts_r+0x52>
    17de:	68ac      	ldr	r4, [r5, #8]
    17e0:	e7eb      	b.n	17ba <_puts_r+0x2a>
    17e2:	4b1a      	ldr	r3, [pc, #104]	; (184c <_puts_r+0xbc>)
    17e4:	429c      	cmp	r4, r3
    17e6:	d1e8      	bne.n	17ba <_puts_r+0x2a>
    17e8:	68ec      	ldr	r4, [r5, #12]
    17ea:	e7e6      	b.n	17ba <_puts_r+0x2a>
    17ec:	3b01      	subs	r3, #1
    17ee:	3601      	adds	r6, #1
    17f0:	60a3      	str	r3, [r4, #8]
    17f2:	2b00      	cmp	r3, #0
    17f4:	da04      	bge.n	1800 <_puts_r+0x70>
    17f6:	69a2      	ldr	r2, [r4, #24]
    17f8:	4293      	cmp	r3, r2
    17fa:	db16      	blt.n	182a <_puts_r+0x9a>
    17fc:	290a      	cmp	r1, #10
    17fe:	d014      	beq.n	182a <_puts_r+0x9a>
    1800:	6823      	ldr	r3, [r4, #0]
    1802:	1c5a      	adds	r2, r3, #1
    1804:	6022      	str	r2, [r4, #0]
    1806:	7019      	strb	r1, [r3, #0]
    1808:	7831      	ldrb	r1, [r6, #0]
    180a:	68a3      	ldr	r3, [r4, #8]
    180c:	2900      	cmp	r1, #0
    180e:	d1ed      	bne.n	17ec <_puts_r+0x5c>
    1810:	3b01      	subs	r3, #1
    1812:	60a3      	str	r3, [r4, #8]
    1814:	2b00      	cmp	r3, #0
    1816:	da0f      	bge.n	1838 <_puts_r+0xa8>
    1818:	0022      	movs	r2, r4
    181a:	310a      	adds	r1, #10
    181c:	0028      	movs	r0, r5
    181e:	f000 f8f1 	bl	1a04 <__swbuf_r>
    1822:	1c43      	adds	r3, r0, #1
    1824:	d0d5      	beq.n	17d2 <_puts_r+0x42>
    1826:	200a      	movs	r0, #10
    1828:	e7d5      	b.n	17d6 <_puts_r+0x46>
    182a:	0022      	movs	r2, r4
    182c:	0028      	movs	r0, r5
    182e:	f000 f8e9 	bl	1a04 <__swbuf_r>
    1832:	1c43      	adds	r3, r0, #1
    1834:	d1e8      	bne.n	1808 <_puts_r+0x78>
    1836:	e7cc      	b.n	17d2 <_puts_r+0x42>
    1838:	200a      	movs	r0, #10
    183a:	6823      	ldr	r3, [r4, #0]
    183c:	1c5a      	adds	r2, r3, #1
    183e:	6022      	str	r2, [r4, #0]
    1840:	7018      	strb	r0, [r3, #0]
    1842:	e7c8      	b.n	17d6 <_puts_r+0x46>
    1844:	00003000 	.word	0x00003000
    1848:	00003020 	.word	0x00003020
    184c:	00002fe0 	.word	0x00002fe0

00001850 <puts>:
    1850:	b510      	push	{r4, lr}
    1852:	4b03      	ldr	r3, [pc, #12]	; (1860 <puts+0x10>)
    1854:	0001      	movs	r1, r0
    1856:	6818      	ldr	r0, [r3, #0]
    1858:	f7ff ff9a 	bl	1790 <_puts_r>
    185c:	bd10      	pop	{r4, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	20000004 	.word	0x20000004

00001864 <iscanf>:
    1864:	b40f      	push	{r0, r1, r2, r3}
    1866:	4b0b      	ldr	r3, [pc, #44]	; (1894 <iscanf+0x30>)
    1868:	b513      	push	{r0, r1, r4, lr}
    186a:	681c      	ldr	r4, [r3, #0]
    186c:	2c00      	cmp	r4, #0
    186e:	d005      	beq.n	187c <iscanf+0x18>
    1870:	69a3      	ldr	r3, [r4, #24]
    1872:	2b00      	cmp	r3, #0
    1874:	d102      	bne.n	187c <iscanf+0x18>
    1876:	0020      	movs	r0, r4
    1878:	f000 fa9c 	bl	1db4 <__sinit>
    187c:	ab05      	add	r3, sp, #20
    187e:	9a04      	ldr	r2, [sp, #16]
    1880:	6861      	ldr	r1, [r4, #4]
    1882:	0020      	movs	r0, r4
    1884:	9301      	str	r3, [sp, #4]
    1886:	f000 fdeb 	bl	2460 <_vfiscanf_r>
    188a:	bc16      	pop	{r1, r2, r4}
    188c:	bc08      	pop	{r3}
    188e:	b004      	add	sp, #16
    1890:	4718      	bx	r3
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	20000004 	.word	0x20000004

00001898 <setbuf>:
    1898:	424a      	negs	r2, r1
    189a:	414a      	adcs	r2, r1
    189c:	2380      	movs	r3, #128	; 0x80
    189e:	b510      	push	{r4, lr}
    18a0:	0052      	lsls	r2, r2, #1
    18a2:	00db      	lsls	r3, r3, #3
    18a4:	f000 f802 	bl	18ac <setvbuf>
    18a8:	bd10      	pop	{r4, pc}
	...

000018ac <setvbuf>:
    18ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ae:	001d      	movs	r5, r3
    18b0:	4b4f      	ldr	r3, [pc, #316]	; (19f0 <setvbuf+0x144>)
    18b2:	b085      	sub	sp, #20
    18b4:	681e      	ldr	r6, [r3, #0]
    18b6:	0004      	movs	r4, r0
    18b8:	000f      	movs	r7, r1
    18ba:	9200      	str	r2, [sp, #0]
    18bc:	2e00      	cmp	r6, #0
    18be:	d005      	beq.n	18cc <setvbuf+0x20>
    18c0:	69b3      	ldr	r3, [r6, #24]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d102      	bne.n	18cc <setvbuf+0x20>
    18c6:	0030      	movs	r0, r6
    18c8:	f000 fa74 	bl	1db4 <__sinit>
    18cc:	4b49      	ldr	r3, [pc, #292]	; (19f4 <setvbuf+0x148>)
    18ce:	429c      	cmp	r4, r3
    18d0:	d150      	bne.n	1974 <setvbuf+0xc8>
    18d2:	6874      	ldr	r4, [r6, #4]
    18d4:	9b00      	ldr	r3, [sp, #0]
    18d6:	2b02      	cmp	r3, #2
    18d8:	d005      	beq.n	18e6 <setvbuf+0x3a>
    18da:	2b01      	cmp	r3, #1
    18dc:	d900      	bls.n	18e0 <setvbuf+0x34>
    18de:	e084      	b.n	19ea <setvbuf+0x13e>
    18e0:	2d00      	cmp	r5, #0
    18e2:	da00      	bge.n	18e6 <setvbuf+0x3a>
    18e4:	e081      	b.n	19ea <setvbuf+0x13e>
    18e6:	0021      	movs	r1, r4
    18e8:	0030      	movs	r0, r6
    18ea:	f000 f9e1 	bl	1cb0 <_fflush_r>
    18ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    18f0:	2900      	cmp	r1, #0
    18f2:	d008      	beq.n	1906 <setvbuf+0x5a>
    18f4:	0023      	movs	r3, r4
    18f6:	3344      	adds	r3, #68	; 0x44
    18f8:	4299      	cmp	r1, r3
    18fa:	d002      	beq.n	1902 <setvbuf+0x56>
    18fc:	0030      	movs	r0, r6
    18fe:	f000 fb81 	bl	2004 <_free_r>
    1902:	2300      	movs	r3, #0
    1904:	6363      	str	r3, [r4, #52]	; 0x34
    1906:	2300      	movs	r3, #0
    1908:	61a3      	str	r3, [r4, #24]
    190a:	6063      	str	r3, [r4, #4]
    190c:	89a3      	ldrh	r3, [r4, #12]
    190e:	061b      	lsls	r3, r3, #24
    1910:	d503      	bpl.n	191a <setvbuf+0x6e>
    1912:	6921      	ldr	r1, [r4, #16]
    1914:	0030      	movs	r0, r6
    1916:	f000 fb75 	bl	2004 <_free_r>
    191a:	89a3      	ldrh	r3, [r4, #12]
    191c:	4a36      	ldr	r2, [pc, #216]	; (19f8 <setvbuf+0x14c>)
    191e:	4013      	ands	r3, r2
    1920:	81a3      	strh	r3, [r4, #12]
    1922:	9b00      	ldr	r3, [sp, #0]
    1924:	2b02      	cmp	r3, #2
    1926:	d05a      	beq.n	19de <setvbuf+0x132>
    1928:	ab03      	add	r3, sp, #12
    192a:	aa02      	add	r2, sp, #8
    192c:	0021      	movs	r1, r4
    192e:	0030      	movs	r0, r6
    1930:	f000 faf2 	bl	1f18 <__swhatbuf_r>
    1934:	89a3      	ldrh	r3, [r4, #12]
    1936:	4318      	orrs	r0, r3
    1938:	81a0      	strh	r0, [r4, #12]
    193a:	2d00      	cmp	r5, #0
    193c:	d124      	bne.n	1988 <setvbuf+0xdc>
    193e:	9d02      	ldr	r5, [sp, #8]
    1940:	0028      	movs	r0, r5
    1942:	f000 fb55 	bl	1ff0 <malloc>
    1946:	9501      	str	r5, [sp, #4]
    1948:	1e07      	subs	r7, r0, #0
    194a:	d142      	bne.n	19d2 <setvbuf+0x126>
    194c:	9b02      	ldr	r3, [sp, #8]
    194e:	9301      	str	r3, [sp, #4]
    1950:	42ab      	cmp	r3, r5
    1952:	d139      	bne.n	19c8 <setvbuf+0x11c>
    1954:	2001      	movs	r0, #1
    1956:	4240      	negs	r0, r0
    1958:	2302      	movs	r3, #2
    195a:	89a2      	ldrh	r2, [r4, #12]
    195c:	4313      	orrs	r3, r2
    195e:	81a3      	strh	r3, [r4, #12]
    1960:	2300      	movs	r3, #0
    1962:	60a3      	str	r3, [r4, #8]
    1964:	0023      	movs	r3, r4
    1966:	3347      	adds	r3, #71	; 0x47
    1968:	6023      	str	r3, [r4, #0]
    196a:	6123      	str	r3, [r4, #16]
    196c:	2301      	movs	r3, #1
    196e:	6163      	str	r3, [r4, #20]
    1970:	b005      	add	sp, #20
    1972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1974:	4b21      	ldr	r3, [pc, #132]	; (19fc <setvbuf+0x150>)
    1976:	429c      	cmp	r4, r3
    1978:	d101      	bne.n	197e <setvbuf+0xd2>
    197a:	68b4      	ldr	r4, [r6, #8]
    197c:	e7aa      	b.n	18d4 <setvbuf+0x28>
    197e:	4b20      	ldr	r3, [pc, #128]	; (1a00 <setvbuf+0x154>)
    1980:	429c      	cmp	r4, r3
    1982:	d1a7      	bne.n	18d4 <setvbuf+0x28>
    1984:	68f4      	ldr	r4, [r6, #12]
    1986:	e7a5      	b.n	18d4 <setvbuf+0x28>
    1988:	2f00      	cmp	r7, #0
    198a:	d0d9      	beq.n	1940 <setvbuf+0x94>
    198c:	69b3      	ldr	r3, [r6, #24]
    198e:	2b00      	cmp	r3, #0
    1990:	d102      	bne.n	1998 <setvbuf+0xec>
    1992:	0030      	movs	r0, r6
    1994:	f000 fa0e 	bl	1db4 <__sinit>
    1998:	9b00      	ldr	r3, [sp, #0]
    199a:	2b01      	cmp	r3, #1
    199c:	d103      	bne.n	19a6 <setvbuf+0xfa>
    199e:	89a3      	ldrh	r3, [r4, #12]
    19a0:	9a00      	ldr	r2, [sp, #0]
    19a2:	431a      	orrs	r2, r3
    19a4:	81a2      	strh	r2, [r4, #12]
    19a6:	2008      	movs	r0, #8
    19a8:	89a3      	ldrh	r3, [r4, #12]
    19aa:	6027      	str	r7, [r4, #0]
    19ac:	6127      	str	r7, [r4, #16]
    19ae:	6165      	str	r5, [r4, #20]
    19b0:	4018      	ands	r0, r3
    19b2:	d018      	beq.n	19e6 <setvbuf+0x13a>
    19b4:	2001      	movs	r0, #1
    19b6:	4018      	ands	r0, r3
    19b8:	2300      	movs	r3, #0
    19ba:	4298      	cmp	r0, r3
    19bc:	d011      	beq.n	19e2 <setvbuf+0x136>
    19be:	426d      	negs	r5, r5
    19c0:	60a3      	str	r3, [r4, #8]
    19c2:	61a5      	str	r5, [r4, #24]
    19c4:	0018      	movs	r0, r3
    19c6:	e7d3      	b.n	1970 <setvbuf+0xc4>
    19c8:	9801      	ldr	r0, [sp, #4]
    19ca:	f000 fb11 	bl	1ff0 <malloc>
    19ce:	1e07      	subs	r7, r0, #0
    19d0:	d0c0      	beq.n	1954 <setvbuf+0xa8>
    19d2:	2380      	movs	r3, #128	; 0x80
    19d4:	89a2      	ldrh	r2, [r4, #12]
    19d6:	9d01      	ldr	r5, [sp, #4]
    19d8:	4313      	orrs	r3, r2
    19da:	81a3      	strh	r3, [r4, #12]
    19dc:	e7d6      	b.n	198c <setvbuf+0xe0>
    19de:	2000      	movs	r0, #0
    19e0:	e7ba      	b.n	1958 <setvbuf+0xac>
    19e2:	60a5      	str	r5, [r4, #8]
    19e4:	e7c4      	b.n	1970 <setvbuf+0xc4>
    19e6:	60a0      	str	r0, [r4, #8]
    19e8:	e7c2      	b.n	1970 <setvbuf+0xc4>
    19ea:	2001      	movs	r0, #1
    19ec:	4240      	negs	r0, r0
    19ee:	e7bf      	b.n	1970 <setvbuf+0xc4>
    19f0:	20000004 	.word	0x20000004
    19f4:	00003000 	.word	0x00003000
    19f8:	fffff35c 	.word	0xfffff35c
    19fc:	00003020 	.word	0x00003020
    1a00:	00002fe0 	.word	0x00002fe0

00001a04 <__swbuf_r>:
    1a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a06:	0005      	movs	r5, r0
    1a08:	000e      	movs	r6, r1
    1a0a:	0014      	movs	r4, r2
    1a0c:	2800      	cmp	r0, #0
    1a0e:	d004      	beq.n	1a1a <__swbuf_r+0x16>
    1a10:	6983      	ldr	r3, [r0, #24]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d101      	bne.n	1a1a <__swbuf_r+0x16>
    1a16:	f000 f9cd 	bl	1db4 <__sinit>
    1a1a:	4b22      	ldr	r3, [pc, #136]	; (1aa4 <__swbuf_r+0xa0>)
    1a1c:	429c      	cmp	r4, r3
    1a1e:	d12d      	bne.n	1a7c <__swbuf_r+0x78>
    1a20:	686c      	ldr	r4, [r5, #4]
    1a22:	69a3      	ldr	r3, [r4, #24]
    1a24:	60a3      	str	r3, [r4, #8]
    1a26:	89a3      	ldrh	r3, [r4, #12]
    1a28:	071b      	lsls	r3, r3, #28
    1a2a:	d531      	bpl.n	1a90 <__swbuf_r+0x8c>
    1a2c:	6923      	ldr	r3, [r4, #16]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d02e      	beq.n	1a90 <__swbuf_r+0x8c>
    1a32:	6823      	ldr	r3, [r4, #0]
    1a34:	6922      	ldr	r2, [r4, #16]
    1a36:	b2f7      	uxtb	r7, r6
    1a38:	1a98      	subs	r0, r3, r2
    1a3a:	6963      	ldr	r3, [r4, #20]
    1a3c:	b2f6      	uxtb	r6, r6
    1a3e:	4298      	cmp	r0, r3
    1a40:	db05      	blt.n	1a4e <__swbuf_r+0x4a>
    1a42:	0021      	movs	r1, r4
    1a44:	0028      	movs	r0, r5
    1a46:	f000 f933 	bl	1cb0 <_fflush_r>
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d126      	bne.n	1a9c <__swbuf_r+0x98>
    1a4e:	68a3      	ldr	r3, [r4, #8]
    1a50:	3001      	adds	r0, #1
    1a52:	3b01      	subs	r3, #1
    1a54:	60a3      	str	r3, [r4, #8]
    1a56:	6823      	ldr	r3, [r4, #0]
    1a58:	1c5a      	adds	r2, r3, #1
    1a5a:	6022      	str	r2, [r4, #0]
    1a5c:	701f      	strb	r7, [r3, #0]
    1a5e:	6963      	ldr	r3, [r4, #20]
    1a60:	4298      	cmp	r0, r3
    1a62:	d004      	beq.n	1a6e <__swbuf_r+0x6a>
    1a64:	89a3      	ldrh	r3, [r4, #12]
    1a66:	07db      	lsls	r3, r3, #31
    1a68:	d51a      	bpl.n	1aa0 <__swbuf_r+0x9c>
    1a6a:	2e0a      	cmp	r6, #10
    1a6c:	d118      	bne.n	1aa0 <__swbuf_r+0x9c>
    1a6e:	0021      	movs	r1, r4
    1a70:	0028      	movs	r0, r5
    1a72:	f000 f91d 	bl	1cb0 <_fflush_r>
    1a76:	2800      	cmp	r0, #0
    1a78:	d012      	beq.n	1aa0 <__swbuf_r+0x9c>
    1a7a:	e00f      	b.n	1a9c <__swbuf_r+0x98>
    1a7c:	4b0a      	ldr	r3, [pc, #40]	; (1aa8 <__swbuf_r+0xa4>)
    1a7e:	429c      	cmp	r4, r3
    1a80:	d101      	bne.n	1a86 <__swbuf_r+0x82>
    1a82:	68ac      	ldr	r4, [r5, #8]
    1a84:	e7cd      	b.n	1a22 <__swbuf_r+0x1e>
    1a86:	4b09      	ldr	r3, [pc, #36]	; (1aac <__swbuf_r+0xa8>)
    1a88:	429c      	cmp	r4, r3
    1a8a:	d1ca      	bne.n	1a22 <__swbuf_r+0x1e>
    1a8c:	68ec      	ldr	r4, [r5, #12]
    1a8e:	e7c8      	b.n	1a22 <__swbuf_r+0x1e>
    1a90:	0021      	movs	r1, r4
    1a92:	0028      	movs	r0, r5
    1a94:	f000 f80c 	bl	1ab0 <__swsetup_r>
    1a98:	2800      	cmp	r0, #0
    1a9a:	d0ca      	beq.n	1a32 <__swbuf_r+0x2e>
    1a9c:	2601      	movs	r6, #1
    1a9e:	4276      	negs	r6, r6
    1aa0:	0030      	movs	r0, r6
    1aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aa4:	00003000 	.word	0x00003000
    1aa8:	00003020 	.word	0x00003020
    1aac:	00002fe0 	.word	0x00002fe0

00001ab0 <__swsetup_r>:
    1ab0:	4b36      	ldr	r3, [pc, #216]	; (1b8c <__swsetup_r+0xdc>)
    1ab2:	b570      	push	{r4, r5, r6, lr}
    1ab4:	681d      	ldr	r5, [r3, #0]
    1ab6:	0006      	movs	r6, r0
    1ab8:	000c      	movs	r4, r1
    1aba:	2d00      	cmp	r5, #0
    1abc:	d005      	beq.n	1aca <__swsetup_r+0x1a>
    1abe:	69ab      	ldr	r3, [r5, #24]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d102      	bne.n	1aca <__swsetup_r+0x1a>
    1ac4:	0028      	movs	r0, r5
    1ac6:	f000 f975 	bl	1db4 <__sinit>
    1aca:	4b31      	ldr	r3, [pc, #196]	; (1b90 <__swsetup_r+0xe0>)
    1acc:	429c      	cmp	r4, r3
    1ace:	d10f      	bne.n	1af0 <__swsetup_r+0x40>
    1ad0:	686c      	ldr	r4, [r5, #4]
    1ad2:	230c      	movs	r3, #12
    1ad4:	5ee2      	ldrsh	r2, [r4, r3]
    1ad6:	b293      	uxth	r3, r2
    1ad8:	0719      	lsls	r1, r3, #28
    1ada:	d42d      	bmi.n	1b38 <__swsetup_r+0x88>
    1adc:	06d9      	lsls	r1, r3, #27
    1ade:	d411      	bmi.n	1b04 <__swsetup_r+0x54>
    1ae0:	2309      	movs	r3, #9
    1ae2:	2001      	movs	r0, #1
    1ae4:	6033      	str	r3, [r6, #0]
    1ae6:	3337      	adds	r3, #55	; 0x37
    1ae8:	4313      	orrs	r3, r2
    1aea:	81a3      	strh	r3, [r4, #12]
    1aec:	4240      	negs	r0, r0
    1aee:	bd70      	pop	{r4, r5, r6, pc}
    1af0:	4b28      	ldr	r3, [pc, #160]	; (1b94 <__swsetup_r+0xe4>)
    1af2:	429c      	cmp	r4, r3
    1af4:	d101      	bne.n	1afa <__swsetup_r+0x4a>
    1af6:	68ac      	ldr	r4, [r5, #8]
    1af8:	e7eb      	b.n	1ad2 <__swsetup_r+0x22>
    1afa:	4b27      	ldr	r3, [pc, #156]	; (1b98 <__swsetup_r+0xe8>)
    1afc:	429c      	cmp	r4, r3
    1afe:	d1e8      	bne.n	1ad2 <__swsetup_r+0x22>
    1b00:	68ec      	ldr	r4, [r5, #12]
    1b02:	e7e6      	b.n	1ad2 <__swsetup_r+0x22>
    1b04:	075b      	lsls	r3, r3, #29
    1b06:	d513      	bpl.n	1b30 <__swsetup_r+0x80>
    1b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1b0a:	2900      	cmp	r1, #0
    1b0c:	d008      	beq.n	1b20 <__swsetup_r+0x70>
    1b0e:	0023      	movs	r3, r4
    1b10:	3344      	adds	r3, #68	; 0x44
    1b12:	4299      	cmp	r1, r3
    1b14:	d002      	beq.n	1b1c <__swsetup_r+0x6c>
    1b16:	0030      	movs	r0, r6
    1b18:	f000 fa74 	bl	2004 <_free_r>
    1b1c:	2300      	movs	r3, #0
    1b1e:	6363      	str	r3, [r4, #52]	; 0x34
    1b20:	2224      	movs	r2, #36	; 0x24
    1b22:	89a3      	ldrh	r3, [r4, #12]
    1b24:	4393      	bics	r3, r2
    1b26:	81a3      	strh	r3, [r4, #12]
    1b28:	2300      	movs	r3, #0
    1b2a:	6063      	str	r3, [r4, #4]
    1b2c:	6923      	ldr	r3, [r4, #16]
    1b2e:	6023      	str	r3, [r4, #0]
    1b30:	2308      	movs	r3, #8
    1b32:	89a2      	ldrh	r2, [r4, #12]
    1b34:	4313      	orrs	r3, r2
    1b36:	81a3      	strh	r3, [r4, #12]
    1b38:	6923      	ldr	r3, [r4, #16]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d10b      	bne.n	1b56 <__swsetup_r+0xa6>
    1b3e:	21a0      	movs	r1, #160	; 0xa0
    1b40:	2280      	movs	r2, #128	; 0x80
    1b42:	89a3      	ldrh	r3, [r4, #12]
    1b44:	0089      	lsls	r1, r1, #2
    1b46:	0092      	lsls	r2, r2, #2
    1b48:	400b      	ands	r3, r1
    1b4a:	4293      	cmp	r3, r2
    1b4c:	d003      	beq.n	1b56 <__swsetup_r+0xa6>
    1b4e:	0021      	movs	r1, r4
    1b50:	0030      	movs	r0, r6
    1b52:	f000 fa09 	bl	1f68 <__smakebuf_r>
    1b56:	2301      	movs	r3, #1
    1b58:	89a2      	ldrh	r2, [r4, #12]
    1b5a:	4013      	ands	r3, r2
    1b5c:	d011      	beq.n	1b82 <__swsetup_r+0xd2>
    1b5e:	2300      	movs	r3, #0
    1b60:	60a3      	str	r3, [r4, #8]
    1b62:	6963      	ldr	r3, [r4, #20]
    1b64:	425b      	negs	r3, r3
    1b66:	61a3      	str	r3, [r4, #24]
    1b68:	2000      	movs	r0, #0
    1b6a:	6923      	ldr	r3, [r4, #16]
    1b6c:	4283      	cmp	r3, r0
    1b6e:	d1be      	bne.n	1aee <__swsetup_r+0x3e>
    1b70:	230c      	movs	r3, #12
    1b72:	5ee2      	ldrsh	r2, [r4, r3]
    1b74:	0613      	lsls	r3, r2, #24
    1b76:	d5ba      	bpl.n	1aee <__swsetup_r+0x3e>
    1b78:	2340      	movs	r3, #64	; 0x40
    1b7a:	4313      	orrs	r3, r2
    1b7c:	81a3      	strh	r3, [r4, #12]
    1b7e:	3801      	subs	r0, #1
    1b80:	e7b5      	b.n	1aee <__swsetup_r+0x3e>
    1b82:	0792      	lsls	r2, r2, #30
    1b84:	d400      	bmi.n	1b88 <__swsetup_r+0xd8>
    1b86:	6963      	ldr	r3, [r4, #20]
    1b88:	60a3      	str	r3, [r4, #8]
    1b8a:	e7ed      	b.n	1b68 <__swsetup_r+0xb8>
    1b8c:	20000004 	.word	0x20000004
    1b90:	00003000 	.word	0x00003000
    1b94:	00003020 	.word	0x00003020
    1b98:	00002fe0 	.word	0x00002fe0

00001b9c <__sflush_r>:
    1b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b9e:	898a      	ldrh	r2, [r1, #12]
    1ba0:	0005      	movs	r5, r0
    1ba2:	000c      	movs	r4, r1
    1ba4:	0713      	lsls	r3, r2, #28
    1ba6:	d460      	bmi.n	1c6a <__sflush_r+0xce>
    1ba8:	684b      	ldr	r3, [r1, #4]
    1baa:	2b00      	cmp	r3, #0
    1bac:	dc04      	bgt.n	1bb8 <__sflush_r+0x1c>
    1bae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	dc01      	bgt.n	1bb8 <__sflush_r+0x1c>
    1bb4:	2000      	movs	r0, #0
    1bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bb8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1bba:	2f00      	cmp	r7, #0
    1bbc:	d0fa      	beq.n	1bb4 <__sflush_r+0x18>
    1bbe:	2300      	movs	r3, #0
    1bc0:	682e      	ldr	r6, [r5, #0]
    1bc2:	602b      	str	r3, [r5, #0]
    1bc4:	2380      	movs	r3, #128	; 0x80
    1bc6:	015b      	lsls	r3, r3, #5
    1bc8:	401a      	ands	r2, r3
    1bca:	d034      	beq.n	1c36 <__sflush_r+0x9a>
    1bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1bce:	89a3      	ldrh	r3, [r4, #12]
    1bd0:	075b      	lsls	r3, r3, #29
    1bd2:	d506      	bpl.n	1be2 <__sflush_r+0x46>
    1bd4:	6863      	ldr	r3, [r4, #4]
    1bd6:	1ac0      	subs	r0, r0, r3
    1bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d001      	beq.n	1be2 <__sflush_r+0x46>
    1bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1be0:	1ac0      	subs	r0, r0, r3
    1be2:	0002      	movs	r2, r0
    1be4:	6a21      	ldr	r1, [r4, #32]
    1be6:	2300      	movs	r3, #0
    1be8:	0028      	movs	r0, r5
    1bea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1bec:	47b8      	blx	r7
    1bee:	89a1      	ldrh	r1, [r4, #12]
    1bf0:	1c43      	adds	r3, r0, #1
    1bf2:	d106      	bne.n	1c02 <__sflush_r+0x66>
    1bf4:	682b      	ldr	r3, [r5, #0]
    1bf6:	2b1d      	cmp	r3, #29
    1bf8:	d831      	bhi.n	1c5e <__sflush_r+0xc2>
    1bfa:	4a2c      	ldr	r2, [pc, #176]	; (1cac <__sflush_r+0x110>)
    1bfc:	40da      	lsrs	r2, r3
    1bfe:	07d3      	lsls	r3, r2, #31
    1c00:	d52d      	bpl.n	1c5e <__sflush_r+0xc2>
    1c02:	2300      	movs	r3, #0
    1c04:	6063      	str	r3, [r4, #4]
    1c06:	6923      	ldr	r3, [r4, #16]
    1c08:	6023      	str	r3, [r4, #0]
    1c0a:	04cb      	lsls	r3, r1, #19
    1c0c:	d505      	bpl.n	1c1a <__sflush_r+0x7e>
    1c0e:	1c43      	adds	r3, r0, #1
    1c10:	d102      	bne.n	1c18 <__sflush_r+0x7c>
    1c12:	682b      	ldr	r3, [r5, #0]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d100      	bne.n	1c1a <__sflush_r+0x7e>
    1c18:	6560      	str	r0, [r4, #84]	; 0x54
    1c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1c1c:	602e      	str	r6, [r5, #0]
    1c1e:	2900      	cmp	r1, #0
    1c20:	d0c8      	beq.n	1bb4 <__sflush_r+0x18>
    1c22:	0023      	movs	r3, r4
    1c24:	3344      	adds	r3, #68	; 0x44
    1c26:	4299      	cmp	r1, r3
    1c28:	d002      	beq.n	1c30 <__sflush_r+0x94>
    1c2a:	0028      	movs	r0, r5
    1c2c:	f000 f9ea 	bl	2004 <_free_r>
    1c30:	2000      	movs	r0, #0
    1c32:	6360      	str	r0, [r4, #52]	; 0x34
    1c34:	e7bf      	b.n	1bb6 <__sflush_r+0x1a>
    1c36:	2301      	movs	r3, #1
    1c38:	6a21      	ldr	r1, [r4, #32]
    1c3a:	0028      	movs	r0, r5
    1c3c:	47b8      	blx	r7
    1c3e:	1c43      	adds	r3, r0, #1
    1c40:	d1c5      	bne.n	1bce <__sflush_r+0x32>
    1c42:	682b      	ldr	r3, [r5, #0]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d0c2      	beq.n	1bce <__sflush_r+0x32>
    1c48:	2b1d      	cmp	r3, #29
    1c4a:	d001      	beq.n	1c50 <__sflush_r+0xb4>
    1c4c:	2b16      	cmp	r3, #22
    1c4e:	d101      	bne.n	1c54 <__sflush_r+0xb8>
    1c50:	602e      	str	r6, [r5, #0]
    1c52:	e7af      	b.n	1bb4 <__sflush_r+0x18>
    1c54:	2340      	movs	r3, #64	; 0x40
    1c56:	89a2      	ldrh	r2, [r4, #12]
    1c58:	4313      	orrs	r3, r2
    1c5a:	81a3      	strh	r3, [r4, #12]
    1c5c:	e7ab      	b.n	1bb6 <__sflush_r+0x1a>
    1c5e:	2340      	movs	r3, #64	; 0x40
    1c60:	430b      	orrs	r3, r1
    1c62:	2001      	movs	r0, #1
    1c64:	81a3      	strh	r3, [r4, #12]
    1c66:	4240      	negs	r0, r0
    1c68:	e7a5      	b.n	1bb6 <__sflush_r+0x1a>
    1c6a:	690f      	ldr	r7, [r1, #16]
    1c6c:	2f00      	cmp	r7, #0
    1c6e:	d0a1      	beq.n	1bb4 <__sflush_r+0x18>
    1c70:	680b      	ldr	r3, [r1, #0]
    1c72:	600f      	str	r7, [r1, #0]
    1c74:	1bdb      	subs	r3, r3, r7
    1c76:	9301      	str	r3, [sp, #4]
    1c78:	2300      	movs	r3, #0
    1c7a:	0792      	lsls	r2, r2, #30
    1c7c:	d100      	bne.n	1c80 <__sflush_r+0xe4>
    1c7e:	694b      	ldr	r3, [r1, #20]
    1c80:	60a3      	str	r3, [r4, #8]
    1c82:	9b01      	ldr	r3, [sp, #4]
    1c84:	2b00      	cmp	r3, #0
    1c86:	dc00      	bgt.n	1c8a <__sflush_r+0xee>
    1c88:	e794      	b.n	1bb4 <__sflush_r+0x18>
    1c8a:	9b01      	ldr	r3, [sp, #4]
    1c8c:	003a      	movs	r2, r7
    1c8e:	6a21      	ldr	r1, [r4, #32]
    1c90:	0028      	movs	r0, r5
    1c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1c94:	47b0      	blx	r6
    1c96:	2800      	cmp	r0, #0
    1c98:	dc03      	bgt.n	1ca2 <__sflush_r+0x106>
    1c9a:	2340      	movs	r3, #64	; 0x40
    1c9c:	89a2      	ldrh	r2, [r4, #12]
    1c9e:	4313      	orrs	r3, r2
    1ca0:	e7df      	b.n	1c62 <__sflush_r+0xc6>
    1ca2:	9b01      	ldr	r3, [sp, #4]
    1ca4:	183f      	adds	r7, r7, r0
    1ca6:	1a1b      	subs	r3, r3, r0
    1ca8:	9301      	str	r3, [sp, #4]
    1caa:	e7ea      	b.n	1c82 <__sflush_r+0xe6>
    1cac:	20400001 	.word	0x20400001

00001cb0 <_fflush_r>:
    1cb0:	690b      	ldr	r3, [r1, #16]
    1cb2:	b570      	push	{r4, r5, r6, lr}
    1cb4:	0005      	movs	r5, r0
    1cb6:	000c      	movs	r4, r1
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d101      	bne.n	1cc0 <_fflush_r+0x10>
    1cbc:	2000      	movs	r0, #0
    1cbe:	bd70      	pop	{r4, r5, r6, pc}
    1cc0:	2800      	cmp	r0, #0
    1cc2:	d004      	beq.n	1cce <_fflush_r+0x1e>
    1cc4:	6983      	ldr	r3, [r0, #24]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d101      	bne.n	1cce <_fflush_r+0x1e>
    1cca:	f000 f873 	bl	1db4 <__sinit>
    1cce:	4b0b      	ldr	r3, [pc, #44]	; (1cfc <_fflush_r+0x4c>)
    1cd0:	429c      	cmp	r4, r3
    1cd2:	d109      	bne.n	1ce8 <_fflush_r+0x38>
    1cd4:	686c      	ldr	r4, [r5, #4]
    1cd6:	220c      	movs	r2, #12
    1cd8:	5ea3      	ldrsh	r3, [r4, r2]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d0ee      	beq.n	1cbc <_fflush_r+0xc>
    1cde:	0021      	movs	r1, r4
    1ce0:	0028      	movs	r0, r5
    1ce2:	f7ff ff5b 	bl	1b9c <__sflush_r>
    1ce6:	e7ea      	b.n	1cbe <_fflush_r+0xe>
    1ce8:	4b05      	ldr	r3, [pc, #20]	; (1d00 <_fflush_r+0x50>)
    1cea:	429c      	cmp	r4, r3
    1cec:	d101      	bne.n	1cf2 <_fflush_r+0x42>
    1cee:	68ac      	ldr	r4, [r5, #8]
    1cf0:	e7f1      	b.n	1cd6 <_fflush_r+0x26>
    1cf2:	4b04      	ldr	r3, [pc, #16]	; (1d04 <_fflush_r+0x54>)
    1cf4:	429c      	cmp	r4, r3
    1cf6:	d1ee      	bne.n	1cd6 <_fflush_r+0x26>
    1cf8:	68ec      	ldr	r4, [r5, #12]
    1cfa:	e7ec      	b.n	1cd6 <_fflush_r+0x26>
    1cfc:	00003000 	.word	0x00003000
    1d00:	00003020 	.word	0x00003020
    1d04:	00002fe0 	.word	0x00002fe0

00001d08 <fflush>:
    1d08:	b510      	push	{r4, lr}
    1d0a:	1e01      	subs	r1, r0, #0
    1d0c:	d105      	bne.n	1d1a <fflush+0x12>
    1d0e:	4b05      	ldr	r3, [pc, #20]	; (1d24 <fflush+0x1c>)
    1d10:	4905      	ldr	r1, [pc, #20]	; (1d28 <fflush+0x20>)
    1d12:	6818      	ldr	r0, [r3, #0]
    1d14:	f000 f8de 	bl	1ed4 <_fwalk_reent>
    1d18:	bd10      	pop	{r4, pc}
    1d1a:	4b04      	ldr	r3, [pc, #16]	; (1d2c <fflush+0x24>)
    1d1c:	6818      	ldr	r0, [r3, #0]
    1d1e:	f7ff ffc7 	bl	1cb0 <_fflush_r>
    1d22:	e7f9      	b.n	1d18 <fflush+0x10>
    1d24:	00002fdc 	.word	0x00002fdc
    1d28:	00001cb1 	.word	0x00001cb1
    1d2c:	20000004 	.word	0x20000004

00001d30 <_cleanup_r>:
    1d30:	b510      	push	{r4, lr}
    1d32:	4902      	ldr	r1, [pc, #8]	; (1d3c <_cleanup_r+0xc>)
    1d34:	f000 f8ce 	bl	1ed4 <_fwalk_reent>
    1d38:	bd10      	pop	{r4, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	00001cb1 	.word	0x00001cb1

00001d40 <std.isra.0>:
    1d40:	2300      	movs	r3, #0
    1d42:	b510      	push	{r4, lr}
    1d44:	0004      	movs	r4, r0
    1d46:	6003      	str	r3, [r0, #0]
    1d48:	6043      	str	r3, [r0, #4]
    1d4a:	6083      	str	r3, [r0, #8]
    1d4c:	8181      	strh	r1, [r0, #12]
    1d4e:	6643      	str	r3, [r0, #100]	; 0x64
    1d50:	81c2      	strh	r2, [r0, #14]
    1d52:	6103      	str	r3, [r0, #16]
    1d54:	6143      	str	r3, [r0, #20]
    1d56:	6183      	str	r3, [r0, #24]
    1d58:	0019      	movs	r1, r3
    1d5a:	2208      	movs	r2, #8
    1d5c:	305c      	adds	r0, #92	; 0x5c
    1d5e:	f7ff fd0f 	bl	1780 <memset>
    1d62:	4b05      	ldr	r3, [pc, #20]	; (1d78 <std.isra.0+0x38>)
    1d64:	6224      	str	r4, [r4, #32]
    1d66:	6263      	str	r3, [r4, #36]	; 0x24
    1d68:	4b04      	ldr	r3, [pc, #16]	; (1d7c <std.isra.0+0x3c>)
    1d6a:	62a3      	str	r3, [r4, #40]	; 0x28
    1d6c:	4b04      	ldr	r3, [pc, #16]	; (1d80 <std.isra.0+0x40>)
    1d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    1d70:	4b04      	ldr	r3, [pc, #16]	; (1d84 <std.isra.0+0x44>)
    1d72:	6323      	str	r3, [r4, #48]	; 0x30
    1d74:	bd10      	pop	{r4, pc}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	00002939 	.word	0x00002939
    1d7c:	00002961 	.word	0x00002961
    1d80:	00002999 	.word	0x00002999
    1d84:	000029c5 	.word	0x000029c5

00001d88 <__sfmoreglue>:
    1d88:	b570      	push	{r4, r5, r6, lr}
    1d8a:	2568      	movs	r5, #104	; 0x68
    1d8c:	1e4a      	subs	r2, r1, #1
    1d8e:	4355      	muls	r5, r2
    1d90:	000e      	movs	r6, r1
    1d92:	0029      	movs	r1, r5
    1d94:	3174      	adds	r1, #116	; 0x74
    1d96:	f000 f97f 	bl	2098 <_malloc_r>
    1d9a:	1e04      	subs	r4, r0, #0
    1d9c:	d008      	beq.n	1db0 <__sfmoreglue+0x28>
    1d9e:	2100      	movs	r1, #0
    1da0:	002a      	movs	r2, r5
    1da2:	6001      	str	r1, [r0, #0]
    1da4:	6046      	str	r6, [r0, #4]
    1da6:	300c      	adds	r0, #12
    1da8:	60a0      	str	r0, [r4, #8]
    1daa:	3268      	adds	r2, #104	; 0x68
    1dac:	f7ff fce8 	bl	1780 <memset>
    1db0:	0020      	movs	r0, r4
    1db2:	bd70      	pop	{r4, r5, r6, pc}

00001db4 <__sinit>:
    1db4:	6983      	ldr	r3, [r0, #24]
    1db6:	b513      	push	{r0, r1, r4, lr}
    1db8:	0004      	movs	r4, r0
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d128      	bne.n	1e10 <__sinit+0x5c>
    1dbe:	6483      	str	r3, [r0, #72]	; 0x48
    1dc0:	64c3      	str	r3, [r0, #76]	; 0x4c
    1dc2:	6503      	str	r3, [r0, #80]	; 0x50
    1dc4:	4b13      	ldr	r3, [pc, #76]	; (1e14 <__sinit+0x60>)
    1dc6:	4a14      	ldr	r2, [pc, #80]	; (1e18 <__sinit+0x64>)
    1dc8:	681b      	ldr	r3, [r3, #0]
    1dca:	6282      	str	r2, [r0, #40]	; 0x28
    1dcc:	9301      	str	r3, [sp, #4]
    1dce:	4298      	cmp	r0, r3
    1dd0:	d101      	bne.n	1dd6 <__sinit+0x22>
    1dd2:	2301      	movs	r3, #1
    1dd4:	6183      	str	r3, [r0, #24]
    1dd6:	0020      	movs	r0, r4
    1dd8:	f000 f820 	bl	1e1c <__sfp>
    1ddc:	6060      	str	r0, [r4, #4]
    1dde:	0020      	movs	r0, r4
    1de0:	f000 f81c 	bl	1e1c <__sfp>
    1de4:	60a0      	str	r0, [r4, #8]
    1de6:	0020      	movs	r0, r4
    1de8:	f000 f818 	bl	1e1c <__sfp>
    1dec:	2200      	movs	r2, #0
    1dee:	60e0      	str	r0, [r4, #12]
    1df0:	2104      	movs	r1, #4
    1df2:	6860      	ldr	r0, [r4, #4]
    1df4:	f7ff ffa4 	bl	1d40 <std.isra.0>
    1df8:	2201      	movs	r2, #1
    1dfa:	2109      	movs	r1, #9
    1dfc:	68a0      	ldr	r0, [r4, #8]
    1dfe:	f7ff ff9f 	bl	1d40 <std.isra.0>
    1e02:	2202      	movs	r2, #2
    1e04:	2112      	movs	r1, #18
    1e06:	68e0      	ldr	r0, [r4, #12]
    1e08:	f7ff ff9a 	bl	1d40 <std.isra.0>
    1e0c:	2301      	movs	r3, #1
    1e0e:	61a3      	str	r3, [r4, #24]
    1e10:	bd13      	pop	{r0, r1, r4, pc}
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	00002fdc 	.word	0x00002fdc
    1e18:	00001d31 	.word	0x00001d31

00001e1c <__sfp>:
    1e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e1e:	4b1e      	ldr	r3, [pc, #120]	; (1e98 <__sfp+0x7c>)
    1e20:	0007      	movs	r7, r0
    1e22:	681e      	ldr	r6, [r3, #0]
    1e24:	69b3      	ldr	r3, [r6, #24]
    1e26:	2b00      	cmp	r3, #0
    1e28:	d102      	bne.n	1e30 <__sfp+0x14>
    1e2a:	0030      	movs	r0, r6
    1e2c:	f7ff ffc2 	bl	1db4 <__sinit>
    1e30:	3648      	adds	r6, #72	; 0x48
    1e32:	68b4      	ldr	r4, [r6, #8]
    1e34:	6873      	ldr	r3, [r6, #4]
    1e36:	3b01      	subs	r3, #1
    1e38:	d504      	bpl.n	1e44 <__sfp+0x28>
    1e3a:	6833      	ldr	r3, [r6, #0]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d007      	beq.n	1e50 <__sfp+0x34>
    1e40:	6836      	ldr	r6, [r6, #0]
    1e42:	e7f6      	b.n	1e32 <__sfp+0x16>
    1e44:	220c      	movs	r2, #12
    1e46:	5ea5      	ldrsh	r5, [r4, r2]
    1e48:	2d00      	cmp	r5, #0
    1e4a:	d00d      	beq.n	1e68 <__sfp+0x4c>
    1e4c:	3468      	adds	r4, #104	; 0x68
    1e4e:	e7f2      	b.n	1e36 <__sfp+0x1a>
    1e50:	2104      	movs	r1, #4
    1e52:	0038      	movs	r0, r7
    1e54:	f7ff ff98 	bl	1d88 <__sfmoreglue>
    1e58:	6030      	str	r0, [r6, #0]
    1e5a:	2800      	cmp	r0, #0
    1e5c:	d1f0      	bne.n	1e40 <__sfp+0x24>
    1e5e:	230c      	movs	r3, #12
    1e60:	0004      	movs	r4, r0
    1e62:	603b      	str	r3, [r7, #0]
    1e64:	0020      	movs	r0, r4
    1e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e68:	2301      	movs	r3, #1
    1e6a:	0020      	movs	r0, r4
    1e6c:	425b      	negs	r3, r3
    1e6e:	81e3      	strh	r3, [r4, #14]
    1e70:	3302      	adds	r3, #2
    1e72:	81a3      	strh	r3, [r4, #12]
    1e74:	6665      	str	r5, [r4, #100]	; 0x64
    1e76:	6025      	str	r5, [r4, #0]
    1e78:	60a5      	str	r5, [r4, #8]
    1e7a:	6065      	str	r5, [r4, #4]
    1e7c:	6125      	str	r5, [r4, #16]
    1e7e:	6165      	str	r5, [r4, #20]
    1e80:	61a5      	str	r5, [r4, #24]
    1e82:	2208      	movs	r2, #8
    1e84:	0029      	movs	r1, r5
    1e86:	305c      	adds	r0, #92	; 0x5c
    1e88:	f7ff fc7a 	bl	1780 <memset>
    1e8c:	6365      	str	r5, [r4, #52]	; 0x34
    1e8e:	63a5      	str	r5, [r4, #56]	; 0x38
    1e90:	64a5      	str	r5, [r4, #72]	; 0x48
    1e92:	64e5      	str	r5, [r4, #76]	; 0x4c
    1e94:	e7e6      	b.n	1e64 <__sfp+0x48>
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	00002fdc 	.word	0x00002fdc

00001e9c <_fwalk>:
    1e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e9e:	3048      	adds	r0, #72	; 0x48
    1ea0:	0004      	movs	r4, r0
    1ea2:	2600      	movs	r6, #0
    1ea4:	9101      	str	r1, [sp, #4]
    1ea6:	2c00      	cmp	r4, #0
    1ea8:	d101      	bne.n	1eae <_fwalk+0x12>
    1eaa:	0030      	movs	r0, r6
    1eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1eae:	68a5      	ldr	r5, [r4, #8]
    1eb0:	6867      	ldr	r7, [r4, #4]
    1eb2:	3f01      	subs	r7, #1
    1eb4:	d501      	bpl.n	1eba <_fwalk+0x1e>
    1eb6:	6824      	ldr	r4, [r4, #0]
    1eb8:	e7f5      	b.n	1ea6 <_fwalk+0xa>
    1eba:	89ab      	ldrh	r3, [r5, #12]
    1ebc:	2b01      	cmp	r3, #1
    1ebe:	d907      	bls.n	1ed0 <_fwalk+0x34>
    1ec0:	220e      	movs	r2, #14
    1ec2:	5eab      	ldrsh	r3, [r5, r2]
    1ec4:	3301      	adds	r3, #1
    1ec6:	d003      	beq.n	1ed0 <_fwalk+0x34>
    1ec8:	0028      	movs	r0, r5
    1eca:	9b01      	ldr	r3, [sp, #4]
    1ecc:	4798      	blx	r3
    1ece:	4306      	orrs	r6, r0
    1ed0:	3568      	adds	r5, #104	; 0x68
    1ed2:	e7ee      	b.n	1eb2 <_fwalk+0x16>

00001ed4 <_fwalk_reent>:
    1ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ed6:	0004      	movs	r4, r0
    1ed8:	0007      	movs	r7, r0
    1eda:	2600      	movs	r6, #0
    1edc:	9101      	str	r1, [sp, #4]
    1ede:	3448      	adds	r4, #72	; 0x48
    1ee0:	2c00      	cmp	r4, #0
    1ee2:	d101      	bne.n	1ee8 <_fwalk_reent+0x14>
    1ee4:	0030      	movs	r0, r6
    1ee6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1ee8:	6863      	ldr	r3, [r4, #4]
    1eea:	68a5      	ldr	r5, [r4, #8]
    1eec:	9300      	str	r3, [sp, #0]
    1eee:	9b00      	ldr	r3, [sp, #0]
    1ef0:	3b01      	subs	r3, #1
    1ef2:	9300      	str	r3, [sp, #0]
    1ef4:	d501      	bpl.n	1efa <_fwalk_reent+0x26>
    1ef6:	6824      	ldr	r4, [r4, #0]
    1ef8:	e7f2      	b.n	1ee0 <_fwalk_reent+0xc>
    1efa:	89ab      	ldrh	r3, [r5, #12]
    1efc:	2b01      	cmp	r3, #1
    1efe:	d908      	bls.n	1f12 <_fwalk_reent+0x3e>
    1f00:	220e      	movs	r2, #14
    1f02:	5eab      	ldrsh	r3, [r5, r2]
    1f04:	3301      	adds	r3, #1
    1f06:	d004      	beq.n	1f12 <_fwalk_reent+0x3e>
    1f08:	0029      	movs	r1, r5
    1f0a:	0038      	movs	r0, r7
    1f0c:	9b01      	ldr	r3, [sp, #4]
    1f0e:	4798      	blx	r3
    1f10:	4306      	orrs	r6, r0
    1f12:	3568      	adds	r5, #104	; 0x68
    1f14:	e7eb      	b.n	1eee <_fwalk_reent+0x1a>
	...

00001f18 <__swhatbuf_r>:
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	000e      	movs	r6, r1
    1f1c:	001d      	movs	r5, r3
    1f1e:	230e      	movs	r3, #14
    1f20:	5ec9      	ldrsh	r1, [r1, r3]
    1f22:	b090      	sub	sp, #64	; 0x40
    1f24:	0014      	movs	r4, r2
    1f26:	2900      	cmp	r1, #0
    1f28:	da07      	bge.n	1f3a <__swhatbuf_r+0x22>
    1f2a:	2300      	movs	r3, #0
    1f2c:	602b      	str	r3, [r5, #0]
    1f2e:	89b3      	ldrh	r3, [r6, #12]
    1f30:	061b      	lsls	r3, r3, #24
    1f32:	d411      	bmi.n	1f58 <__swhatbuf_r+0x40>
    1f34:	2380      	movs	r3, #128	; 0x80
    1f36:	00db      	lsls	r3, r3, #3
    1f38:	e00f      	b.n	1f5a <__swhatbuf_r+0x42>
    1f3a:	aa01      	add	r2, sp, #4
    1f3c:	f000 ff4c 	bl	2dd8 <_fstat_r>
    1f40:	2800      	cmp	r0, #0
    1f42:	dbf2      	blt.n	1f2a <__swhatbuf_r+0x12>
    1f44:	22f0      	movs	r2, #240	; 0xf0
    1f46:	9b02      	ldr	r3, [sp, #8]
    1f48:	0212      	lsls	r2, r2, #8
    1f4a:	4013      	ands	r3, r2
    1f4c:	4a05      	ldr	r2, [pc, #20]	; (1f64 <__swhatbuf_r+0x4c>)
    1f4e:	189b      	adds	r3, r3, r2
    1f50:	425a      	negs	r2, r3
    1f52:	4153      	adcs	r3, r2
    1f54:	602b      	str	r3, [r5, #0]
    1f56:	e7ed      	b.n	1f34 <__swhatbuf_r+0x1c>
    1f58:	2340      	movs	r3, #64	; 0x40
    1f5a:	2000      	movs	r0, #0
    1f5c:	6023      	str	r3, [r4, #0]
    1f5e:	b010      	add	sp, #64	; 0x40
    1f60:	bd70      	pop	{r4, r5, r6, pc}
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	ffffe000 	.word	0xffffe000

00001f68 <__smakebuf_r>:
    1f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f6a:	2602      	movs	r6, #2
    1f6c:	898b      	ldrh	r3, [r1, #12]
    1f6e:	0005      	movs	r5, r0
    1f70:	000c      	movs	r4, r1
    1f72:	4233      	tst	r3, r6
    1f74:	d006      	beq.n	1f84 <__smakebuf_r+0x1c>
    1f76:	0023      	movs	r3, r4
    1f78:	3347      	adds	r3, #71	; 0x47
    1f7a:	6023      	str	r3, [r4, #0]
    1f7c:	6123      	str	r3, [r4, #16]
    1f7e:	2301      	movs	r3, #1
    1f80:	6163      	str	r3, [r4, #20]
    1f82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f84:	ab01      	add	r3, sp, #4
    1f86:	466a      	mov	r2, sp
    1f88:	f7ff ffc6 	bl	1f18 <__swhatbuf_r>
    1f8c:	9900      	ldr	r1, [sp, #0]
    1f8e:	0007      	movs	r7, r0
    1f90:	0028      	movs	r0, r5
    1f92:	f000 f881 	bl	2098 <_malloc_r>
    1f96:	2800      	cmp	r0, #0
    1f98:	d108      	bne.n	1fac <__smakebuf_r+0x44>
    1f9a:	220c      	movs	r2, #12
    1f9c:	5ea3      	ldrsh	r3, [r4, r2]
    1f9e:	059a      	lsls	r2, r3, #22
    1fa0:	d4ef      	bmi.n	1f82 <__smakebuf_r+0x1a>
    1fa2:	2203      	movs	r2, #3
    1fa4:	4393      	bics	r3, r2
    1fa6:	431e      	orrs	r6, r3
    1fa8:	81a6      	strh	r6, [r4, #12]
    1faa:	e7e4      	b.n	1f76 <__smakebuf_r+0xe>
    1fac:	4b0f      	ldr	r3, [pc, #60]	; (1fec <__smakebuf_r+0x84>)
    1fae:	62ab      	str	r3, [r5, #40]	; 0x28
    1fb0:	2380      	movs	r3, #128	; 0x80
    1fb2:	89a2      	ldrh	r2, [r4, #12]
    1fb4:	6020      	str	r0, [r4, #0]
    1fb6:	4313      	orrs	r3, r2
    1fb8:	81a3      	strh	r3, [r4, #12]
    1fba:	9b00      	ldr	r3, [sp, #0]
    1fbc:	6120      	str	r0, [r4, #16]
    1fbe:	6163      	str	r3, [r4, #20]
    1fc0:	9b01      	ldr	r3, [sp, #4]
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d00d      	beq.n	1fe2 <__smakebuf_r+0x7a>
    1fc6:	230e      	movs	r3, #14
    1fc8:	5ee1      	ldrsh	r1, [r4, r3]
    1fca:	0028      	movs	r0, r5
    1fcc:	f000 ff16 	bl	2dfc <_isatty_r>
    1fd0:	2800      	cmp	r0, #0
    1fd2:	d006      	beq.n	1fe2 <__smakebuf_r+0x7a>
    1fd4:	2203      	movs	r2, #3
    1fd6:	89a3      	ldrh	r3, [r4, #12]
    1fd8:	4393      	bics	r3, r2
    1fda:	001a      	movs	r2, r3
    1fdc:	2301      	movs	r3, #1
    1fde:	4313      	orrs	r3, r2
    1fe0:	81a3      	strh	r3, [r4, #12]
    1fe2:	89a0      	ldrh	r0, [r4, #12]
    1fe4:	4338      	orrs	r0, r7
    1fe6:	81a0      	strh	r0, [r4, #12]
    1fe8:	e7cb      	b.n	1f82 <__smakebuf_r+0x1a>
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	00001d31 	.word	0x00001d31

00001ff0 <malloc>:
    1ff0:	b510      	push	{r4, lr}
    1ff2:	4b03      	ldr	r3, [pc, #12]	; (2000 <STACK_SIZE>)
    1ff4:	0001      	movs	r1, r0
    1ff6:	6818      	ldr	r0, [r3, #0]
    1ff8:	f000 f84e 	bl	2098 <_malloc_r>
    1ffc:	bd10      	pop	{r4, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	20000004 	.word	0x20000004

00002004 <_free_r>:
    2004:	b570      	push	{r4, r5, r6, lr}
    2006:	0005      	movs	r5, r0
    2008:	2900      	cmp	r1, #0
    200a:	d010      	beq.n	202e <_free_r+0x2a>
    200c:	1f0c      	subs	r4, r1, #4
    200e:	6823      	ldr	r3, [r4, #0]
    2010:	2b00      	cmp	r3, #0
    2012:	da00      	bge.n	2016 <_free_r+0x12>
    2014:	18e4      	adds	r4, r4, r3
    2016:	0028      	movs	r0, r5
    2018:	f000 ff4e 	bl	2eb8 <__malloc_lock>
    201c:	4a1d      	ldr	r2, [pc, #116]	; (2094 <_free_r+0x90>)
    201e:	6813      	ldr	r3, [r2, #0]
    2020:	2b00      	cmp	r3, #0
    2022:	d105      	bne.n	2030 <_free_r+0x2c>
    2024:	6063      	str	r3, [r4, #4]
    2026:	6014      	str	r4, [r2, #0]
    2028:	0028      	movs	r0, r5
    202a:	f000 ff46 	bl	2eba <__malloc_unlock>
    202e:	bd70      	pop	{r4, r5, r6, pc}
    2030:	42a3      	cmp	r3, r4
    2032:	d909      	bls.n	2048 <_free_r+0x44>
    2034:	6821      	ldr	r1, [r4, #0]
    2036:	1860      	adds	r0, r4, r1
    2038:	4283      	cmp	r3, r0
    203a:	d1f3      	bne.n	2024 <_free_r+0x20>
    203c:	6818      	ldr	r0, [r3, #0]
    203e:	685b      	ldr	r3, [r3, #4]
    2040:	1841      	adds	r1, r0, r1
    2042:	6021      	str	r1, [r4, #0]
    2044:	e7ee      	b.n	2024 <_free_r+0x20>
    2046:	0013      	movs	r3, r2
    2048:	685a      	ldr	r2, [r3, #4]
    204a:	2a00      	cmp	r2, #0
    204c:	d001      	beq.n	2052 <_free_r+0x4e>
    204e:	42a2      	cmp	r2, r4
    2050:	d9f9      	bls.n	2046 <_free_r+0x42>
    2052:	6819      	ldr	r1, [r3, #0]
    2054:	1858      	adds	r0, r3, r1
    2056:	42a0      	cmp	r0, r4
    2058:	d10b      	bne.n	2072 <_free_r+0x6e>
    205a:	6820      	ldr	r0, [r4, #0]
    205c:	1809      	adds	r1, r1, r0
    205e:	1858      	adds	r0, r3, r1
    2060:	6019      	str	r1, [r3, #0]
    2062:	4282      	cmp	r2, r0
    2064:	d1e0      	bne.n	2028 <_free_r+0x24>
    2066:	6810      	ldr	r0, [r2, #0]
    2068:	6852      	ldr	r2, [r2, #4]
    206a:	1841      	adds	r1, r0, r1
    206c:	6019      	str	r1, [r3, #0]
    206e:	605a      	str	r2, [r3, #4]
    2070:	e7da      	b.n	2028 <_free_r+0x24>
    2072:	42a0      	cmp	r0, r4
    2074:	d902      	bls.n	207c <_free_r+0x78>
    2076:	230c      	movs	r3, #12
    2078:	602b      	str	r3, [r5, #0]
    207a:	e7d5      	b.n	2028 <_free_r+0x24>
    207c:	6821      	ldr	r1, [r4, #0]
    207e:	1860      	adds	r0, r4, r1
    2080:	4282      	cmp	r2, r0
    2082:	d103      	bne.n	208c <_free_r+0x88>
    2084:	6810      	ldr	r0, [r2, #0]
    2086:	6852      	ldr	r2, [r2, #4]
    2088:	1841      	adds	r1, r0, r1
    208a:	6021      	str	r1, [r4, #0]
    208c:	6062      	str	r2, [r4, #4]
    208e:	605c      	str	r4, [r3, #4]
    2090:	e7ca      	b.n	2028 <_free_r+0x24>
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	20000230 	.word	0x20000230

00002098 <_malloc_r>:
    2098:	2303      	movs	r3, #3
    209a:	b570      	push	{r4, r5, r6, lr}
    209c:	1ccd      	adds	r5, r1, #3
    209e:	439d      	bics	r5, r3
    20a0:	3508      	adds	r5, #8
    20a2:	0006      	movs	r6, r0
    20a4:	2d0c      	cmp	r5, #12
    20a6:	d21e      	bcs.n	20e6 <_malloc_r+0x4e>
    20a8:	250c      	movs	r5, #12
    20aa:	42a9      	cmp	r1, r5
    20ac:	d81d      	bhi.n	20ea <_malloc_r+0x52>
    20ae:	0030      	movs	r0, r6
    20b0:	f000 ff02 	bl	2eb8 <__malloc_lock>
    20b4:	4a25      	ldr	r2, [pc, #148]	; (214c <_malloc_r+0xb4>)
    20b6:	6814      	ldr	r4, [r2, #0]
    20b8:	0021      	movs	r1, r4
    20ba:	2900      	cmp	r1, #0
    20bc:	d119      	bne.n	20f2 <_malloc_r+0x5a>
    20be:	4c24      	ldr	r4, [pc, #144]	; (2150 <_malloc_r+0xb8>)
    20c0:	6823      	ldr	r3, [r4, #0]
    20c2:	2b00      	cmp	r3, #0
    20c4:	d103      	bne.n	20ce <_malloc_r+0x36>
    20c6:	0030      	movs	r0, r6
    20c8:	f000 fbf2 	bl	28b0 <_sbrk_r>
    20cc:	6020      	str	r0, [r4, #0]
    20ce:	0029      	movs	r1, r5
    20d0:	0030      	movs	r0, r6
    20d2:	f000 fbed 	bl	28b0 <_sbrk_r>
    20d6:	1c43      	adds	r3, r0, #1
    20d8:	d12c      	bne.n	2134 <_malloc_r+0x9c>
    20da:	230c      	movs	r3, #12
    20dc:	0030      	movs	r0, r6
    20de:	6033      	str	r3, [r6, #0]
    20e0:	f000 feeb 	bl	2eba <__malloc_unlock>
    20e4:	e003      	b.n	20ee <_malloc_r+0x56>
    20e6:	2d00      	cmp	r5, #0
    20e8:	dadf      	bge.n	20aa <_malloc_r+0x12>
    20ea:	230c      	movs	r3, #12
    20ec:	6033      	str	r3, [r6, #0]
    20ee:	2000      	movs	r0, #0
    20f0:	bd70      	pop	{r4, r5, r6, pc}
    20f2:	680b      	ldr	r3, [r1, #0]
    20f4:	1b5b      	subs	r3, r3, r5
    20f6:	d41a      	bmi.n	212e <_malloc_r+0x96>
    20f8:	2b0b      	cmp	r3, #11
    20fa:	d903      	bls.n	2104 <_malloc_r+0x6c>
    20fc:	600b      	str	r3, [r1, #0]
    20fe:	18cc      	adds	r4, r1, r3
    2100:	6025      	str	r5, [r4, #0]
    2102:	e003      	b.n	210c <_malloc_r+0x74>
    2104:	428c      	cmp	r4, r1
    2106:	d10e      	bne.n	2126 <_malloc_r+0x8e>
    2108:	6863      	ldr	r3, [r4, #4]
    210a:	6013      	str	r3, [r2, #0]
    210c:	0030      	movs	r0, r6
    210e:	f000 fed4 	bl	2eba <__malloc_unlock>
    2112:	0020      	movs	r0, r4
    2114:	2207      	movs	r2, #7
    2116:	300b      	adds	r0, #11
    2118:	1d23      	adds	r3, r4, #4
    211a:	4390      	bics	r0, r2
    211c:	1ac3      	subs	r3, r0, r3
    211e:	d0e7      	beq.n	20f0 <_malloc_r+0x58>
    2120:	425a      	negs	r2, r3
    2122:	50e2      	str	r2, [r4, r3]
    2124:	e7e4      	b.n	20f0 <_malloc_r+0x58>
    2126:	684b      	ldr	r3, [r1, #4]
    2128:	6063      	str	r3, [r4, #4]
    212a:	000c      	movs	r4, r1
    212c:	e7ee      	b.n	210c <_malloc_r+0x74>
    212e:	000c      	movs	r4, r1
    2130:	6849      	ldr	r1, [r1, #4]
    2132:	e7c2      	b.n	20ba <_malloc_r+0x22>
    2134:	2303      	movs	r3, #3
    2136:	1cc4      	adds	r4, r0, #3
    2138:	439c      	bics	r4, r3
    213a:	42a0      	cmp	r0, r4
    213c:	d0e0      	beq.n	2100 <_malloc_r+0x68>
    213e:	1a21      	subs	r1, r4, r0
    2140:	0030      	movs	r0, r6
    2142:	f000 fbb5 	bl	28b0 <_sbrk_r>
    2146:	1c43      	adds	r3, r0, #1
    2148:	d1da      	bne.n	2100 <_malloc_r+0x68>
    214a:	e7c6      	b.n	20da <_malloc_r+0x42>
    214c:	20000230 	.word	0x20000230
    2150:	20000234 	.word	0x20000234

00002154 <__svfiscanf_r>:
    2154:	b5f0      	push	{r4, r5, r6, r7, lr}
    2156:	4cbd      	ldr	r4, [pc, #756]	; (244c <__svfiscanf_r+0x2f8>)
    2158:	2586      	movs	r5, #134	; 0x86
    215a:	44a5      	add	sp, r4
    215c:	9303      	str	r3, [sp, #12]
    215e:	2300      	movs	r3, #0
    2160:	9348      	str	r3, [sp, #288]	; 0x120
    2162:	9349      	str	r3, [sp, #292]	; 0x124
    2164:	ab05      	add	r3, sp, #20
    2166:	934a      	str	r3, [sp, #296]	; 0x128
    2168:	23be      	movs	r3, #190	; 0xbe
    216a:	006d      	lsls	r5, r5, #1
    216c:	9000      	str	r0, [sp, #0]
    216e:	000c      	movs	r4, r1
    2170:	a802      	add	r0, sp, #8
    2172:	49b7      	ldr	r1, [pc, #732]	; (2450 <__svfiscanf_r+0x2fc>)
    2174:	005b      	lsls	r3, r3, #1
    2176:	1940      	adds	r0, r0, r5
    2178:	27c0      	movs	r7, #192	; 0xc0
    217a:	50c1      	str	r1, [r0, r3]
    217c:	ab02      	add	r3, sp, #8
    217e:	195b      	adds	r3, r3, r5
    2180:	0015      	movs	r5, r2
    2182:	49b4      	ldr	r1, [pc, #720]	; (2454 <__svfiscanf_r+0x300>)
    2184:	007f      	lsls	r7, r7, #1
    2186:	51d9      	str	r1, [r3, r7]
    2188:	782b      	ldrb	r3, [r5, #0]
    218a:	2b00      	cmp	r3, #0
    218c:	d100      	bne.n	2190 <__svfiscanf_r+0x3c>
    218e:	e15b      	b.n	2448 <__svfiscanf_r+0x2f4>
    2190:	f000 fe4a 	bl	2e28 <__locale_ctype_ptr>
    2194:	2208      	movs	r2, #8
    2196:	782b      	ldrb	r3, [r5, #0]
    2198:	18c0      	adds	r0, r0, r3
    219a:	9301      	str	r3, [sp, #4]
    219c:	7843      	ldrb	r3, [r0, #1]
    219e:	4013      	ands	r3, r2
    21a0:	d141      	bne.n	2226 <__svfiscanf_r+0xd2>
    21a2:	9a01      	ldr	r2, [sp, #4]
    21a4:	1c6e      	adds	r6, r5, #1
    21a6:	2a25      	cmp	r2, #37	; 0x25
    21a8:	d000      	beq.n	21ac <__svfiscanf_r+0x58>
    21aa:	e0a8      	b.n	22fe <__svfiscanf_r+0x1aa>
    21ac:	9347      	str	r3, [sp, #284]	; 0x11c
    21ae:	9345      	str	r3, [sp, #276]	; 0x114
    21b0:	786b      	ldrb	r3, [r5, #1]
    21b2:	2b2a      	cmp	r3, #42	; 0x2a
    21b4:	d102      	bne.n	21bc <__svfiscanf_r+0x68>
    21b6:	3b1a      	subs	r3, #26
    21b8:	9345      	str	r3, [sp, #276]	; 0x114
    21ba:	1cae      	adds	r6, r5, #2
    21bc:	0035      	movs	r5, r6
    21be:	220a      	movs	r2, #10
    21c0:	7829      	ldrb	r1, [r5, #0]
    21c2:	000b      	movs	r3, r1
    21c4:	3b30      	subs	r3, #48	; 0x30
    21c6:	2b09      	cmp	r3, #9
    21c8:	d948      	bls.n	225c <__svfiscanf_r+0x108>
    21ca:	4ea3      	ldr	r6, [pc, #652]	; (2458 <__svfiscanf_r+0x304>)
    21cc:	2203      	movs	r2, #3
    21ce:	0030      	movs	r0, r6
    21d0:	f000 fe5e 	bl	2e90 <memchr>
    21d4:	2800      	cmp	r0, #0
    21d6:	d007      	beq.n	21e8 <__svfiscanf_r+0x94>
    21d8:	2301      	movs	r3, #1
    21da:	1b80      	subs	r0, r0, r6
    21dc:	4083      	lsls	r3, r0
    21de:	9a45      	ldr	r2, [sp, #276]	; 0x114
    21e0:	3501      	adds	r5, #1
    21e2:	4313      	orrs	r3, r2
    21e4:	9202      	str	r2, [sp, #8]
    21e6:	9345      	str	r3, [sp, #276]	; 0x114
    21e8:	782b      	ldrb	r3, [r5, #0]
    21ea:	1c6e      	adds	r6, r5, #1
    21ec:	2b67      	cmp	r3, #103	; 0x67
    21ee:	d858      	bhi.n	22a2 <__svfiscanf_r+0x14e>
    21f0:	2b65      	cmp	r3, #101	; 0x65
    21f2:	d300      	bcc.n	21f6 <__svfiscanf_r+0xa2>
    21f4:	e0dd      	b.n	23b2 <__svfiscanf_r+0x25e>
    21f6:	2b47      	cmp	r3, #71	; 0x47
    21f8:	d838      	bhi.n	226c <__svfiscanf_r+0x118>
    21fa:	2b45      	cmp	r3, #69	; 0x45
    21fc:	d300      	bcc.n	2200 <__svfiscanf_r+0xac>
    21fe:	e0d8      	b.n	23b2 <__svfiscanf_r+0x25e>
    2200:	2b00      	cmp	r3, #0
    2202:	d100      	bne.n	2206 <__svfiscanf_r+0xb2>
    2204:	e11d      	b.n	2442 <__svfiscanf_r+0x2ee>
    2206:	2b25      	cmp	r3, #37	; 0x25
    2208:	d079      	beq.n	22fe <__svfiscanf_r+0x1aa>
    220a:	2303      	movs	r3, #3
    220c:	934b      	str	r3, [sp, #300]	; 0x12c
    220e:	3307      	adds	r3, #7
    2210:	9346      	str	r3, [sp, #280]	; 0x118
    2212:	e053      	b.n	22bc <__svfiscanf_r+0x168>
    2214:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2216:	3301      	adds	r3, #1
    2218:	9201      	str	r2, [sp, #4]
    221a:	3201      	adds	r2, #1
    221c:	9249      	str	r2, [sp, #292]	; 0x124
    221e:	6862      	ldr	r2, [r4, #4]
    2220:	6023      	str	r3, [r4, #0]
    2222:	3a01      	subs	r2, #1
    2224:	6062      	str	r2, [r4, #4]
    2226:	6863      	ldr	r3, [r4, #4]
    2228:	2b00      	cmp	r3, #0
    222a:	dd0b      	ble.n	2244 <__svfiscanf_r+0xf0>
    222c:	f000 fdfc 	bl	2e28 <__locale_ctype_ptr>
    2230:	2108      	movs	r1, #8
    2232:	6823      	ldr	r3, [r4, #0]
    2234:	781a      	ldrb	r2, [r3, #0]
    2236:	1880      	adds	r0, r0, r2
    2238:	7842      	ldrb	r2, [r0, #1]
    223a:	420a      	tst	r2, r1
    223c:	d1ea      	bne.n	2214 <__svfiscanf_r+0xc0>
    223e:	1c6e      	adds	r6, r5, #1
    2240:	0035      	movs	r5, r6
    2242:	e7a1      	b.n	2188 <__svfiscanf_r+0x34>
    2244:	2286      	movs	r2, #134	; 0x86
    2246:	ab02      	add	r3, sp, #8
    2248:	0052      	lsls	r2, r2, #1
    224a:	189b      	adds	r3, r3, r2
    224c:	59db      	ldr	r3, [r3, r7]
    224e:	0021      	movs	r1, r4
    2250:	9800      	ldr	r0, [sp, #0]
    2252:	9301      	str	r3, [sp, #4]
    2254:	4798      	blx	r3
    2256:	2800      	cmp	r0, #0
    2258:	d0e8      	beq.n	222c <__svfiscanf_r+0xd8>
    225a:	e7f0      	b.n	223e <__svfiscanf_r+0xea>
    225c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    225e:	3501      	adds	r5, #1
    2260:	9302      	str	r3, [sp, #8]
    2262:	4353      	muls	r3, r2
    2264:	3b30      	subs	r3, #48	; 0x30
    2266:	1859      	adds	r1, r3, r1
    2268:	9147      	str	r1, [sp, #284]	; 0x11c
    226a:	e7a9      	b.n	21c0 <__svfiscanf_r+0x6c>
    226c:	2b5b      	cmp	r3, #91	; 0x5b
    226e:	d100      	bne.n	2272 <__svfiscanf_r+0x11e>
    2270:	e077      	b.n	2362 <__svfiscanf_r+0x20e>
    2272:	d80f      	bhi.n	2294 <__svfiscanf_r+0x140>
    2274:	2b58      	cmp	r3, #88	; 0x58
    2276:	d1c8      	bne.n	220a <__svfiscanf_r+0xb6>
    2278:	9a45      	ldr	r2, [sp, #276]	; 0x114
    227a:	9201      	str	r2, [sp, #4]
    227c:	2280      	movs	r2, #128	; 0x80
    227e:	9901      	ldr	r1, [sp, #4]
    2280:	0092      	lsls	r2, r2, #2
    2282:	430a      	orrs	r2, r1
    2284:	9245      	str	r2, [sp, #276]	; 0x114
    2286:	2210      	movs	r2, #16
    2288:	9246      	str	r2, [sp, #280]	; 0x118
    228a:	2203      	movs	r2, #3
    228c:	2b6e      	cmp	r3, #110	; 0x6e
    228e:	dd14      	ble.n	22ba <__svfiscanf_r+0x166>
    2290:	3201      	adds	r2, #1
    2292:	e012      	b.n	22ba <__svfiscanf_r+0x166>
    2294:	2b63      	cmp	r3, #99	; 0x63
    2296:	d100      	bne.n	229a <__svfiscanf_r+0x146>
    2298:	e071      	b.n	237e <__svfiscanf_r+0x22a>
    229a:	2b64      	cmp	r3, #100	; 0x64
    229c:	d1b5      	bne.n	220a <__svfiscanf_r+0xb6>
    229e:	220a      	movs	r2, #10
    22a0:	e7f2      	b.n	2288 <__svfiscanf_r+0x134>
    22a2:	2b70      	cmp	r3, #112	; 0x70
    22a4:	d052      	beq.n	234c <__svfiscanf_r+0x1f8>
    22a6:	d822      	bhi.n	22ee <__svfiscanf_r+0x19a>
    22a8:	2b6e      	cmp	r3, #110	; 0x6e
    22aa:	d100      	bne.n	22ae <__svfiscanf_r+0x15a>
    22ac:	e06f      	b.n	238e <__svfiscanf_r+0x23a>
    22ae:	d854      	bhi.n	235a <__svfiscanf_r+0x206>
    22b0:	2b69      	cmp	r3, #105	; 0x69
    22b2:	d1aa      	bne.n	220a <__svfiscanf_r+0xb6>
    22b4:	2300      	movs	r3, #0
    22b6:	2203      	movs	r2, #3
    22b8:	9346      	str	r3, [sp, #280]	; 0x118
    22ba:	924b      	str	r2, [sp, #300]	; 0x12c
    22bc:	6863      	ldr	r3, [r4, #4]
    22be:	2b00      	cmp	r3, #0
    22c0:	dc00      	bgt.n	22c4 <__svfiscanf_r+0x170>
    22c2:	e078      	b.n	23b6 <__svfiscanf_r+0x262>
    22c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    22c6:	9301      	str	r3, [sp, #4]
    22c8:	065b      	lsls	r3, r3, #25
    22ca:	d400      	bmi.n	22ce <__svfiscanf_r+0x17a>
    22cc:	e08b      	b.n	23e6 <__svfiscanf_r+0x292>
    22ce:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    22d0:	2b02      	cmp	r3, #2
    22d2:	dd00      	ble.n	22d6 <__svfiscanf_r+0x182>
    22d4:	e09d      	b.n	2412 <__svfiscanf_r+0x2be>
    22d6:	ab03      	add	r3, sp, #12
    22d8:	0022      	movs	r2, r4
    22da:	a945      	add	r1, sp, #276	; 0x114
    22dc:	9800      	ldr	r0, [sp, #0]
    22de:	f000 f8e7 	bl	24b0 <_scanf_chars>
    22e2:	2801      	cmp	r0, #1
    22e4:	d100      	bne.n	22e8 <__svfiscanf_r+0x194>
    22e6:	e0af      	b.n	2448 <__svfiscanf_r+0x2f4>
    22e8:	2802      	cmp	r0, #2
    22ea:	d1a9      	bne.n	2240 <__svfiscanf_r+0xec>
    22ec:	e025      	b.n	233a <__svfiscanf_r+0x1e6>
    22ee:	2b75      	cmp	r3, #117	; 0x75
    22f0:	d0d5      	beq.n	229e <__svfiscanf_r+0x14a>
    22f2:	2b78      	cmp	r3, #120	; 0x78
    22f4:	d0c0      	beq.n	2278 <__svfiscanf_r+0x124>
    22f6:	2b73      	cmp	r3, #115	; 0x73
    22f8:	d187      	bne.n	220a <__svfiscanf_r+0xb6>
    22fa:	2302      	movs	r3, #2
    22fc:	e03d      	b.n	237a <__svfiscanf_r+0x226>
    22fe:	6863      	ldr	r3, [r4, #4]
    2300:	2b00      	cmp	r3, #0
    2302:	dd0f      	ble.n	2324 <__svfiscanf_r+0x1d0>
    2304:	6823      	ldr	r3, [r4, #0]
    2306:	9901      	ldr	r1, [sp, #4]
    2308:	781a      	ldrb	r2, [r3, #0]
    230a:	4291      	cmp	r1, r2
    230c:	d000      	beq.n	2310 <__svfiscanf_r+0x1bc>
    230e:	e09b      	b.n	2448 <__svfiscanf_r+0x2f4>
    2310:	3301      	adds	r3, #1
    2312:	6862      	ldr	r2, [r4, #4]
    2314:	6023      	str	r3, [r4, #0]
    2316:	9b49      	ldr	r3, [sp, #292]	; 0x124
    2318:	3a01      	subs	r2, #1
    231a:	9301      	str	r3, [sp, #4]
    231c:	3301      	adds	r3, #1
    231e:	6062      	str	r2, [r4, #4]
    2320:	9349      	str	r3, [sp, #292]	; 0x124
    2322:	e78d      	b.n	2240 <__svfiscanf_r+0xec>
    2324:	2286      	movs	r2, #134	; 0x86
    2326:	ab02      	add	r3, sp, #8
    2328:	0052      	lsls	r2, r2, #1
    232a:	189b      	adds	r3, r3, r2
    232c:	59db      	ldr	r3, [r3, r7]
    232e:	0021      	movs	r1, r4
    2330:	9800      	ldr	r0, [sp, #0]
    2332:	9302      	str	r3, [sp, #8]
    2334:	4798      	blx	r3
    2336:	2800      	cmp	r0, #0
    2338:	d0e4      	beq.n	2304 <__svfiscanf_r+0x1b0>
    233a:	9848      	ldr	r0, [sp, #288]	; 0x120
    233c:	2800      	cmp	r0, #0
    233e:	d000      	beq.n	2342 <__svfiscanf_r+0x1ee>
    2340:	e07b      	b.n	243a <__svfiscanf_r+0x2e6>
    2342:	3801      	subs	r0, #1
    2344:	23a7      	movs	r3, #167	; 0xa7
    2346:	009b      	lsls	r3, r3, #2
    2348:	449d      	add	sp, r3
    234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    234c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    234e:	9201      	str	r2, [sp, #4]
    2350:	2220      	movs	r2, #32
    2352:	9901      	ldr	r1, [sp, #4]
    2354:	430a      	orrs	r2, r1
    2356:	9245      	str	r2, [sp, #276]	; 0x114
    2358:	e78e      	b.n	2278 <__svfiscanf_r+0x124>
    235a:	2308      	movs	r3, #8
    235c:	2204      	movs	r2, #4
    235e:	9346      	str	r3, [sp, #280]	; 0x118
    2360:	e7ab      	b.n	22ba <__svfiscanf_r+0x166>
    2362:	0031      	movs	r1, r6
    2364:	a805      	add	r0, sp, #20
    2366:	f000 fab5 	bl	28d4 <__sccl>
    236a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    236c:	0006      	movs	r6, r0
    236e:	9301      	str	r3, [sp, #4]
    2370:	2340      	movs	r3, #64	; 0x40
    2372:	9a01      	ldr	r2, [sp, #4]
    2374:	4313      	orrs	r3, r2
    2376:	9345      	str	r3, [sp, #276]	; 0x114
    2378:	2301      	movs	r3, #1
    237a:	934b      	str	r3, [sp, #300]	; 0x12c
    237c:	e79e      	b.n	22bc <__svfiscanf_r+0x168>
    237e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2380:	9301      	str	r3, [sp, #4]
    2382:	2340      	movs	r3, #64	; 0x40
    2384:	9a01      	ldr	r2, [sp, #4]
    2386:	4313      	orrs	r3, r2
    2388:	9345      	str	r3, [sp, #276]	; 0x114
    238a:	2300      	movs	r3, #0
    238c:	e7f5      	b.n	237a <__svfiscanf_r+0x226>
    238e:	9945      	ldr	r1, [sp, #276]	; 0x114
    2390:	06cb      	lsls	r3, r1, #27
    2392:	d500      	bpl.n	2396 <__svfiscanf_r+0x242>
    2394:	e754      	b.n	2240 <__svfiscanf_r+0xec>
    2396:	9b03      	ldr	r3, [sp, #12]
    2398:	9a49      	ldr	r2, [sp, #292]	; 0x124
    239a:	07c8      	lsls	r0, r1, #31
    239c:	d504      	bpl.n	23a8 <__svfiscanf_r+0x254>
    239e:	1d19      	adds	r1, r3, #4
    23a0:	9103      	str	r1, [sp, #12]
    23a2:	681b      	ldr	r3, [r3, #0]
    23a4:	801a      	strh	r2, [r3, #0]
    23a6:	e74b      	b.n	2240 <__svfiscanf_r+0xec>
    23a8:	1d19      	adds	r1, r3, #4
    23aa:	9103      	str	r1, [sp, #12]
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	601a      	str	r2, [r3, #0]
    23b0:	e746      	b.n	2240 <__svfiscanf_r+0xec>
    23b2:	2305      	movs	r3, #5
    23b4:	e7e1      	b.n	237a <__svfiscanf_r+0x226>
    23b6:	2286      	movs	r2, #134	; 0x86
    23b8:	ab02      	add	r3, sp, #8
    23ba:	0052      	lsls	r2, r2, #1
    23bc:	189b      	adds	r3, r3, r2
    23be:	59db      	ldr	r3, [r3, r7]
    23c0:	0021      	movs	r1, r4
    23c2:	9800      	ldr	r0, [sp, #0]
    23c4:	9301      	str	r3, [sp, #4]
    23c6:	4798      	blx	r3
    23c8:	2800      	cmp	r0, #0
    23ca:	d100      	bne.n	23ce <__svfiscanf_r+0x27a>
    23cc:	e77a      	b.n	22c4 <__svfiscanf_r+0x170>
    23ce:	e7b4      	b.n	233a <__svfiscanf_r+0x1e6>
    23d0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    23d2:	9201      	str	r2, [sp, #4]
    23d4:	3201      	adds	r2, #1
    23d6:	9249      	str	r2, [sp, #292]	; 0x124
    23d8:	6862      	ldr	r2, [r4, #4]
    23da:	3a01      	subs	r2, #1
    23dc:	6062      	str	r2, [r4, #4]
    23de:	2a00      	cmp	r2, #0
    23e0:	dd0b      	ble.n	23fa <__svfiscanf_r+0x2a6>
    23e2:	3301      	adds	r3, #1
    23e4:	6023      	str	r3, [r4, #0]
    23e6:	f000 fd1f 	bl	2e28 <__locale_ctype_ptr>
    23ea:	2108      	movs	r1, #8
    23ec:	6823      	ldr	r3, [r4, #0]
    23ee:	781a      	ldrb	r2, [r3, #0]
    23f0:	1880      	adds	r0, r0, r2
    23f2:	7842      	ldrb	r2, [r0, #1]
    23f4:	420a      	tst	r2, r1
    23f6:	d1eb      	bne.n	23d0 <__svfiscanf_r+0x27c>
    23f8:	e769      	b.n	22ce <__svfiscanf_r+0x17a>
    23fa:	2286      	movs	r2, #134	; 0x86
    23fc:	ab02      	add	r3, sp, #8
    23fe:	0052      	lsls	r2, r2, #1
    2400:	189b      	adds	r3, r3, r2
    2402:	59db      	ldr	r3, [r3, r7]
    2404:	0021      	movs	r1, r4
    2406:	9800      	ldr	r0, [sp, #0]
    2408:	9301      	str	r3, [sp, #4]
    240a:	4798      	blx	r3
    240c:	2800      	cmp	r0, #0
    240e:	d0ea      	beq.n	23e6 <__svfiscanf_r+0x292>
    2410:	e793      	b.n	233a <__svfiscanf_r+0x1e6>
    2412:	2b04      	cmp	r3, #4
    2414:	dc06      	bgt.n	2424 <__svfiscanf_r+0x2d0>
    2416:	ab03      	add	r3, sp, #12
    2418:	0022      	movs	r2, r4
    241a:	a945      	add	r1, sp, #276	; 0x114
    241c:	9800      	ldr	r0, [sp, #0]
    241e:	f000 f8ab 	bl	2578 <_scanf_i>
    2422:	e75e      	b.n	22e2 <__svfiscanf_r+0x18e>
    2424:	4b0d      	ldr	r3, [pc, #52]	; (245c <__svfiscanf_r+0x308>)
    2426:	2b00      	cmp	r3, #0
    2428:	d100      	bne.n	242c <__svfiscanf_r+0x2d8>
    242a:	e709      	b.n	2240 <__svfiscanf_r+0xec>
    242c:	ab03      	add	r3, sp, #12
    242e:	0022      	movs	r2, r4
    2430:	a945      	add	r1, sp, #276	; 0x114
    2432:	9800      	ldr	r0, [sp, #0]
    2434:	e000      	b.n	2438 <__svfiscanf_r+0x2e4>
    2436:	bf00      	nop
    2438:	e753      	b.n	22e2 <__svfiscanf_r+0x18e>
    243a:	89a3      	ldrh	r3, [r4, #12]
    243c:	065b      	lsls	r3, r3, #25
    243e:	d400      	bmi.n	2442 <__svfiscanf_r+0x2ee>
    2440:	e780      	b.n	2344 <__svfiscanf_r+0x1f0>
    2442:	2001      	movs	r0, #1
    2444:	4240      	negs	r0, r0
    2446:	e77d      	b.n	2344 <__svfiscanf_r+0x1f0>
    2448:	9848      	ldr	r0, [sp, #288]	; 0x120
    244a:	e77b      	b.n	2344 <__svfiscanf_r+0x1f0>
    244c:	fffffd64 	.word	0xfffffd64
    2450:	00002ca9 	.word	0x00002ca9
    2454:	00002791 	.word	0x00002791
    2458:	00003040 	.word	0x00003040
    245c:	00000000 	.word	0x00000000

00002460 <_vfiscanf_r>:
    2460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2462:	0004      	movs	r4, r0
    2464:	000d      	movs	r5, r1
    2466:	0016      	movs	r6, r2
    2468:	001f      	movs	r7, r3
    246a:	2800      	cmp	r0, #0
    246c:	d004      	beq.n	2478 <_vfiscanf_r+0x18>
    246e:	6983      	ldr	r3, [r0, #24]
    2470:	2b00      	cmp	r3, #0
    2472:	d101      	bne.n	2478 <_vfiscanf_r+0x18>
    2474:	f7ff fc9e 	bl	1db4 <__sinit>
    2478:	4b0a      	ldr	r3, [pc, #40]	; (24a4 <_vfiscanf_r+0x44>)
    247a:	429d      	cmp	r5, r3
    247c:	d107      	bne.n	248e <_vfiscanf_r+0x2e>
    247e:	6865      	ldr	r5, [r4, #4]
    2480:	003b      	movs	r3, r7
    2482:	0032      	movs	r2, r6
    2484:	0029      	movs	r1, r5
    2486:	0020      	movs	r0, r4
    2488:	f7ff fe64 	bl	2154 <__svfiscanf_r>
    248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    248e:	4b06      	ldr	r3, [pc, #24]	; (24a8 <_vfiscanf_r+0x48>)
    2490:	429d      	cmp	r5, r3
    2492:	d101      	bne.n	2498 <_vfiscanf_r+0x38>
    2494:	68a5      	ldr	r5, [r4, #8]
    2496:	e7f3      	b.n	2480 <_vfiscanf_r+0x20>
    2498:	4b04      	ldr	r3, [pc, #16]	; (24ac <_vfiscanf_r+0x4c>)
    249a:	429d      	cmp	r5, r3
    249c:	d1f0      	bne.n	2480 <_vfiscanf_r+0x20>
    249e:	68e5      	ldr	r5, [r4, #12]
    24a0:	e7ee      	b.n	2480 <_vfiscanf_r+0x20>
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	00003000 	.word	0x00003000
    24a8:	00003020 	.word	0x00003020
    24ac:	00002fe0 	.word	0x00002fe0

000024b0 <_scanf_chars>:
    24b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    24b2:	0015      	movs	r5, r2
    24b4:	688a      	ldr	r2, [r1, #8]
    24b6:	9001      	str	r0, [sp, #4]
    24b8:	000c      	movs	r4, r1
    24ba:	2a00      	cmp	r2, #0
    24bc:	d106      	bne.n	24cc <_scanf_chars+0x1c>
    24be:	698a      	ldr	r2, [r1, #24]
    24c0:	1e51      	subs	r1, r2, #1
    24c2:	418a      	sbcs	r2, r1
    24c4:	2101      	movs	r1, #1
    24c6:	4252      	negs	r2, r2
    24c8:	430a      	orrs	r2, r1
    24ca:	60a2      	str	r2, [r4, #8]
    24cc:	6822      	ldr	r2, [r4, #0]
    24ce:	06d2      	lsls	r2, r2, #27
    24d0:	d403      	bmi.n	24da <_scanf_chars+0x2a>
    24d2:	681a      	ldr	r2, [r3, #0]
    24d4:	1d11      	adds	r1, r2, #4
    24d6:	6019      	str	r1, [r3, #0]
    24d8:	6817      	ldr	r7, [r2, #0]
    24da:	2600      	movs	r6, #0
    24dc:	69a3      	ldr	r3, [r4, #24]
    24de:	2b00      	cmp	r3, #0
    24e0:	d01c      	beq.n	251c <_scanf_chars+0x6c>
    24e2:	2b01      	cmp	r3, #1
    24e4:	d108      	bne.n	24f8 <_scanf_chars+0x48>
    24e6:	682b      	ldr	r3, [r5, #0]
    24e8:	6962      	ldr	r2, [r4, #20]
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	5cd3      	ldrb	r3, [r2, r3]
    24ee:	2b00      	cmp	r3, #0
    24f0:	d114      	bne.n	251c <_scanf_chars+0x6c>
    24f2:	2e00      	cmp	r6, #0
    24f4:	d130      	bne.n	2558 <_scanf_chars+0xa8>
    24f6:	e006      	b.n	2506 <_scanf_chars+0x56>
    24f8:	2b02      	cmp	r3, #2
    24fa:	d006      	beq.n	250a <_scanf_chars+0x5a>
    24fc:	2e00      	cmp	r6, #0
    24fe:	d12b      	bne.n	2558 <_scanf_chars+0xa8>
    2500:	69a3      	ldr	r3, [r4, #24]
    2502:	2b01      	cmp	r3, #1
    2504:	d128      	bne.n	2558 <_scanf_chars+0xa8>
    2506:	2001      	movs	r0, #1
    2508:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    250a:	f000 fc8d 	bl	2e28 <__locale_ctype_ptr>
    250e:	2208      	movs	r2, #8
    2510:	682b      	ldr	r3, [r5, #0]
    2512:	781b      	ldrb	r3, [r3, #0]
    2514:	18c0      	adds	r0, r0, r3
    2516:	7843      	ldrb	r3, [r0, #1]
    2518:	4213      	tst	r3, r2
    251a:	d1ef      	bne.n	24fc <_scanf_chars+0x4c>
    251c:	2210      	movs	r2, #16
    251e:	6823      	ldr	r3, [r4, #0]
    2520:	3601      	adds	r6, #1
    2522:	4213      	tst	r3, r2
    2524:	d103      	bne.n	252e <_scanf_chars+0x7e>
    2526:	682b      	ldr	r3, [r5, #0]
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	703b      	strb	r3, [r7, #0]
    252c:	3701      	adds	r7, #1
    252e:	682a      	ldr	r2, [r5, #0]
    2530:	686b      	ldr	r3, [r5, #4]
    2532:	3201      	adds	r2, #1
    2534:	602a      	str	r2, [r5, #0]
    2536:	68a2      	ldr	r2, [r4, #8]
    2538:	3b01      	subs	r3, #1
    253a:	3a01      	subs	r2, #1
    253c:	606b      	str	r3, [r5, #4]
    253e:	60a2      	str	r2, [r4, #8]
    2540:	2a00      	cmp	r2, #0
    2542:	d009      	beq.n	2558 <_scanf_chars+0xa8>
    2544:	2b00      	cmp	r3, #0
    2546:	dcc9      	bgt.n	24dc <_scanf_chars+0x2c>
    2548:	23c0      	movs	r3, #192	; 0xc0
    254a:	005b      	lsls	r3, r3, #1
    254c:	58e3      	ldr	r3, [r4, r3]
    254e:	0029      	movs	r1, r5
    2550:	9801      	ldr	r0, [sp, #4]
    2552:	4798      	blx	r3
    2554:	2800      	cmp	r0, #0
    2556:	d0c1      	beq.n	24dc <_scanf_chars+0x2c>
    2558:	2310      	movs	r3, #16
    255a:	6822      	ldr	r2, [r4, #0]
    255c:	4013      	ands	r3, r2
    255e:	d106      	bne.n	256e <_scanf_chars+0xbe>
    2560:	68e2      	ldr	r2, [r4, #12]
    2562:	3201      	adds	r2, #1
    2564:	60e2      	str	r2, [r4, #12]
    2566:	69a2      	ldr	r2, [r4, #24]
    2568:	2a00      	cmp	r2, #0
    256a:	d000      	beq.n	256e <_scanf_chars+0xbe>
    256c:	703b      	strb	r3, [r7, #0]
    256e:	6923      	ldr	r3, [r4, #16]
    2570:	2000      	movs	r0, #0
    2572:	199e      	adds	r6, r3, r6
    2574:	6126      	str	r6, [r4, #16]
    2576:	e7c7      	b.n	2508 <_scanf_chars+0x58>

00002578 <_scanf_i>:
    2578:	b5f0      	push	{r4, r5, r6, r7, lr}
    257a:	000c      	movs	r4, r1
    257c:	b08d      	sub	sp, #52	; 0x34
    257e:	9302      	str	r3, [sp, #8]
    2580:	4b77      	ldr	r3, [pc, #476]	; (2760 <_scanf_i+0x1e8>)
    2582:	9005      	str	r0, [sp, #20]
    2584:	0016      	movs	r6, r2
    2586:	aa09      	add	r2, sp, #36	; 0x24
    2588:	cb23      	ldmia	r3!, {r0, r1, r5}
    258a:	c223      	stmia	r2!, {r0, r1, r5}
    258c:	4b75      	ldr	r3, [pc, #468]	; (2764 <_scanf_i+0x1ec>)
    258e:	9306      	str	r3, [sp, #24]
    2590:	69a3      	ldr	r3, [r4, #24]
    2592:	2b03      	cmp	r3, #3
    2594:	d001      	beq.n	259a <_scanf_i+0x22>
    2596:	4b74      	ldr	r3, [pc, #464]	; (2768 <_scanf_i+0x1f0>)
    2598:	9306      	str	r3, [sp, #24]
    259a:	22ae      	movs	r2, #174	; 0xae
    259c:	2000      	movs	r0, #0
    259e:	68a3      	ldr	r3, [r4, #8]
    25a0:	0052      	lsls	r2, r2, #1
    25a2:	1e59      	subs	r1, r3, #1
    25a4:	9004      	str	r0, [sp, #16]
    25a6:	4291      	cmp	r1, r2
    25a8:	d905      	bls.n	25b6 <_scanf_i+0x3e>
    25aa:	3b5e      	subs	r3, #94	; 0x5e
    25ac:	3bff      	subs	r3, #255	; 0xff
    25ae:	9304      	str	r3, [sp, #16]
    25b0:	235e      	movs	r3, #94	; 0x5e
    25b2:	33ff      	adds	r3, #255	; 0xff
    25b4:	60a3      	str	r3, [r4, #8]
    25b6:	0023      	movs	r3, r4
    25b8:	331c      	adds	r3, #28
    25ba:	9301      	str	r3, [sp, #4]
    25bc:	23d0      	movs	r3, #208	; 0xd0
    25be:	2700      	movs	r7, #0
    25c0:	6822      	ldr	r2, [r4, #0]
    25c2:	011b      	lsls	r3, r3, #4
    25c4:	4313      	orrs	r3, r2
    25c6:	6023      	str	r3, [r4, #0]
    25c8:	9b01      	ldr	r3, [sp, #4]
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	6833      	ldr	r3, [r6, #0]
    25ce:	a809      	add	r0, sp, #36	; 0x24
    25d0:	7819      	ldrb	r1, [r3, #0]
    25d2:	00bb      	lsls	r3, r7, #2
    25d4:	2202      	movs	r2, #2
    25d6:	5818      	ldr	r0, [r3, r0]
    25d8:	f000 fc5a 	bl	2e90 <memchr>
    25dc:	2800      	cmp	r0, #0
    25de:	d02b      	beq.n	2638 <_scanf_i+0xc0>
    25e0:	2f01      	cmp	r7, #1
    25e2:	d15f      	bne.n	26a4 <_scanf_i+0x12c>
    25e4:	6863      	ldr	r3, [r4, #4]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d106      	bne.n	25f8 <_scanf_i+0x80>
    25ea:	3308      	adds	r3, #8
    25ec:	6822      	ldr	r2, [r4, #0]
    25ee:	6063      	str	r3, [r4, #4]
    25f0:	33f9      	adds	r3, #249	; 0xf9
    25f2:	33ff      	adds	r3, #255	; 0xff
    25f4:	4313      	orrs	r3, r2
    25f6:	6023      	str	r3, [r4, #0]
    25f8:	4b5c      	ldr	r3, [pc, #368]	; (276c <_scanf_i+0x1f4>)
    25fa:	6822      	ldr	r2, [r4, #0]
    25fc:	4013      	ands	r3, r2
    25fe:	6023      	str	r3, [r4, #0]
    2600:	68a3      	ldr	r3, [r4, #8]
    2602:	1e5a      	subs	r2, r3, #1
    2604:	60a2      	str	r2, [r4, #8]
    2606:	2b00      	cmp	r3, #0
    2608:	d016      	beq.n	2638 <_scanf_i+0xc0>
    260a:	9b03      	ldr	r3, [sp, #12]
    260c:	1c5d      	adds	r5, r3, #1
    260e:	6833      	ldr	r3, [r6, #0]
    2610:	1c5a      	adds	r2, r3, #1
    2612:	6032      	str	r2, [r6, #0]
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	9a03      	ldr	r2, [sp, #12]
    2618:	9503      	str	r5, [sp, #12]
    261a:	7013      	strb	r3, [r2, #0]
    261c:	6873      	ldr	r3, [r6, #4]
    261e:	3b01      	subs	r3, #1
    2620:	6073      	str	r3, [r6, #4]
    2622:	2b00      	cmp	r3, #0
    2624:	dc08      	bgt.n	2638 <_scanf_i+0xc0>
    2626:	23c0      	movs	r3, #192	; 0xc0
    2628:	005b      	lsls	r3, r3, #1
    262a:	58e3      	ldr	r3, [r4, r3]
    262c:	0031      	movs	r1, r6
    262e:	9805      	ldr	r0, [sp, #20]
    2630:	9307      	str	r3, [sp, #28]
    2632:	4798      	blx	r3
    2634:	2800      	cmp	r0, #0
    2636:	d17d      	bne.n	2734 <_scanf_i+0x1bc>
    2638:	3701      	adds	r7, #1
    263a:	2f03      	cmp	r7, #3
    263c:	d1c6      	bne.n	25cc <_scanf_i+0x54>
    263e:	6863      	ldr	r3, [r4, #4]
    2640:	2b00      	cmp	r3, #0
    2642:	d101      	bne.n	2648 <_scanf_i+0xd0>
    2644:	330a      	adds	r3, #10
    2646:	6063      	str	r3, [r4, #4]
    2648:	2110      	movs	r1, #16
    264a:	2700      	movs	r7, #0
    264c:	6863      	ldr	r3, [r4, #4]
    264e:	6960      	ldr	r0, [r4, #20]
    2650:	1ac9      	subs	r1, r1, r3
    2652:	4b47      	ldr	r3, [pc, #284]	; (2770 <_scanf_i+0x1f8>)
    2654:	18c9      	adds	r1, r1, r3
    2656:	f000 f93d 	bl	28d4 <__sccl>
    265a:	9d03      	ldr	r5, [sp, #12]
    265c:	68a3      	ldr	r3, [r4, #8]
    265e:	2b00      	cmp	r3, #0
    2660:	d041      	beq.n	26e6 <_scanf_i+0x16e>
    2662:	6832      	ldr	r2, [r6, #0]
    2664:	6960      	ldr	r0, [r4, #20]
    2666:	7811      	ldrb	r1, [r2, #0]
    2668:	5c40      	ldrb	r0, [r0, r1]
    266a:	2800      	cmp	r0, #0
    266c:	d03b      	beq.n	26e6 <_scanf_i+0x16e>
    266e:	2930      	cmp	r1, #48	; 0x30
    2670:	d128      	bne.n	26c4 <_scanf_i+0x14c>
    2672:	2080      	movs	r0, #128	; 0x80
    2674:	6821      	ldr	r1, [r4, #0]
    2676:	0100      	lsls	r0, r0, #4
    2678:	4201      	tst	r1, r0
    267a:	d023      	beq.n	26c4 <_scanf_i+0x14c>
    267c:	9a04      	ldr	r2, [sp, #16]
    267e:	3701      	adds	r7, #1
    2680:	2a00      	cmp	r2, #0
    2682:	d003      	beq.n	268c <_scanf_i+0x114>
    2684:	3a01      	subs	r2, #1
    2686:	3301      	adds	r3, #1
    2688:	9204      	str	r2, [sp, #16]
    268a:	60a3      	str	r3, [r4, #8]
    268c:	6873      	ldr	r3, [r6, #4]
    268e:	3b01      	subs	r3, #1
    2690:	6073      	str	r3, [r6, #4]
    2692:	2b00      	cmp	r3, #0
    2694:	dd1e      	ble.n	26d4 <_scanf_i+0x15c>
    2696:	6833      	ldr	r3, [r6, #0]
    2698:	3301      	adds	r3, #1
    269a:	6033      	str	r3, [r6, #0]
    269c:	68a3      	ldr	r3, [r4, #8]
    269e:	3b01      	subs	r3, #1
    26a0:	60a3      	str	r3, [r4, #8]
    26a2:	e7db      	b.n	265c <_scanf_i+0xe4>
    26a4:	2f02      	cmp	r7, #2
    26a6:	d1ab      	bne.n	2600 <_scanf_i+0x88>
    26a8:	21c0      	movs	r1, #192	; 0xc0
    26aa:	2380      	movs	r3, #128	; 0x80
    26ac:	6822      	ldr	r2, [r4, #0]
    26ae:	00c9      	lsls	r1, r1, #3
    26b0:	4011      	ands	r1, r2
    26b2:	009b      	lsls	r3, r3, #2
    26b4:	4299      	cmp	r1, r3
    26b6:	d1c2      	bne.n	263e <_scanf_i+0xc6>
    26b8:	3bf1      	subs	r3, #241	; 0xf1
    26ba:	3bff      	subs	r3, #255	; 0xff
    26bc:	6063      	str	r3, [r4, #4]
    26be:	33f0      	adds	r3, #240	; 0xf0
    26c0:	4313      	orrs	r3, r2
    26c2:	e79c      	b.n	25fe <_scanf_i+0x86>
    26c4:	6821      	ldr	r1, [r4, #0]
    26c6:	4b2b      	ldr	r3, [pc, #172]	; (2774 <_scanf_i+0x1fc>)
    26c8:	400b      	ands	r3, r1
    26ca:	6023      	str	r3, [r4, #0]
    26cc:	7813      	ldrb	r3, [r2, #0]
    26ce:	702b      	strb	r3, [r5, #0]
    26d0:	3501      	adds	r5, #1
    26d2:	e7db      	b.n	268c <_scanf_i+0x114>
    26d4:	23c0      	movs	r3, #192	; 0xc0
    26d6:	005b      	lsls	r3, r3, #1
    26d8:	58e3      	ldr	r3, [r4, r3]
    26da:	0031      	movs	r1, r6
    26dc:	9805      	ldr	r0, [sp, #20]
    26de:	9303      	str	r3, [sp, #12]
    26e0:	4798      	blx	r3
    26e2:	2800      	cmp	r0, #0
    26e4:	d0da      	beq.n	269c <_scanf_i+0x124>
    26e6:	6823      	ldr	r3, [r4, #0]
    26e8:	05db      	lsls	r3, r3, #23
    26ea:	d50e      	bpl.n	270a <_scanf_i+0x192>
    26ec:	9b01      	ldr	r3, [sp, #4]
    26ee:	429d      	cmp	r5, r3
    26f0:	d907      	bls.n	2702 <_scanf_i+0x18a>
    26f2:	23be      	movs	r3, #190	; 0xbe
    26f4:	3d01      	subs	r5, #1
    26f6:	005b      	lsls	r3, r3, #1
    26f8:	7829      	ldrb	r1, [r5, #0]
    26fa:	58e3      	ldr	r3, [r4, r3]
    26fc:	0032      	movs	r2, r6
    26fe:	9805      	ldr	r0, [sp, #20]
    2700:	4798      	blx	r3
    2702:	9b01      	ldr	r3, [sp, #4]
    2704:	2001      	movs	r0, #1
    2706:	429d      	cmp	r5, r3
    2708:	d027      	beq.n	275a <_scanf_i+0x1e2>
    270a:	2210      	movs	r2, #16
    270c:	6823      	ldr	r3, [r4, #0]
    270e:	401a      	ands	r2, r3
    2710:	d11c      	bne.n	274c <_scanf_i+0x1d4>
    2712:	702a      	strb	r2, [r5, #0]
    2714:	6863      	ldr	r3, [r4, #4]
    2716:	9901      	ldr	r1, [sp, #4]
    2718:	9805      	ldr	r0, [sp, #20]
    271a:	9e06      	ldr	r6, [sp, #24]
    271c:	47b0      	blx	r6
    271e:	9b02      	ldr	r3, [sp, #8]
    2720:	6822      	ldr	r2, [r4, #0]
    2722:	681b      	ldr	r3, [r3, #0]
    2724:	0691      	lsls	r1, r2, #26
    2726:	d507      	bpl.n	2738 <_scanf_i+0x1c0>
    2728:	9902      	ldr	r1, [sp, #8]
    272a:	1d1a      	adds	r2, r3, #4
    272c:	600a      	str	r2, [r1, #0]
    272e:	681b      	ldr	r3, [r3, #0]
    2730:	6018      	str	r0, [r3, #0]
    2732:	e008      	b.n	2746 <_scanf_i+0x1ce>
    2734:	2700      	movs	r7, #0
    2736:	e7d6      	b.n	26e6 <_scanf_i+0x16e>
    2738:	07d1      	lsls	r1, r2, #31
    273a:	d5f5      	bpl.n	2728 <_scanf_i+0x1b0>
    273c:	9902      	ldr	r1, [sp, #8]
    273e:	1d1a      	adds	r2, r3, #4
    2740:	600a      	str	r2, [r1, #0]
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	8018      	strh	r0, [r3, #0]
    2746:	68e3      	ldr	r3, [r4, #12]
    2748:	3301      	adds	r3, #1
    274a:	60e3      	str	r3, [r4, #12]
    274c:	2000      	movs	r0, #0
    274e:	9b01      	ldr	r3, [sp, #4]
    2750:	1aed      	subs	r5, r5, r3
    2752:	6923      	ldr	r3, [r4, #16]
    2754:	19ef      	adds	r7, r5, r7
    2756:	19df      	adds	r7, r3, r7
    2758:	6127      	str	r7, [r4, #16]
    275a:	b00d      	add	sp, #52	; 0x34
    275c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	00003044 	.word	0x00003044
    2764:	00002add 	.word	0x00002add
    2768:	00002c0d 	.word	0x00002c0d
    276c:	fffffaff 	.word	0xfffffaff
    2770:	00003050 	.word	0x00003050
    2774:	fffff6ff 	.word	0xfffff6ff

00002778 <lflush>:
    2778:	2209      	movs	r2, #9
    277a:	b510      	push	{r4, lr}
    277c:	8983      	ldrh	r3, [r0, #12]
    277e:	4013      	ands	r3, r2
    2780:	2200      	movs	r2, #0
    2782:	2b09      	cmp	r3, #9
    2784:	d102      	bne.n	278c <lflush+0x14>
    2786:	f7ff fabf 	bl	1d08 <fflush>
    278a:	0002      	movs	r2, r0
    278c:	0010      	movs	r0, r2
    278e:	bd10      	pop	{r4, pc}

00002790 <__srefill_r>:
    2790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2792:	0005      	movs	r5, r0
    2794:	000c      	movs	r4, r1
    2796:	2800      	cmp	r0, #0
    2798:	d004      	beq.n	27a4 <__srefill_r+0x14>
    279a:	6983      	ldr	r3, [r0, #24]
    279c:	2b00      	cmp	r3, #0
    279e:	d101      	bne.n	27a4 <__srefill_r+0x14>
    27a0:	f7ff fb08 	bl	1db4 <__sinit>
    27a4:	4b3d      	ldr	r3, [pc, #244]	; (289c <__srefill_r+0x10c>)
    27a6:	429c      	cmp	r4, r3
    27a8:	d10a      	bne.n	27c0 <__srefill_r+0x30>
    27aa:	686c      	ldr	r4, [r5, #4]
    27ac:	2300      	movs	r3, #0
    27ae:	6063      	str	r3, [r4, #4]
    27b0:	230c      	movs	r3, #12
    27b2:	5ee2      	ldrsh	r2, [r4, r3]
    27b4:	b293      	uxth	r3, r2
    27b6:	0699      	lsls	r1, r3, #26
    27b8:	d50c      	bpl.n	27d4 <__srefill_r+0x44>
    27ba:	2001      	movs	r0, #1
    27bc:	4240      	negs	r0, r0
    27be:	e068      	b.n	2892 <__srefill_r+0x102>
    27c0:	4b37      	ldr	r3, [pc, #220]	; (28a0 <__srefill_r+0x110>)
    27c2:	429c      	cmp	r4, r3
    27c4:	d101      	bne.n	27ca <__srefill_r+0x3a>
    27c6:	68ac      	ldr	r4, [r5, #8]
    27c8:	e7f0      	b.n	27ac <__srefill_r+0x1c>
    27ca:	4b36      	ldr	r3, [pc, #216]	; (28a4 <__srefill_r+0x114>)
    27cc:	429c      	cmp	r4, r3
    27ce:	d1ed      	bne.n	27ac <__srefill_r+0x1c>
    27d0:	68ec      	ldr	r4, [r5, #12]
    27d2:	e7eb      	b.n	27ac <__srefill_r+0x1c>
    27d4:	0759      	lsls	r1, r3, #29
    27d6:	d44a      	bmi.n	286e <__srefill_r+0xde>
    27d8:	06d9      	lsls	r1, r3, #27
    27da:	d405      	bmi.n	27e8 <__srefill_r+0x58>
    27dc:	2309      	movs	r3, #9
    27de:	602b      	str	r3, [r5, #0]
    27e0:	3337      	adds	r3, #55	; 0x37
    27e2:	4313      	orrs	r3, r2
    27e4:	81a3      	strh	r3, [r4, #12]
    27e6:	e7e8      	b.n	27ba <__srefill_r+0x2a>
    27e8:	2608      	movs	r6, #8
    27ea:	4233      	tst	r3, r6
    27ec:	d00a      	beq.n	2804 <__srefill_r+0x74>
    27ee:	0021      	movs	r1, r4
    27f0:	0028      	movs	r0, r5
    27f2:	f7ff fa5d 	bl	1cb0 <_fflush_r>
    27f6:	2800      	cmp	r0, #0
    27f8:	d1df      	bne.n	27ba <__srefill_r+0x2a>
    27fa:	89a3      	ldrh	r3, [r4, #12]
    27fc:	60a0      	str	r0, [r4, #8]
    27fe:	43b3      	bics	r3, r6
    2800:	81a3      	strh	r3, [r4, #12]
    2802:	61a0      	str	r0, [r4, #24]
    2804:	2304      	movs	r3, #4
    2806:	89a2      	ldrh	r2, [r4, #12]
    2808:	4313      	orrs	r3, r2
    280a:	81a3      	strh	r3, [r4, #12]
    280c:	6923      	ldr	r3, [r4, #16]
    280e:	2b00      	cmp	r3, #0
    2810:	d103      	bne.n	281a <__srefill_r+0x8a>
    2812:	0021      	movs	r1, r4
    2814:	0028      	movs	r0, r5
    2816:	f7ff fba7 	bl	1f68 <__smakebuf_r>
    281a:	230c      	movs	r3, #12
    281c:	5ee7      	ldrsh	r7, [r4, r3]
    281e:	b2be      	uxth	r6, r7
    2820:	07b3      	lsls	r3, r6, #30
    2822:	d00f      	beq.n	2844 <__srefill_r+0xb4>
    2824:	2301      	movs	r3, #1
    2826:	81a3      	strh	r3, [r4, #12]
    2828:	4b1f      	ldr	r3, [pc, #124]	; (28a8 <__srefill_r+0x118>)
    282a:	4920      	ldr	r1, [pc, #128]	; (28ac <__srefill_r+0x11c>)
    282c:	6818      	ldr	r0, [r3, #0]
    282e:	f7ff fb35 	bl	1e9c <_fwalk>
    2832:	2309      	movs	r3, #9
    2834:	81a7      	strh	r7, [r4, #12]
    2836:	401e      	ands	r6, r3
    2838:	429e      	cmp	r6, r3
    283a:	d103      	bne.n	2844 <__srefill_r+0xb4>
    283c:	0021      	movs	r1, r4
    283e:	0028      	movs	r0, r5
    2840:	f7ff f9ac 	bl	1b9c <__sflush_r>
    2844:	6923      	ldr	r3, [r4, #16]
    2846:	6922      	ldr	r2, [r4, #16]
    2848:	6023      	str	r3, [r4, #0]
    284a:	0028      	movs	r0, r5
    284c:	6963      	ldr	r3, [r4, #20]
    284e:	6a21      	ldr	r1, [r4, #32]
    2850:	6a65      	ldr	r5, [r4, #36]	; 0x24
    2852:	47a8      	blx	r5
    2854:	0002      	movs	r2, r0
    2856:	6060      	str	r0, [r4, #4]
    2858:	2000      	movs	r0, #0
    285a:	4282      	cmp	r2, r0
    285c:	dc19      	bgt.n	2892 <__srefill_r+0x102>
    285e:	89a1      	ldrh	r1, [r4, #12]
    2860:	4282      	cmp	r2, r0
    2862:	d117      	bne.n	2894 <__srefill_r+0x104>
    2864:	2320      	movs	r3, #32
    2866:	430b      	orrs	r3, r1
    2868:	81a3      	strh	r3, [r4, #12]
    286a:	3801      	subs	r0, #1
    286c:	e011      	b.n	2892 <__srefill_r+0x102>
    286e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2870:	2900      	cmp	r1, #0
    2872:	d0cb      	beq.n	280c <__srefill_r+0x7c>
    2874:	0023      	movs	r3, r4
    2876:	3344      	adds	r3, #68	; 0x44
    2878:	4299      	cmp	r1, r3
    287a:	d002      	beq.n	2882 <__srefill_r+0xf2>
    287c:	0028      	movs	r0, r5
    287e:	f7ff fbc1 	bl	2004 <_free_r>
    2882:	2000      	movs	r0, #0
    2884:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2886:	6360      	str	r0, [r4, #52]	; 0x34
    2888:	6063      	str	r3, [r4, #4]
    288a:	4283      	cmp	r3, r0
    288c:	d0be      	beq.n	280c <__srefill_r+0x7c>
    288e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2890:	6023      	str	r3, [r4, #0]
    2892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2894:	2340      	movs	r3, #64	; 0x40
    2896:	6060      	str	r0, [r4, #4]
    2898:	430b      	orrs	r3, r1
    289a:	e7a3      	b.n	27e4 <__srefill_r+0x54>
    289c:	00003000 	.word	0x00003000
    28a0:	00003020 	.word	0x00003020
    28a4:	00002fe0 	.word	0x00002fe0
    28a8:	00002fdc 	.word	0x00002fdc
    28ac:	00002779 	.word	0x00002779

000028b0 <_sbrk_r>:
    28b0:	2300      	movs	r3, #0
    28b2:	b570      	push	{r4, r5, r6, lr}
    28b4:	4c06      	ldr	r4, [pc, #24]	; (28d0 <_sbrk_r+0x20>)
    28b6:	0005      	movs	r5, r0
    28b8:	0008      	movs	r0, r1
    28ba:	6023      	str	r3, [r4, #0]
    28bc:	f7fe fd66 	bl	138c <_sbrk>
    28c0:	1c43      	adds	r3, r0, #1
    28c2:	d103      	bne.n	28cc <_sbrk_r+0x1c>
    28c4:	6823      	ldr	r3, [r4, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d000      	beq.n	28cc <_sbrk_r+0x1c>
    28ca:	602b      	str	r3, [r5, #0]
    28cc:	bd70      	pop	{r4, r5, r6, pc}
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	20000298 	.word	0x20000298

000028d4 <__sccl>:
    28d4:	b570      	push	{r4, r5, r6, lr}
    28d6:	780b      	ldrb	r3, [r1, #0]
    28d8:	2b5e      	cmp	r3, #94	; 0x5e
    28da:	d00d      	beq.n	28f8 <__sccl+0x24>
    28dc:	1c4a      	adds	r2, r1, #1
    28de:	2100      	movs	r1, #0
    28e0:	0004      	movs	r4, r0
    28e2:	1c45      	adds	r5, r0, #1
    28e4:	35ff      	adds	r5, #255	; 0xff
    28e6:	7021      	strb	r1, [r4, #0]
    28e8:	3401      	adds	r4, #1
    28ea:	42a5      	cmp	r5, r4
    28ec:	d1fb      	bne.n	28e6 <__sccl+0x12>
    28ee:	2b00      	cmp	r3, #0
    28f0:	d106      	bne.n	2900 <__sccl+0x2c>
    28f2:	3a01      	subs	r2, #1
    28f4:	0010      	movs	r0, r2
    28f6:	bd70      	pop	{r4, r5, r6, pc}
    28f8:	1c8a      	adds	r2, r1, #2
    28fa:	784b      	ldrb	r3, [r1, #1]
    28fc:	2101      	movs	r1, #1
    28fe:	e7ef      	b.n	28e0 <__sccl+0xc>
    2900:	2401      	movs	r4, #1
    2902:	404c      	eors	r4, r1
    2904:	0011      	movs	r1, r2
    2906:	54c4      	strb	r4, [r0, r3]
    2908:	780d      	ldrb	r5, [r1, #0]
    290a:	1c4a      	adds	r2, r1, #1
    290c:	2d2d      	cmp	r5, #45	; 0x2d
    290e:	d007      	beq.n	2920 <__sccl+0x4c>
    2910:	2d5d      	cmp	r5, #93	; 0x5d
    2912:	d0ef      	beq.n	28f4 <__sccl+0x20>
    2914:	2d00      	cmp	r5, #0
    2916:	d101      	bne.n	291c <__sccl+0x48>
    2918:	000a      	movs	r2, r1
    291a:	e7eb      	b.n	28f4 <__sccl+0x20>
    291c:	002b      	movs	r3, r5
    291e:	e7f1      	b.n	2904 <__sccl+0x30>
    2920:	784e      	ldrb	r6, [r1, #1]
    2922:	2e5d      	cmp	r6, #93	; 0x5d
    2924:	d0fa      	beq.n	291c <__sccl+0x48>
    2926:	42b3      	cmp	r3, r6
    2928:	dcf8      	bgt.n	291c <__sccl+0x48>
    292a:	3102      	adds	r1, #2
    292c:	3301      	adds	r3, #1
    292e:	54c4      	strb	r4, [r0, r3]
    2930:	429e      	cmp	r6, r3
    2932:	dcfb      	bgt.n	292c <__sccl+0x58>
    2934:	e7e8      	b.n	2908 <__sccl+0x34>
	...

00002938 <__sread>:
    2938:	b570      	push	{r4, r5, r6, lr}
    293a:	000c      	movs	r4, r1
    293c:	250e      	movs	r5, #14
    293e:	5f49      	ldrsh	r1, [r1, r5]
    2940:	f000 fae2 	bl	2f08 <_read_r>
    2944:	2800      	cmp	r0, #0
    2946:	db03      	blt.n	2950 <__sread+0x18>
    2948:	6d63      	ldr	r3, [r4, #84]	; 0x54
    294a:	181b      	adds	r3, r3, r0
    294c:	6563      	str	r3, [r4, #84]	; 0x54
    294e:	bd70      	pop	{r4, r5, r6, pc}
    2950:	89a3      	ldrh	r3, [r4, #12]
    2952:	4a02      	ldr	r2, [pc, #8]	; (295c <__sread+0x24>)
    2954:	4013      	ands	r3, r2
    2956:	81a3      	strh	r3, [r4, #12]
    2958:	e7f9      	b.n	294e <__sread+0x16>
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	ffffefff 	.word	0xffffefff

00002960 <__swrite>:
    2960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2962:	001f      	movs	r7, r3
    2964:	898b      	ldrh	r3, [r1, #12]
    2966:	0005      	movs	r5, r0
    2968:	000c      	movs	r4, r1
    296a:	0016      	movs	r6, r2
    296c:	05db      	lsls	r3, r3, #23
    296e:	d505      	bpl.n	297c <__swrite+0x1c>
    2970:	230e      	movs	r3, #14
    2972:	5ec9      	ldrsh	r1, [r1, r3]
    2974:	2200      	movs	r2, #0
    2976:	2302      	movs	r3, #2
    2978:	f000 fa64 	bl	2e44 <_lseek_r>
    297c:	89a3      	ldrh	r3, [r4, #12]
    297e:	4a05      	ldr	r2, [pc, #20]	; (2994 <__swrite+0x34>)
    2980:	0028      	movs	r0, r5
    2982:	4013      	ands	r3, r2
    2984:	81a3      	strh	r3, [r4, #12]
    2986:	0032      	movs	r2, r6
    2988:	230e      	movs	r3, #14
    298a:	5ee1      	ldrsh	r1, [r4, r3]
    298c:	003b      	movs	r3, r7
    298e:	f000 f9fd 	bl	2d8c <_write_r>
    2992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2994:	ffffefff 	.word	0xffffefff

00002998 <__sseek>:
    2998:	b570      	push	{r4, r5, r6, lr}
    299a:	000c      	movs	r4, r1
    299c:	250e      	movs	r5, #14
    299e:	5f49      	ldrsh	r1, [r1, r5]
    29a0:	f000 fa50 	bl	2e44 <_lseek_r>
    29a4:	89a3      	ldrh	r3, [r4, #12]
    29a6:	1c42      	adds	r2, r0, #1
    29a8:	d103      	bne.n	29b2 <__sseek+0x1a>
    29aa:	4a05      	ldr	r2, [pc, #20]	; (29c0 <__sseek+0x28>)
    29ac:	4013      	ands	r3, r2
    29ae:	81a3      	strh	r3, [r4, #12]
    29b0:	bd70      	pop	{r4, r5, r6, pc}
    29b2:	2280      	movs	r2, #128	; 0x80
    29b4:	0152      	lsls	r2, r2, #5
    29b6:	4313      	orrs	r3, r2
    29b8:	81a3      	strh	r3, [r4, #12]
    29ba:	6560      	str	r0, [r4, #84]	; 0x54
    29bc:	e7f8      	b.n	29b0 <__sseek+0x18>
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	ffffefff 	.word	0xffffefff

000029c4 <__sclose>:
    29c4:	b510      	push	{r4, lr}
    29c6:	230e      	movs	r3, #14
    29c8:	5ec9      	ldrsh	r1, [r1, r3]
    29ca:	f000 f9f3 	bl	2db4 <_close_r>
    29ce:	bd10      	pop	{r4, pc}

000029d0 <_strtol_l.isra.0>:
    29d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29d2:	001f      	movs	r7, r3
    29d4:	000e      	movs	r6, r1
    29d6:	b087      	sub	sp, #28
    29d8:	9005      	str	r0, [sp, #20]
    29da:	9103      	str	r1, [sp, #12]
    29dc:	9202      	str	r2, [sp, #8]
    29de:	980c      	ldr	r0, [sp, #48]	; 0x30
    29e0:	7834      	ldrb	r4, [r6, #0]
    29e2:	f000 fa1d 	bl	2e20 <__locale_ctype_ptr_l>
    29e6:	2208      	movs	r2, #8
    29e8:	1900      	adds	r0, r0, r4
    29ea:	7843      	ldrb	r3, [r0, #1]
    29ec:	1c75      	adds	r5, r6, #1
    29ee:	4013      	ands	r3, r2
    29f0:	d10c      	bne.n	2a0c <_strtol_l.isra.0+0x3c>
    29f2:	2c2d      	cmp	r4, #45	; 0x2d
    29f4:	d10c      	bne.n	2a10 <_strtol_l.isra.0+0x40>
    29f6:	3301      	adds	r3, #1
    29f8:	782c      	ldrb	r4, [r5, #0]
    29fa:	9301      	str	r3, [sp, #4]
    29fc:	1cb5      	adds	r5, r6, #2
    29fe:	2f00      	cmp	r7, #0
    2a00:	d00c      	beq.n	2a1c <_strtol_l.isra.0+0x4c>
    2a02:	2f10      	cmp	r7, #16
    2a04:	d114      	bne.n	2a30 <_strtol_l.isra.0+0x60>
    2a06:	2c30      	cmp	r4, #48	; 0x30
    2a08:	d00a      	beq.n	2a20 <_strtol_l.isra.0+0x50>
    2a0a:	e011      	b.n	2a30 <_strtol_l.isra.0+0x60>
    2a0c:	002e      	movs	r6, r5
    2a0e:	e7e6      	b.n	29de <_strtol_l.isra.0+0xe>
    2a10:	9301      	str	r3, [sp, #4]
    2a12:	2c2b      	cmp	r4, #43	; 0x2b
    2a14:	d1f3      	bne.n	29fe <_strtol_l.isra.0+0x2e>
    2a16:	782c      	ldrb	r4, [r5, #0]
    2a18:	1cb5      	adds	r5, r6, #2
    2a1a:	e7f0      	b.n	29fe <_strtol_l.isra.0+0x2e>
    2a1c:	2c30      	cmp	r4, #48	; 0x30
    2a1e:	d12f      	bne.n	2a80 <_strtol_l.isra.0+0xb0>
    2a20:	2220      	movs	r2, #32
    2a22:	782b      	ldrb	r3, [r5, #0]
    2a24:	4393      	bics	r3, r2
    2a26:	2b58      	cmp	r3, #88	; 0x58
    2a28:	d151      	bne.n	2ace <_strtol_l.isra.0+0xfe>
    2a2a:	2710      	movs	r7, #16
    2a2c:	786c      	ldrb	r4, [r5, #1]
    2a2e:	3502      	adds	r5, #2
    2a30:	9b01      	ldr	r3, [sp, #4]
    2a32:	4a29      	ldr	r2, [pc, #164]	; (2ad8 <_strtol_l.isra.0+0x108>)
    2a34:	0039      	movs	r1, r7
    2a36:	189e      	adds	r6, r3, r2
    2a38:	0030      	movs	r0, r6
    2a3a:	f7fe fe4d 	bl	16d8 <__aeabi_uidivmod>
    2a3e:	0030      	movs	r0, r6
    2a40:	9104      	str	r1, [sp, #16]
    2a42:	0039      	movs	r1, r7
    2a44:	f7fe fdc2 	bl	15cc <__udivsi3>
    2a48:	2101      	movs	r1, #1
    2a4a:	2300      	movs	r3, #0
    2a4c:	4249      	negs	r1, r1
    2a4e:	0002      	movs	r2, r0
    2a50:	468c      	mov	ip, r1
    2a52:	0018      	movs	r0, r3
    2a54:	0021      	movs	r1, r4
    2a56:	3930      	subs	r1, #48	; 0x30
    2a58:	2909      	cmp	r1, #9
    2a5a:	d813      	bhi.n	2a84 <_strtol_l.isra.0+0xb4>
    2a5c:	000c      	movs	r4, r1
    2a5e:	42a7      	cmp	r7, r4
    2a60:	dd1c      	ble.n	2a9c <_strtol_l.isra.0+0xcc>
    2a62:	1c59      	adds	r1, r3, #1
    2a64:	d009      	beq.n	2a7a <_strtol_l.isra.0+0xaa>
    2a66:	4663      	mov	r3, ip
    2a68:	4282      	cmp	r2, r0
    2a6a:	d306      	bcc.n	2a7a <_strtol_l.isra.0+0xaa>
    2a6c:	d102      	bne.n	2a74 <_strtol_l.isra.0+0xa4>
    2a6e:	9904      	ldr	r1, [sp, #16]
    2a70:	42a1      	cmp	r1, r4
    2a72:	db02      	blt.n	2a7a <_strtol_l.isra.0+0xaa>
    2a74:	2301      	movs	r3, #1
    2a76:	4378      	muls	r0, r7
    2a78:	1820      	adds	r0, r4, r0
    2a7a:	782c      	ldrb	r4, [r5, #0]
    2a7c:	3501      	adds	r5, #1
    2a7e:	e7e9      	b.n	2a54 <_strtol_l.isra.0+0x84>
    2a80:	270a      	movs	r7, #10
    2a82:	e7d5      	b.n	2a30 <_strtol_l.isra.0+0x60>
    2a84:	0021      	movs	r1, r4
    2a86:	3941      	subs	r1, #65	; 0x41
    2a88:	2919      	cmp	r1, #25
    2a8a:	d801      	bhi.n	2a90 <_strtol_l.isra.0+0xc0>
    2a8c:	3c37      	subs	r4, #55	; 0x37
    2a8e:	e7e6      	b.n	2a5e <_strtol_l.isra.0+0x8e>
    2a90:	0021      	movs	r1, r4
    2a92:	3961      	subs	r1, #97	; 0x61
    2a94:	2919      	cmp	r1, #25
    2a96:	d801      	bhi.n	2a9c <_strtol_l.isra.0+0xcc>
    2a98:	3c57      	subs	r4, #87	; 0x57
    2a9a:	e7e0      	b.n	2a5e <_strtol_l.isra.0+0x8e>
    2a9c:	1c5a      	adds	r2, r3, #1
    2a9e:	d108      	bne.n	2ab2 <_strtol_l.isra.0+0xe2>
    2aa0:	9a05      	ldr	r2, [sp, #20]
    2aa2:	3323      	adds	r3, #35	; 0x23
    2aa4:	6013      	str	r3, [r2, #0]
    2aa6:	9b02      	ldr	r3, [sp, #8]
    2aa8:	0030      	movs	r0, r6
    2aaa:	2b00      	cmp	r3, #0
    2aac:	d10b      	bne.n	2ac6 <_strtol_l.isra.0+0xf6>
    2aae:	b007      	add	sp, #28
    2ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ab2:	9a01      	ldr	r2, [sp, #4]
    2ab4:	2a00      	cmp	r2, #0
    2ab6:	d000      	beq.n	2aba <_strtol_l.isra.0+0xea>
    2ab8:	4240      	negs	r0, r0
    2aba:	9a02      	ldr	r2, [sp, #8]
    2abc:	2a00      	cmp	r2, #0
    2abe:	d0f6      	beq.n	2aae <_strtol_l.isra.0+0xde>
    2ac0:	9a03      	ldr	r2, [sp, #12]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d000      	beq.n	2ac8 <_strtol_l.isra.0+0xf8>
    2ac6:	1e6a      	subs	r2, r5, #1
    2ac8:	9b02      	ldr	r3, [sp, #8]
    2aca:	601a      	str	r2, [r3, #0]
    2acc:	e7ef      	b.n	2aae <_strtol_l.isra.0+0xde>
    2ace:	2430      	movs	r4, #48	; 0x30
    2ad0:	2f00      	cmp	r7, #0
    2ad2:	d1ad      	bne.n	2a30 <_strtol_l.isra.0+0x60>
    2ad4:	3708      	adds	r7, #8
    2ad6:	e7ab      	b.n	2a30 <_strtol_l.isra.0+0x60>
    2ad8:	7fffffff 	.word	0x7fffffff

00002adc <_strtol_r>:
    2adc:	b513      	push	{r0, r1, r4, lr}
    2ade:	4c05      	ldr	r4, [pc, #20]	; (2af4 <_strtol_r+0x18>)
    2ae0:	6824      	ldr	r4, [r4, #0]
    2ae2:	6a24      	ldr	r4, [r4, #32]
    2ae4:	2c00      	cmp	r4, #0
    2ae6:	d100      	bne.n	2aea <_strtol_r+0xe>
    2ae8:	4c03      	ldr	r4, [pc, #12]	; (2af8 <_strtol_r+0x1c>)
    2aea:	9400      	str	r4, [sp, #0]
    2aec:	f7ff ff70 	bl	29d0 <_strtol_l.isra.0>
    2af0:	bd16      	pop	{r1, r2, r4, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	20000004 	.word	0x20000004
    2af8:	20000068 	.word	0x20000068

00002afc <_strtoul_l.isra.0>:
    2afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afe:	001f      	movs	r7, r3
    2b00:	000e      	movs	r6, r1
    2b02:	b087      	sub	sp, #28
    2b04:	9005      	str	r0, [sp, #20]
    2b06:	9103      	str	r1, [sp, #12]
    2b08:	9201      	str	r2, [sp, #4]
    2b0a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b0c:	7834      	ldrb	r4, [r6, #0]
    2b0e:	f000 f987 	bl	2e20 <__locale_ctype_ptr_l>
    2b12:	2208      	movs	r2, #8
    2b14:	1900      	adds	r0, r0, r4
    2b16:	7843      	ldrb	r3, [r0, #1]
    2b18:	1c75      	adds	r5, r6, #1
    2b1a:	4013      	ands	r3, r2
    2b1c:	d10c      	bne.n	2b38 <_strtoul_l.isra.0+0x3c>
    2b1e:	2c2d      	cmp	r4, #45	; 0x2d
    2b20:	d10c      	bne.n	2b3c <_strtoul_l.isra.0+0x40>
    2b22:	3301      	adds	r3, #1
    2b24:	782c      	ldrb	r4, [r5, #0]
    2b26:	9302      	str	r3, [sp, #8]
    2b28:	1cb5      	adds	r5, r6, #2
    2b2a:	2f00      	cmp	r7, #0
    2b2c:	d00c      	beq.n	2b48 <_strtoul_l.isra.0+0x4c>
    2b2e:	2f10      	cmp	r7, #16
    2b30:	d114      	bne.n	2b5c <_strtoul_l.isra.0+0x60>
    2b32:	2c30      	cmp	r4, #48	; 0x30
    2b34:	d00a      	beq.n	2b4c <_strtoul_l.isra.0+0x50>
    2b36:	e011      	b.n	2b5c <_strtoul_l.isra.0+0x60>
    2b38:	002e      	movs	r6, r5
    2b3a:	e7e6      	b.n	2b0a <_strtoul_l.isra.0+0xe>
    2b3c:	9302      	str	r3, [sp, #8]
    2b3e:	2c2b      	cmp	r4, #43	; 0x2b
    2b40:	d1f3      	bne.n	2b2a <_strtoul_l.isra.0+0x2e>
    2b42:	782c      	ldrb	r4, [r5, #0]
    2b44:	1cb5      	adds	r5, r6, #2
    2b46:	e7f0      	b.n	2b2a <_strtoul_l.isra.0+0x2e>
    2b48:	2c30      	cmp	r4, #48	; 0x30
    2b4a:	d12f      	bne.n	2bac <_strtoul_l.isra.0+0xb0>
    2b4c:	2220      	movs	r2, #32
    2b4e:	782b      	ldrb	r3, [r5, #0]
    2b50:	4393      	bics	r3, r2
    2b52:	2b58      	cmp	r3, #88	; 0x58
    2b54:	d154      	bne.n	2c00 <_strtoul_l.isra.0+0x104>
    2b56:	2710      	movs	r7, #16
    2b58:	786c      	ldrb	r4, [r5, #1]
    2b5a:	3502      	adds	r5, #2
    2b5c:	2001      	movs	r0, #1
    2b5e:	0039      	movs	r1, r7
    2b60:	4240      	negs	r0, r0
    2b62:	f7fe fd33 	bl	15cc <__udivsi3>
    2b66:	0006      	movs	r6, r0
    2b68:	2001      	movs	r0, #1
    2b6a:	0039      	movs	r1, r7
    2b6c:	4240      	negs	r0, r0
    2b6e:	f7fe fdb3 	bl	16d8 <__aeabi_uidivmod>
    2b72:	2300      	movs	r3, #0
    2b74:	9104      	str	r1, [sp, #16]
    2b76:	2101      	movs	r1, #1
    2b78:	2201      	movs	r2, #1
    2b7a:	0018      	movs	r0, r3
    2b7c:	468c      	mov	ip, r1
    2b7e:	4252      	negs	r2, r2
    2b80:	0021      	movs	r1, r4
    2b82:	3930      	subs	r1, #48	; 0x30
    2b84:	2909      	cmp	r1, #9
    2b86:	d813      	bhi.n	2bb0 <_strtoul_l.isra.0+0xb4>
    2b88:	000c      	movs	r4, r1
    2b8a:	42a7      	cmp	r7, r4
    2b8c:	dd1e      	ble.n	2bcc <_strtoul_l.isra.0+0xd0>
    2b8e:	2b00      	cmp	r3, #0
    2b90:	db1a      	blt.n	2bc8 <_strtoul_l.isra.0+0xcc>
    2b92:	0013      	movs	r3, r2
    2b94:	4286      	cmp	r6, r0
    2b96:	d306      	bcc.n	2ba6 <_strtoul_l.isra.0+0xaa>
    2b98:	d102      	bne.n	2ba0 <_strtoul_l.isra.0+0xa4>
    2b9a:	9904      	ldr	r1, [sp, #16]
    2b9c:	42a1      	cmp	r1, r4
    2b9e:	db02      	blt.n	2ba6 <_strtoul_l.isra.0+0xaa>
    2ba0:	4663      	mov	r3, ip
    2ba2:	4378      	muls	r0, r7
    2ba4:	1820      	adds	r0, r4, r0
    2ba6:	782c      	ldrb	r4, [r5, #0]
    2ba8:	3501      	adds	r5, #1
    2baa:	e7e9      	b.n	2b80 <_strtoul_l.isra.0+0x84>
    2bac:	270a      	movs	r7, #10
    2bae:	e7d5      	b.n	2b5c <_strtoul_l.isra.0+0x60>
    2bb0:	0021      	movs	r1, r4
    2bb2:	3941      	subs	r1, #65	; 0x41
    2bb4:	2919      	cmp	r1, #25
    2bb6:	d801      	bhi.n	2bbc <_strtoul_l.isra.0+0xc0>
    2bb8:	3c37      	subs	r4, #55	; 0x37
    2bba:	e7e6      	b.n	2b8a <_strtoul_l.isra.0+0x8e>
    2bbc:	0021      	movs	r1, r4
    2bbe:	3961      	subs	r1, #97	; 0x61
    2bc0:	2919      	cmp	r1, #25
    2bc2:	d803      	bhi.n	2bcc <_strtoul_l.isra.0+0xd0>
    2bc4:	3c57      	subs	r4, #87	; 0x57
    2bc6:	e7e0      	b.n	2b8a <_strtoul_l.isra.0+0x8e>
    2bc8:	0013      	movs	r3, r2
    2bca:	e7ec      	b.n	2ba6 <_strtoul_l.isra.0+0xaa>
    2bcc:	2b00      	cmp	r3, #0
    2bce:	da09      	bge.n	2be4 <_strtoul_l.isra.0+0xe8>
    2bd0:	2322      	movs	r3, #34	; 0x22
    2bd2:	2001      	movs	r0, #1
    2bd4:	9a05      	ldr	r2, [sp, #20]
    2bd6:	4240      	negs	r0, r0
    2bd8:	6013      	str	r3, [r2, #0]
    2bda:	9b01      	ldr	r3, [sp, #4]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d10b      	bne.n	2bf8 <_strtoul_l.isra.0+0xfc>
    2be0:	b007      	add	sp, #28
    2be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2be4:	9a02      	ldr	r2, [sp, #8]
    2be6:	2a00      	cmp	r2, #0
    2be8:	d000      	beq.n	2bec <_strtoul_l.isra.0+0xf0>
    2bea:	4240      	negs	r0, r0
    2bec:	9a01      	ldr	r2, [sp, #4]
    2bee:	2a00      	cmp	r2, #0
    2bf0:	d0f6      	beq.n	2be0 <_strtoul_l.isra.0+0xe4>
    2bf2:	9a03      	ldr	r2, [sp, #12]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d000      	beq.n	2bfa <_strtoul_l.isra.0+0xfe>
    2bf8:	1e6a      	subs	r2, r5, #1
    2bfa:	9b01      	ldr	r3, [sp, #4]
    2bfc:	601a      	str	r2, [r3, #0]
    2bfe:	e7ef      	b.n	2be0 <_strtoul_l.isra.0+0xe4>
    2c00:	2430      	movs	r4, #48	; 0x30
    2c02:	2f00      	cmp	r7, #0
    2c04:	d1aa      	bne.n	2b5c <_strtoul_l.isra.0+0x60>
    2c06:	3708      	adds	r7, #8
    2c08:	e7a8      	b.n	2b5c <_strtoul_l.isra.0+0x60>
	...

00002c0c <_strtoul_r>:
    2c0c:	b513      	push	{r0, r1, r4, lr}
    2c0e:	4c05      	ldr	r4, [pc, #20]	; (2c24 <_strtoul_r+0x18>)
    2c10:	6824      	ldr	r4, [r4, #0]
    2c12:	6a24      	ldr	r4, [r4, #32]
    2c14:	2c00      	cmp	r4, #0
    2c16:	d100      	bne.n	2c1a <_strtoul_r+0xe>
    2c18:	4c03      	ldr	r4, [pc, #12]	; (2c28 <_strtoul_r+0x1c>)
    2c1a:	9400      	str	r4, [sp, #0]
    2c1c:	f7ff ff6e 	bl	2afc <_strtoul_l.isra.0>
    2c20:	bd16      	pop	{r1, r2, r4, pc}
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	20000004 	.word	0x20000004
    2c28:	20000068 	.word	0x20000068

00002c2c <__submore>:
    2c2c:	000b      	movs	r3, r1
    2c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c30:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    2c32:	3344      	adds	r3, #68	; 0x44
    2c34:	000c      	movs	r4, r1
    2c36:	429d      	cmp	r5, r3
    2c38:	d11c      	bne.n	2c74 <__submore+0x48>
    2c3a:	2680      	movs	r6, #128	; 0x80
    2c3c:	00f6      	lsls	r6, r6, #3
    2c3e:	0031      	movs	r1, r6
    2c40:	f7ff fa2a 	bl	2098 <_malloc_r>
    2c44:	2800      	cmp	r0, #0
    2c46:	d102      	bne.n	2c4e <__submore+0x22>
    2c48:	2001      	movs	r0, #1
    2c4a:	4240      	negs	r0, r0
    2c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2c4e:	0023      	movs	r3, r4
    2c50:	6360      	str	r0, [r4, #52]	; 0x34
    2c52:	63a6      	str	r6, [r4, #56]	; 0x38
    2c54:	3346      	adds	r3, #70	; 0x46
    2c56:	781a      	ldrb	r2, [r3, #0]
    2c58:	4b10      	ldr	r3, [pc, #64]	; (2c9c <__submore+0x70>)
    2c5a:	54c2      	strb	r2, [r0, r3]
    2c5c:	0023      	movs	r3, r4
    2c5e:	3345      	adds	r3, #69	; 0x45
    2c60:	781a      	ldrb	r2, [r3, #0]
    2c62:	4b0f      	ldr	r3, [pc, #60]	; (2ca0 <__submore+0x74>)
    2c64:	54c2      	strb	r2, [r0, r3]
    2c66:	782a      	ldrb	r2, [r5, #0]
    2c68:	4b0e      	ldr	r3, [pc, #56]	; (2ca4 <__submore+0x78>)
    2c6a:	54c2      	strb	r2, [r0, r3]
    2c6c:	18c0      	adds	r0, r0, r3
    2c6e:	6020      	str	r0, [r4, #0]
    2c70:	2000      	movs	r0, #0
    2c72:	e7eb      	b.n	2c4c <__submore+0x20>
    2c74:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    2c76:	0029      	movs	r1, r5
    2c78:	0073      	lsls	r3, r6, #1
    2c7a:	001a      	movs	r2, r3
    2c7c:	9301      	str	r3, [sp, #4]
    2c7e:	f000 f91d 	bl	2ebc <_realloc_r>
    2c82:	1e05      	subs	r5, r0, #0
    2c84:	d0e0      	beq.n	2c48 <__submore+0x1c>
    2c86:	1987      	adds	r7, r0, r6
    2c88:	0001      	movs	r1, r0
    2c8a:	0032      	movs	r2, r6
    2c8c:	0038      	movs	r0, r7
    2c8e:	f000 f90a 	bl	2ea6 <memcpy>
    2c92:	9b01      	ldr	r3, [sp, #4]
    2c94:	6027      	str	r7, [r4, #0]
    2c96:	6365      	str	r5, [r4, #52]	; 0x34
    2c98:	63a3      	str	r3, [r4, #56]	; 0x38
    2c9a:	e7e9      	b.n	2c70 <__submore+0x44>
    2c9c:	000003ff 	.word	0x000003ff
    2ca0:	000003fe 	.word	0x000003fe
    2ca4:	000003fd 	.word	0x000003fd

00002ca8 <_ungetc_r>:
    2ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2caa:	0005      	movs	r5, r0
    2cac:	000e      	movs	r6, r1
    2cae:	0014      	movs	r4, r2
    2cb0:	1c4b      	adds	r3, r1, #1
    2cb2:	d103      	bne.n	2cbc <_ungetc_r+0x14>
    2cb4:	2601      	movs	r6, #1
    2cb6:	4276      	negs	r6, r6
    2cb8:	0030      	movs	r0, r6
    2cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cbc:	2800      	cmp	r0, #0
    2cbe:	d004      	beq.n	2cca <_ungetc_r+0x22>
    2cc0:	6983      	ldr	r3, [r0, #24]
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d101      	bne.n	2cca <_ungetc_r+0x22>
    2cc6:	f7ff f875 	bl	1db4 <__sinit>
    2cca:	4b2d      	ldr	r3, [pc, #180]	; (2d80 <_ungetc_r+0xd8>)
    2ccc:	429c      	cmp	r4, r3
    2cce:	d12d      	bne.n	2d2c <_ungetc_r+0x84>
    2cd0:	686c      	ldr	r4, [r5, #4]
    2cd2:	2220      	movs	r2, #32
    2cd4:	89a3      	ldrh	r3, [r4, #12]
    2cd6:	4393      	bics	r3, r2
    2cd8:	b21b      	sxth	r3, r3
    2cda:	81a3      	strh	r3, [r4, #12]
    2cdc:	b29b      	uxth	r3, r3
    2cde:	075a      	lsls	r2, r3, #29
    2ce0:	d413      	bmi.n	2d0a <_ungetc_r+0x62>
    2ce2:	06da      	lsls	r2, r3, #27
    2ce4:	d5e6      	bpl.n	2cb4 <_ungetc_r+0xc>
    2ce6:	2708      	movs	r7, #8
    2ce8:	423b      	tst	r3, r7
    2cea:	d00a      	beq.n	2d02 <_ungetc_r+0x5a>
    2cec:	0021      	movs	r1, r4
    2cee:	0028      	movs	r0, r5
    2cf0:	f7fe ffde 	bl	1cb0 <_fflush_r>
    2cf4:	2800      	cmp	r0, #0
    2cf6:	d1dd      	bne.n	2cb4 <_ungetc_r+0xc>
    2cf8:	89a3      	ldrh	r3, [r4, #12]
    2cfa:	60a0      	str	r0, [r4, #8]
    2cfc:	43bb      	bics	r3, r7
    2cfe:	81a3      	strh	r3, [r4, #12]
    2d00:	61a0      	str	r0, [r4, #24]
    2d02:	2304      	movs	r3, #4
    2d04:	89a2      	ldrh	r2, [r4, #12]
    2d06:	4313      	orrs	r3, r2
    2d08:	81a3      	strh	r3, [r4, #12]
    2d0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2d0c:	b2f7      	uxtb	r7, r6
    2d0e:	6863      	ldr	r3, [r4, #4]
    2d10:	b2f6      	uxtb	r6, r6
    2d12:	2a00      	cmp	r2, #0
    2d14:	d01b      	beq.n	2d4e <_ungetc_r+0xa6>
    2d16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2d18:	4293      	cmp	r3, r2
    2d1a:	da11      	bge.n	2d40 <_ungetc_r+0x98>
    2d1c:	6823      	ldr	r3, [r4, #0]
    2d1e:	3b01      	subs	r3, #1
    2d20:	6023      	str	r3, [r4, #0]
    2d22:	701f      	strb	r7, [r3, #0]
    2d24:	6863      	ldr	r3, [r4, #4]
    2d26:	3301      	adds	r3, #1
    2d28:	6063      	str	r3, [r4, #4]
    2d2a:	e7c5      	b.n	2cb8 <_ungetc_r+0x10>
    2d2c:	4b15      	ldr	r3, [pc, #84]	; (2d84 <_ungetc_r+0xdc>)
    2d2e:	429c      	cmp	r4, r3
    2d30:	d101      	bne.n	2d36 <_ungetc_r+0x8e>
    2d32:	68ac      	ldr	r4, [r5, #8]
    2d34:	e7cd      	b.n	2cd2 <_ungetc_r+0x2a>
    2d36:	4b14      	ldr	r3, [pc, #80]	; (2d88 <_ungetc_r+0xe0>)
    2d38:	429c      	cmp	r4, r3
    2d3a:	d1ca      	bne.n	2cd2 <_ungetc_r+0x2a>
    2d3c:	68ec      	ldr	r4, [r5, #12]
    2d3e:	e7c8      	b.n	2cd2 <_ungetc_r+0x2a>
    2d40:	0021      	movs	r1, r4
    2d42:	0028      	movs	r0, r5
    2d44:	f7ff ff72 	bl	2c2c <__submore>
    2d48:	2800      	cmp	r0, #0
    2d4a:	d0e7      	beq.n	2d1c <_ungetc_r+0x74>
    2d4c:	e7b2      	b.n	2cb4 <_ungetc_r+0xc>
    2d4e:	6921      	ldr	r1, [r4, #16]
    2d50:	6822      	ldr	r2, [r4, #0]
    2d52:	2900      	cmp	r1, #0
    2d54:	d007      	beq.n	2d66 <_ungetc_r+0xbe>
    2d56:	4291      	cmp	r1, r2
    2d58:	d205      	bcs.n	2d66 <_ungetc_r+0xbe>
    2d5a:	1e51      	subs	r1, r2, #1
    2d5c:	7808      	ldrb	r0, [r1, #0]
    2d5e:	4286      	cmp	r6, r0
    2d60:	d101      	bne.n	2d66 <_ungetc_r+0xbe>
    2d62:	6021      	str	r1, [r4, #0]
    2d64:	e7df      	b.n	2d26 <_ungetc_r+0x7e>
    2d66:	6423      	str	r3, [r4, #64]	; 0x40
    2d68:	0023      	movs	r3, r4
    2d6a:	3344      	adds	r3, #68	; 0x44
    2d6c:	6363      	str	r3, [r4, #52]	; 0x34
    2d6e:	2303      	movs	r3, #3
    2d70:	63a3      	str	r3, [r4, #56]	; 0x38
    2d72:	0023      	movs	r3, r4
    2d74:	3346      	adds	r3, #70	; 0x46
    2d76:	63e2      	str	r2, [r4, #60]	; 0x3c
    2d78:	701f      	strb	r7, [r3, #0]
    2d7a:	6023      	str	r3, [r4, #0]
    2d7c:	2301      	movs	r3, #1
    2d7e:	e7d3      	b.n	2d28 <_ungetc_r+0x80>
    2d80:	00003000 	.word	0x00003000
    2d84:	00003020 	.word	0x00003020
    2d88:	00002fe0 	.word	0x00002fe0

00002d8c <_write_r>:
    2d8c:	b570      	push	{r4, r5, r6, lr}
    2d8e:	0005      	movs	r5, r0
    2d90:	0008      	movs	r0, r1
    2d92:	0011      	movs	r1, r2
    2d94:	2200      	movs	r2, #0
    2d96:	4c06      	ldr	r4, [pc, #24]	; (2db0 <_write_r+0x24>)
    2d98:	6022      	str	r2, [r4, #0]
    2d9a:	001a      	movs	r2, r3
    2d9c:	f7fe face 	bl	133c <_write>
    2da0:	1c43      	adds	r3, r0, #1
    2da2:	d103      	bne.n	2dac <_write_r+0x20>
    2da4:	6823      	ldr	r3, [r4, #0]
    2da6:	2b00      	cmp	r3, #0
    2da8:	d000      	beq.n	2dac <_write_r+0x20>
    2daa:	602b      	str	r3, [r5, #0]
    2dac:	bd70      	pop	{r4, r5, r6, pc}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	20000298 	.word	0x20000298

00002db4 <_close_r>:
    2db4:	2300      	movs	r3, #0
    2db6:	b570      	push	{r4, r5, r6, lr}
    2db8:	4c06      	ldr	r4, [pc, #24]	; (2dd4 <_close_r+0x20>)
    2dba:	0005      	movs	r5, r0
    2dbc:	0008      	movs	r0, r1
    2dbe:	6023      	str	r3, [r4, #0]
    2dc0:	f7fe faf6 	bl	13b0 <_close>
    2dc4:	1c43      	adds	r3, r0, #1
    2dc6:	d103      	bne.n	2dd0 <_close_r+0x1c>
    2dc8:	6823      	ldr	r3, [r4, #0]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d000      	beq.n	2dd0 <_close_r+0x1c>
    2dce:	602b      	str	r3, [r5, #0]
    2dd0:	bd70      	pop	{r4, r5, r6, pc}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	20000298 	.word	0x20000298

00002dd8 <_fstat_r>:
    2dd8:	2300      	movs	r3, #0
    2dda:	b570      	push	{r4, r5, r6, lr}
    2ddc:	4c06      	ldr	r4, [pc, #24]	; (2df8 <_fstat_r+0x20>)
    2dde:	0005      	movs	r5, r0
    2de0:	0008      	movs	r0, r1
    2de2:	0011      	movs	r1, r2
    2de4:	6023      	str	r3, [r4, #0]
    2de6:	f7fe fae6 	bl	13b6 <_fstat>
    2dea:	1c43      	adds	r3, r0, #1
    2dec:	d103      	bne.n	2df6 <_fstat_r+0x1e>
    2dee:	6823      	ldr	r3, [r4, #0]
    2df0:	2b00      	cmp	r3, #0
    2df2:	d000      	beq.n	2df6 <_fstat_r+0x1e>
    2df4:	602b      	str	r3, [r5, #0]
    2df6:	bd70      	pop	{r4, r5, r6, pc}
    2df8:	20000298 	.word	0x20000298

00002dfc <_isatty_r>:
    2dfc:	2300      	movs	r3, #0
    2dfe:	b570      	push	{r4, r5, r6, lr}
    2e00:	4c06      	ldr	r4, [pc, #24]	; (2e1c <_isatty_r+0x20>)
    2e02:	0005      	movs	r5, r0
    2e04:	0008      	movs	r0, r1
    2e06:	6023      	str	r3, [r4, #0]
    2e08:	f7fe fada 	bl	13c0 <_isatty>
    2e0c:	1c43      	adds	r3, r0, #1
    2e0e:	d103      	bne.n	2e18 <_isatty_r+0x1c>
    2e10:	6823      	ldr	r3, [r4, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d000      	beq.n	2e18 <_isatty_r+0x1c>
    2e16:	602b      	str	r3, [r5, #0]
    2e18:	bd70      	pop	{r4, r5, r6, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	20000298 	.word	0x20000298

00002e20 <__locale_ctype_ptr_l>:
    2e20:	30ec      	adds	r0, #236	; 0xec
    2e22:	6800      	ldr	r0, [r0, #0]
    2e24:	4770      	bx	lr
	...

00002e28 <__locale_ctype_ptr>:
    2e28:	4b04      	ldr	r3, [pc, #16]	; (2e3c <__locale_ctype_ptr+0x14>)
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	6a1b      	ldr	r3, [r3, #32]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d100      	bne.n	2e34 <__locale_ctype_ptr+0xc>
    2e32:	4b03      	ldr	r3, [pc, #12]	; (2e40 <__locale_ctype_ptr+0x18>)
    2e34:	33ec      	adds	r3, #236	; 0xec
    2e36:	6818      	ldr	r0, [r3, #0]
    2e38:	4770      	bx	lr
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	20000004 	.word	0x20000004
    2e40:	20000068 	.word	0x20000068

00002e44 <_lseek_r>:
    2e44:	b570      	push	{r4, r5, r6, lr}
    2e46:	0005      	movs	r5, r0
    2e48:	0008      	movs	r0, r1
    2e4a:	0011      	movs	r1, r2
    2e4c:	2200      	movs	r2, #0
    2e4e:	4c06      	ldr	r4, [pc, #24]	; (2e68 <_lseek_r+0x24>)
    2e50:	6022      	str	r2, [r4, #0]
    2e52:	001a      	movs	r2, r3
    2e54:	f7fe fab6 	bl	13c4 <_lseek>
    2e58:	1c43      	adds	r3, r0, #1
    2e5a:	d103      	bne.n	2e64 <_lseek_r+0x20>
    2e5c:	6823      	ldr	r3, [r4, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d000      	beq.n	2e64 <_lseek_r+0x20>
    2e62:	602b      	str	r3, [r5, #0]
    2e64:	bd70      	pop	{r4, r5, r6, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	20000298 	.word	0x20000298

00002e6c <__ascii_mbtowc>:
    2e6c:	b082      	sub	sp, #8
    2e6e:	2900      	cmp	r1, #0
    2e70:	d100      	bne.n	2e74 <__ascii_mbtowc+0x8>
    2e72:	a901      	add	r1, sp, #4
    2e74:	1e10      	subs	r0, r2, #0
    2e76:	d006      	beq.n	2e86 <__ascii_mbtowc+0x1a>
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d006      	beq.n	2e8a <__ascii_mbtowc+0x1e>
    2e7c:	7813      	ldrb	r3, [r2, #0]
    2e7e:	600b      	str	r3, [r1, #0]
    2e80:	7810      	ldrb	r0, [r2, #0]
    2e82:	1e43      	subs	r3, r0, #1
    2e84:	4198      	sbcs	r0, r3
    2e86:	b002      	add	sp, #8
    2e88:	4770      	bx	lr
    2e8a:	2002      	movs	r0, #2
    2e8c:	4240      	negs	r0, r0
    2e8e:	e7fa      	b.n	2e86 <__ascii_mbtowc+0x1a>

00002e90 <memchr>:
    2e90:	b2c9      	uxtb	r1, r1
    2e92:	1882      	adds	r2, r0, r2
    2e94:	4290      	cmp	r0, r2
    2e96:	d101      	bne.n	2e9c <memchr+0xc>
    2e98:	2000      	movs	r0, #0
    2e9a:	4770      	bx	lr
    2e9c:	7803      	ldrb	r3, [r0, #0]
    2e9e:	428b      	cmp	r3, r1
    2ea0:	d0fb      	beq.n	2e9a <memchr+0xa>
    2ea2:	3001      	adds	r0, #1
    2ea4:	e7f6      	b.n	2e94 <memchr+0x4>

00002ea6 <memcpy>:
    2ea6:	2300      	movs	r3, #0
    2ea8:	b510      	push	{r4, lr}
    2eaa:	429a      	cmp	r2, r3
    2eac:	d100      	bne.n	2eb0 <memcpy+0xa>
    2eae:	bd10      	pop	{r4, pc}
    2eb0:	5ccc      	ldrb	r4, [r1, r3]
    2eb2:	54c4      	strb	r4, [r0, r3]
    2eb4:	3301      	adds	r3, #1
    2eb6:	e7f8      	b.n	2eaa <memcpy+0x4>

00002eb8 <__malloc_lock>:
    2eb8:	4770      	bx	lr

00002eba <__malloc_unlock>:
    2eba:	4770      	bx	lr

00002ebc <_realloc_r>:
    2ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ebe:	0007      	movs	r7, r0
    2ec0:	000d      	movs	r5, r1
    2ec2:	0016      	movs	r6, r2
    2ec4:	2900      	cmp	r1, #0
    2ec6:	d105      	bne.n	2ed4 <_realloc_r+0x18>
    2ec8:	0011      	movs	r1, r2
    2eca:	f7ff f8e5 	bl	2098 <_malloc_r>
    2ece:	0004      	movs	r4, r0
    2ed0:	0020      	movs	r0, r4
    2ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed4:	2a00      	cmp	r2, #0
    2ed6:	d103      	bne.n	2ee0 <_realloc_r+0x24>
    2ed8:	f7ff f894 	bl	2004 <_free_r>
    2edc:	0034      	movs	r4, r6
    2ede:	e7f7      	b.n	2ed0 <_realloc_r+0x14>
    2ee0:	f000 f832 	bl	2f48 <_malloc_usable_size_r>
    2ee4:	002c      	movs	r4, r5
    2ee6:	4286      	cmp	r6, r0
    2ee8:	d9f2      	bls.n	2ed0 <_realloc_r+0x14>
    2eea:	0031      	movs	r1, r6
    2eec:	0038      	movs	r0, r7
    2eee:	f7ff f8d3 	bl	2098 <_malloc_r>
    2ef2:	1e04      	subs	r4, r0, #0
    2ef4:	d0ec      	beq.n	2ed0 <_realloc_r+0x14>
    2ef6:	0029      	movs	r1, r5
    2ef8:	0032      	movs	r2, r6
    2efa:	f7ff ffd4 	bl	2ea6 <memcpy>
    2efe:	0029      	movs	r1, r5
    2f00:	0038      	movs	r0, r7
    2f02:	f7ff f87f 	bl	2004 <_free_r>
    2f06:	e7e3      	b.n	2ed0 <_realloc_r+0x14>

00002f08 <_read_r>:
    2f08:	b570      	push	{r4, r5, r6, lr}
    2f0a:	0005      	movs	r5, r0
    2f0c:	0008      	movs	r0, r1
    2f0e:	0011      	movs	r1, r2
    2f10:	2200      	movs	r2, #0
    2f12:	4c06      	ldr	r4, [pc, #24]	; (2f2c <_read_r+0x24>)
    2f14:	6022      	str	r2, [r4, #0]
    2f16:	001a      	movs	r2, r3
    2f18:	f7fe f9ee 	bl	12f8 <_read>
    2f1c:	1c43      	adds	r3, r0, #1
    2f1e:	d103      	bne.n	2f28 <_read_r+0x20>
    2f20:	6823      	ldr	r3, [r4, #0]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d000      	beq.n	2f28 <_read_r+0x20>
    2f26:	602b      	str	r3, [r5, #0]
    2f28:	bd70      	pop	{r4, r5, r6, pc}
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	20000298 	.word	0x20000298

00002f30 <__ascii_wctomb>:
    2f30:	1e0b      	subs	r3, r1, #0
    2f32:	d004      	beq.n	2f3e <__ascii_wctomb+0xe>
    2f34:	2aff      	cmp	r2, #255	; 0xff
    2f36:	d904      	bls.n	2f42 <__ascii_wctomb+0x12>
    2f38:	238a      	movs	r3, #138	; 0x8a
    2f3a:	6003      	str	r3, [r0, #0]
    2f3c:	3b8b      	subs	r3, #139	; 0x8b
    2f3e:	0018      	movs	r0, r3
    2f40:	4770      	bx	lr
    2f42:	700a      	strb	r2, [r1, #0]
    2f44:	2301      	movs	r3, #1
    2f46:	e7fa      	b.n	2f3e <__ascii_wctomb+0xe>

00002f48 <_malloc_usable_size_r>:
    2f48:	1f0b      	subs	r3, r1, #4
    2f4a:	681b      	ldr	r3, [r3, #0]
    2f4c:	1f18      	subs	r0, r3, #4
    2f4e:	2b00      	cmp	r3, #0
    2f50:	da01      	bge.n	2f56 <_malloc_usable_size_r+0xe>
    2f52:	580b      	ldr	r3, [r1, r0]
    2f54:	18c0      	adds	r0, r0, r3
    2f56:	4770      	bx	lr
    2f58:	42000800 	.word	0x42000800
    2f5c:	42000c00 	.word	0x42000c00
    2f60:	42001000 	.word	0x42001000
    2f64:	42001400 	.word	0x42001400
    2f68:	42001800 	.word	0x42001800
    2f6c:	42001c00 	.word	0x42001c00
    2f70:	00000c86 	.word	0x00000c86
    2f74:	00000c82 	.word	0x00000c82
    2f78:	00000c82 	.word	0x00000c82
    2f7c:	00000ce4 	.word	0x00000ce4
    2f80:	00000ce4 	.word	0x00000ce4
    2f84:	00000c9a 	.word	0x00000c9a
    2f88:	00000c8c 	.word	0x00000c8c
    2f8c:	00000ca0 	.word	0x00000ca0
    2f90:	00000cd2 	.word	0x00000cd2
    2f94:	00000d6c 	.word	0x00000d6c
    2f98:	00000d4c 	.word	0x00000d4c
    2f9c:	00000d4c 	.word	0x00000d4c
    2fa0:	00000dd8 	.word	0x00000dd8
    2fa4:	00000d5e 	.word	0x00000d5e
    2fa8:	00000d7a 	.word	0x00000d7a
    2fac:	00000d50 	.word	0x00000d50
    2fb0:	00000d88 	.word	0x00000d88
    2fb4:	00000dc8 	.word	0x00000dc8
    2fb8:	66206948 	.word	0x66206948
    2fbc:	206d6f72 	.word	0x206d6f72
    2fc0:	6e697270 	.word	0x6e697270
    2fc4:	00216674 	.word	0x00216674
    2fc8:	00007325 	.word	0x00007325
    2fcc:	6c6c6548 	.word	0x6c6c6548
    2fd0:	6f57206f 	.word	0x6f57206f
    2fd4:	21646c72 	.word	0x21646c72
    2fd8:	00000a0d 	.word	0x00000a0d

00002fdc <_global_impure_ptr>:
    2fdc:	20000008                                ... 

00002fe0 <__sf_fake_stderr>:
	...

00003000 <__sf_fake_stdin>:
	...

00003020 <__sf_fake_stdout>:
	...
    3040:	004c6c68 00003062 00003065 00003068     hlL.b0..e0..h0..
    3050:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    3060:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    3070:	2e005849 20200000                                IX...

00003075 <_ctype_>:
    3075:	20202000 20202020 28282020 20282828     .         ((((( 
    3085:	20202020 20202020 20202020 20202020                     
    3095:	10108820 10101010 10101010 10101010      ...............
    30a5:	04040410 04040404 10040404 10101010     ................
    30b5:	41411010 41414141 01010101 01010101     ..AAAAAA........
    30c5:	01010101 01010101 01010101 10101010     ................
    30d5:	42421010 42424242 02020202 02020202     ..BBBBBB........
    30e5:	02020202 02020202 02020202 10101010     ................
    30f5:	00000020 00000000 00000000 00000000      ...............
	...

00003178 <_init>:
    3178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    317e:	bc08      	pop	{r3}
    3180:	469e      	mov	lr, r3
    3182:	4770      	bx	lr

00003184 <__init_array_start>:
    3184:	000000dd 	.word	0x000000dd

00003188 <_fini>:
    3188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    318e:	bc08      	pop	{r3}
    3190:	469e      	mov	lr, r3
    3192:	4770      	bx	lr

00003194 <__fini_array_start>:
    3194:	000000b5 	.word	0x000000b5
