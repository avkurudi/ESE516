
roadwatcher_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003268  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00003268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  20000070  000032d8  00020070  2**2
                  ALLOC
  3 .stack        00002004  2000017c  000033e4  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028626  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000394a  00000000  00000000  00048717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000590  00000000  00000000  0004c061  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000630  00000000  00000000  0004c5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00019dbc  00000000  00000000  0004cc21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c31f  00000000  00000000  000669dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00087735  00000000  00000000  00072cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001548  00000000  00000000  000fa434  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000579d  00000000  00000000  000fb97c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 21 00 20 15 19 00 00 11 19 00 00 11 19 00 00     .!. ............
	...
      2c:	11 19 00 00 00 00 00 00 00 00 00 00 11 19 00 00     ................
      3c:	11 19 00 00 11 19 00 00 11 19 00 00 11 19 00 00     ................
      4c:	11 19 00 00 11 19 00 00 11 19 00 00 11 19 00 00     ................
      5c:	11 19 00 00 11 19 00 00 2d 0d 00 00 3d 0d 00 00     ........-...=...
      6c:	4d 0d 00 00 5d 0d 00 00 6d 0d 00 00 7d 0d 00 00     M...]...m...}...
      7c:	11 19 00 00 11 19 00 00 11 19 00 00 11 19 00 00     ................
      8c:	11 19 00 00 11 19 00 00 00 00 00 00 00 00 00 00     ................
      9c:	11 19 00 00 11 19 00 00 11 19 00 00 11 19 00 00     ................
      ac:	11 19 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00003268 	.word	0x00003268

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00003268 	.word	0x00003268
     10c:	00003268 	.word	0x00003268
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     114:	4770      	bx	lr
	...

00000118 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     118:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     11a:	2000      	movs	r0, #0
     11c:	4b08      	ldr	r3, [pc, #32]	; (140 <delay_init+0x28>)
     11e:	4798      	blx	r3
     120:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     122:	4c08      	ldr	r4, [pc, #32]	; (144 <delay_init+0x2c>)
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b07      	ldr	r3, [pc, #28]	; (148 <delay_init+0x30>)
     12c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12e:	4907      	ldr	r1, [pc, #28]	; (14c <delay_init+0x34>)
     130:	0028      	movs	r0, r5
     132:	47a0      	blx	r4
     134:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x38>)
     136:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     138:	2205      	movs	r2, #5
     13a:	4b06      	ldr	r3, [pc, #24]	; (154 <delay_init+0x3c>)
     13c:	601a      	str	r2, [r3, #0]
}
     13e:	bd70      	pop	{r4, r5, r6, pc}
     140:	000016a1 	.word	0x000016a1
     144:	00001dd1 	.word	0x00001dd1
     148:	20000000 	.word	0x20000000
     14c:	000f4240 	.word	0x000f4240
     150:	20000004 	.word	0x20000004
     154:	e000e010 	.word	0xe000e010

00000158 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     158:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     15a:	4b08      	ldr	r3, [pc, #32]	; (17c <delay_cycles_ms+0x24>)
     15c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15e:	4a08      	ldr	r2, [pc, #32]	; (180 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     160:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     162:	2180      	movs	r1, #128	; 0x80
     164:	0249      	lsls	r1, r1, #9
	while (n--) {
     166:	3801      	subs	r0, #1
     168:	d307      	bcc.n	17a <delay_cycles_ms+0x22>
	if (n > 0) {
     16a:	2c00      	cmp	r4, #0
     16c:	d0fb      	beq.n	166 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     170:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     172:	6813      	ldr	r3, [r2, #0]
     174:	420b      	tst	r3, r1
     176:	d0fc      	beq.n	172 <delay_cycles_ms+0x1a>
     178:	e7f5      	b.n	166 <delay_cycles_ms+0xe>
	}
}
     17a:	bd30      	pop	{r4, r5, pc}
     17c:	20000000 	.word	0x20000000
     180:	e000e010 	.word	0xe000e010

00000184 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     184:	4b0c      	ldr	r3, [pc, #48]	; (1b8 <cpu_irq_enter_critical+0x34>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	2b00      	cmp	r3, #0
     18a:	d106      	bne.n	19a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     18c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     190:	2b00      	cmp	r3, #0
     192:	d007      	beq.n	1a4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     194:	2200      	movs	r2, #0
     196:	4b09      	ldr	r3, [pc, #36]	; (1bc <cpu_irq_enter_critical+0x38>)
     198:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     19a:	4a07      	ldr	r2, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x34>)
     19c:	6813      	ldr	r3, [r2, #0]
     19e:	3301      	adds	r3, #1
     1a0:	6013      	str	r3, [r2, #0]
}
     1a2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1aa:	2200      	movs	r2, #0
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <cpu_irq_enter_critical+0x3c>)
     1ae:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1b0:	3201      	adds	r2, #1
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <cpu_irq_enter_critical+0x38>)
     1b4:	701a      	strb	r2, [r3, #0]
     1b6:	e7f0      	b.n	19a <cpu_irq_enter_critical+0x16>
     1b8:	2000008c 	.word	0x2000008c
     1bc:	20000090 	.word	0x20000090
     1c0:	20000008 	.word	0x20000008

000001c4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c4:	4b08      	ldr	r3, [pc, #32]	; (1e8 <cpu_irq_leave_critical+0x24>)
     1c6:	681a      	ldr	r2, [r3, #0]
     1c8:	3a01      	subs	r2, #1
     1ca:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1cc:	681b      	ldr	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	d109      	bne.n	1e6 <cpu_irq_leave_critical+0x22>
     1d2:	4b06      	ldr	r3, [pc, #24]	; (1ec <cpu_irq_leave_critical+0x28>)
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	2b00      	cmp	r3, #0
     1d8:	d005      	beq.n	1e6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1da:	2201      	movs	r2, #1
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <cpu_irq_leave_critical+0x2c>)
     1de:	701a      	strb	r2, [r3, #0]
     1e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e4:	b662      	cpsie	i
	}
}
     1e6:	4770      	bx	lr
     1e8:	2000008c 	.word	0x2000008c
     1ec:	20000090 	.word	0x20000090
     1f0:	20000008 	.word	0x20000008

000001f4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1f4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1f6:	2207      	movs	r2, #7
     1f8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     1fa:	421a      	tst	r2, r3
     1fc:	d1fc      	bne.n	1f8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     1fe:	4770      	bx	lr

00000200 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     200:	b5f0      	push	{r4, r5, r6, r7, lr}
     202:	46ce      	mov	lr, r9
     204:	4647      	mov	r7, r8
     206:	b580      	push	{r7, lr}
     208:	b083      	sub	sp, #12
     20a:	0007      	movs	r7, r0
     20c:	000d      	movs	r5, r1
     20e:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     210:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     212:	0008      	movs	r0, r1
     214:	4b6f      	ldr	r3, [pc, #444]	; (3d4 <i2c_master_init+0x1d4>)
     216:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     218:	4a6f      	ldr	r2, [pc, #444]	; (3d8 <i2c_master_init+0x1d8>)
     21a:	6a11      	ldr	r1, [r2, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     21c:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     21e:	2301      	movs	r3, #1
     220:	40a3      	lsls	r3, r4
     222:	430b      	orrs	r3, r1
     224:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     226:	a901      	add	r1, sp, #4
     228:	7b33      	ldrb	r3, [r6, #12]
     22a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     22c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     22e:	b2c4      	uxtb	r4, r0
     230:	0020      	movs	r0, r4
     232:	4b6a      	ldr	r3, [pc, #424]	; (3dc <i2c_master_init+0x1dc>)
     234:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     236:	0020      	movs	r0, r4
     238:	4b69      	ldr	r3, [pc, #420]	; (3e0 <i2c_master_init+0x1e0>)
     23a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     23c:	7b30      	ldrb	r0, [r6, #12]
     23e:	2100      	movs	r1, #0
     240:	4b68      	ldr	r3, [pc, #416]	; (3e4 <i2c_master_init+0x1e4>)
     242:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     244:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     246:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     248:	079b      	lsls	r3, r3, #30
     24a:	d504      	bpl.n	256 <i2c_master_init+0x56>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     24c:	b003      	add	sp, #12
     24e:	bc0c      	pop	{r2, r3}
     250:	4690      	mov	r8, r2
     252:	4699      	mov	r9, r3
     254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     256:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     258:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     25a:	07db      	lsls	r3, r3, #31
     25c:	d4f6      	bmi.n	24c <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     25e:	6838      	ldr	r0, [r7, #0]
     260:	4b5c      	ldr	r3, [pc, #368]	; (3d4 <i2c_master_init+0x1d4>)
     262:	4698      	mov	r8, r3
     264:	4798      	blx	r3
     266:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     268:	495f      	ldr	r1, [pc, #380]	; (3e8 <i2c_master_init+0x1e8>)
     26a:	4b60      	ldr	r3, [pc, #384]	; (3ec <i2c_master_init+0x1ec>)
     26c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     26e:	00a4      	lsls	r4, r4, #2
     270:	4b5f      	ldr	r3, [pc, #380]	; (3f0 <i2c_master_init+0x1f0>)
     272:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     274:	2300      	movs	r3, #0
     276:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     278:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     27a:	2200      	movs	r2, #0
     27c:	4691      	mov	r9, r2
     27e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     280:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     282:	2225      	movs	r2, #37	; 0x25
     284:	4649      	mov	r1, r9
     286:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     288:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     28a:	3314      	adds	r3, #20
     28c:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     28e:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     290:	0020      	movs	r0, r4
     292:	47c0      	blx	r8
     294:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     296:	2380      	movs	r3, #128	; 0x80
     298:	466a      	mov	r2, sp
     29a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     29c:	466b      	mov	r3, sp
     29e:	464a      	mov	r2, r9
     2a0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2a2:	2301      	movs	r3, #1
     2a4:	466a      	mov	r2, sp
     2a6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     2a8:	466b      	mov	r3, sp
     2aa:	464a      	mov	r2, r9
     2ac:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2ae:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     2b0:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2b2:	2800      	cmp	r0, #0
     2b4:	d06b      	beq.n	38e <i2c_master_init+0x18e>
	pin_conf.mux_position = pad0 & 0xFFFF;
     2b6:	466b      	mov	r3, sp
     2b8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2ba:	2302      	movs	r3, #2
     2bc:	466a      	mov	r2, sp
     2be:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2c0:	0c00      	lsrs	r0, r0, #16
     2c2:	b2c0      	uxtb	r0, r0
     2c4:	4669      	mov	r1, sp
     2c6:	4b4b      	ldr	r3, [pc, #300]	; (3f4 <i2c_master_init+0x1f4>)
     2c8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2ca:	2d00      	cmp	r5, #0
     2cc:	d064      	beq.n	398 <i2c_master_init+0x198>
	pin_conf.mux_position = pad1 & 0xFFFF;
     2ce:	466b      	mov	r3, sp
     2d0:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2d2:	2302      	movs	r3, #2
     2d4:	466a      	mov	r2, sp
     2d6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     2d8:	0c28      	lsrs	r0, r5, #16
     2da:	b2c0      	uxtb	r0, r0
     2dc:	4669      	mov	r1, sp
     2de:	4b45      	ldr	r3, [pc, #276]	; (3f4 <i2c_master_init+0x1f4>)
     2e0:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2e2:	8ab3      	ldrh	r3, [r6, #20]
     2e4:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     2e6:	8af3      	ldrh	r3, [r6, #22]
     2e8:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     2ea:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2ec:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2ee:	2b00      	cmp	r3, #0
     2f0:	d104      	bne.n	2fc <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2f2:	4b41      	ldr	r3, [pc, #260]	; (3f8 <i2c_master_init+0x1f8>)
     2f4:	789b      	ldrb	r3, [r3, #2]
     2f6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2f8:	0fdb      	lsrs	r3, r3, #31
     2fa:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2fc:	6933      	ldr	r3, [r6, #16]
     2fe:	68b1      	ldr	r1, [r6, #8]
     300:	430b      	orrs	r3, r1
     302:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     304:	2224      	movs	r2, #36	; 0x24
     306:	5cb2      	ldrb	r2, [r6, r2]
     308:	2a00      	cmp	r2, #0
     30a:	d002      	beq.n	312 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     30c:	2280      	movs	r2, #128	; 0x80
     30e:	05d2      	lsls	r2, r2, #23
     310:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     312:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     314:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit) {
     316:	222c      	movs	r2, #44	; 0x2c
     318:	5cb2      	ldrb	r2, [r6, r2]
     31a:	2a00      	cmp	r2, #0
     31c:	d002      	beq.n	324 <i2c_master_init+0x124>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     31e:	2280      	movs	r2, #128	; 0x80
     320:	0512      	lsls	r2, r2, #20
     322:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     324:	222d      	movs	r2, #45	; 0x2d
     326:	5cb2      	ldrb	r2, [r6, r2]
     328:	2a00      	cmp	r2, #0
     32a:	d002      	beq.n	332 <i2c_master_init+0x132>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     32c:	2280      	movs	r2, #128	; 0x80
     32e:	0412      	lsls	r2, r2, #16
     330:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     332:	222e      	movs	r2, #46	; 0x2e
     334:	5cb2      	ldrb	r2, [r6, r2]
     336:	2a00      	cmp	r2, #0
     338:	d002      	beq.n	340 <i2c_master_init+0x140>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     33a:	2280      	movs	r2, #128	; 0x80
     33c:	03d2      	lsls	r2, r2, #15
     33e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     340:	6822      	ldr	r2, [r4, #0]
     342:	4313      	orrs	r3, r2
     344:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     346:	2380      	movs	r3, #128	; 0x80
     348:	005b      	lsls	r3, r3, #1
     34a:	6063      	str	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     34c:	4645      	mov	r5, r8
     34e:	3514      	adds	r5, #20
     350:	b2eb      	uxtb	r3, r5
     352:	4698      	mov	r8, r3
     354:	0018      	movs	r0, r3
     356:	4b29      	ldr	r3, [pc, #164]	; (3fc <i2c_master_init+0x1fc>)
     358:	4798      	blx	r3
     35a:	0007      	movs	r7, r0
	uint32_t fscl        = 1000*config->baud_rate;
     35c:	20fa      	movs	r0, #250	; 0xfa
     35e:	0080      	lsls	r0, r0, #2
     360:	6833      	ldr	r3, [r6, #0]
     362:	4343      	muls	r3, r0
     364:	4699      	mov	r9, r3
	int32_t  denominator = 2*fscl;
     366:	005d      	lsls	r5, r3, #1
	uint32_t trise       = config->sda_scl_rise_time_ns;
     368:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     36a:	4378      	muls	r0, r7
     36c:	4924      	ldr	r1, [pc, #144]	; (400 <i2c_master_init+0x200>)
     36e:	4b25      	ldr	r3, [pc, #148]	; (404 <i2c_master_init+0x204>)
     370:	4798      	blx	r3
     372:	300a      	adds	r0, #10
     374:	464b      	mov	r3, r9
     376:	4358      	muls	r0, r3
     378:	1a38      	subs	r0, r7, r0
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
     37a:	1940      	adds	r0, r0, r5
     37c:	3801      	subs	r0, #1
     37e:	0029      	movs	r1, r5
     380:	4b21      	ldr	r3, [pc, #132]	; (408 <i2c_master_init+0x208>)
     382:	4798      	blx	r3
     384:	0007      	movs	r7, r0
	if (tmp_baud > 255 || tmp_baud < 0) {
     386:	28ff      	cmp	r0, #255	; 0xff
     388:	d90c      	bls.n	3a4 <i2c_master_init+0x1a4>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     38a:	2040      	movs	r0, #64	; 0x40
     38c:	e75e      	b.n	24c <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     38e:	2100      	movs	r1, #0
     390:	0020      	movs	r0, r4
     392:	4b1e      	ldr	r3, [pc, #120]	; (40c <i2c_master_init+0x20c>)
     394:	4798      	blx	r3
     396:	e78e      	b.n	2b6 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     398:	2101      	movs	r1, #1
     39a:	0020      	movs	r0, r4
     39c:	4b1b      	ldr	r3, [pc, #108]	; (40c <i2c_master_init+0x20c>)
     39e:	4798      	blx	r3
     3a0:	0005      	movs	r5, r0
     3a2:	e794      	b.n	2ce <i2c_master_init+0xce>
		tmp_baud_hs = (int32_t)(div_ceil(
     3a4:	4640      	mov	r0, r8
     3a6:	4b15      	ldr	r3, [pc, #84]	; (3fc <i2c_master_init+0x1fc>)
     3a8:	4798      	blx	r3
     3aa:	6873      	ldr	r3, [r6, #4]
     3ac:	21fa      	movs	r1, #250	; 0xfa
     3ae:	00c9      	lsls	r1, r1, #3
     3b0:	4359      	muls	r1, r3
     3b2:	1e4b      	subs	r3, r1, #1
     3b4:	1818      	adds	r0, r3, r0
     3b6:	4b13      	ldr	r3, [pc, #76]	; (404 <i2c_master_init+0x204>)
     3b8:	4798      	blx	r3
				(2000*(config->baud_rate_high_speed))) - 1);
     3ba:	3801      	subs	r0, #1
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3bc:	28ff      	cmp	r0, #255	; 0xff
     3be:	d8e4      	bhi.n	38a <i2c_master_init+0x18a>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     3c0:	0400      	lsls	r0, r0, #16
     3c2:	23ff      	movs	r3, #255	; 0xff
     3c4:	041b      	lsls	r3, r3, #16
     3c6:	4018      	ands	r0, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3c8:	23ff      	movs	r3, #255	; 0xff
     3ca:	403b      	ands	r3, r7
     3cc:	4318      	orrs	r0, r3
     3ce:	60e0      	str	r0, [r4, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3d0:	2000      	movs	r0, #0
     3d2:	e73b      	b.n	24c <i2c_master_init+0x4c>
     3d4:	00000c85 	.word	0x00000c85
     3d8:	40000400 	.word	0x40000400
     3dc:	000017b9 	.word	0x000017b9
     3e0:	0000172d 	.word	0x0000172d
     3e4:	00000ac1 	.word	0x00000ac1
     3e8:	0000075d 	.word	0x0000075d
     3ec:	00000cc1 	.word	0x00000cc1
     3f0:	200000d8 	.word	0x200000d8
     3f4:	000018b1 	.word	0x000018b1
     3f8:	41002000 	.word	0x41002000
     3fc:	000017d5 	.word	0x000017d5
     400:	3b9aca00 	.word	0x3b9aca00
     404:	00001dd1 	.word	0x00001dd1
     408:	00001ee5 	.word	0x00001ee5
     40c:	00000b0d 	.word	0x00000b0d

00000410 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     410:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     412:	7e1a      	ldrb	r2, [r3, #24]
     414:	0792      	lsls	r2, r2, #30
     416:	d507      	bpl.n	428 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     418:	2202      	movs	r2, #2
     41a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     41c:	8b5b      	ldrh	r3, [r3, #26]
     41e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     420:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     422:	17db      	asrs	r3, r3, #31
     424:	4018      	ands	r0, r3
}
     426:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     428:	8b5a      	ldrh	r2, [r3, #26]
     42a:	0752      	lsls	r2, r2, #29
     42c:	d506      	bpl.n	43c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     42e:	6859      	ldr	r1, [r3, #4]
     430:	22c0      	movs	r2, #192	; 0xc0
     432:	0292      	lsls	r2, r2, #10
     434:	430a      	orrs	r2, r1
     436:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     438:	2018      	movs	r0, #24
     43a:	e7f4      	b.n	426 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     43c:	2000      	movs	r0, #0
     43e:	e7f2      	b.n	426 <_i2c_master_address_response+0x16>

00000440 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     440:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     442:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     444:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     446:	2401      	movs	r4, #1
     448:	2502      	movs	r5, #2
     44a:	7e11      	ldrb	r1, [r2, #24]
     44c:	4221      	tst	r1, r4
     44e:	d10b      	bne.n	468 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     450:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     452:	4229      	tst	r1, r5
     454:	d106      	bne.n	464 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     456:	3301      	adds	r3, #1
     458:	b29b      	uxth	r3, r3
     45a:	8901      	ldrh	r1, [r0, #8]
     45c:	4299      	cmp	r1, r3
     45e:	d8f4      	bhi.n	44a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     460:	2012      	movs	r0, #18
     462:	e002      	b.n	46a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     464:	2000      	movs	r0, #0
     466:	e000      	b.n	46a <_i2c_master_wait_for_bus+0x2a>
     468:	2000      	movs	r0, #0
}
     46a:	bd30      	pop	{r4, r5, pc}

0000046c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     46c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     46e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     470:	6862      	ldr	r2, [r4, #4]
     472:	2380      	movs	r3, #128	; 0x80
     474:	02db      	lsls	r3, r3, #11
     476:	4313      	orrs	r3, r2
     478:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     47a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     47c:	4b02      	ldr	r3, [pc, #8]	; (488 <_i2c_master_send_hs_master_code+0x1c>)
     47e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     480:	2301      	movs	r3, #1
     482:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     484:	bd10      	pop	{r4, pc}
     486:	46c0      	nop			; (mov r8, r8)
     488:	00000441 	.word	0x00000441

0000048c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     48c:	b5f0      	push	{r4, r5, r6, r7, lr}
     48e:	46de      	mov	lr, fp
     490:	4657      	mov	r7, sl
     492:	464e      	mov	r6, r9
     494:	4645      	mov	r5, r8
     496:	b5e0      	push	{r5, r6, r7, lr}
     498:	b083      	sub	sp, #12
     49a:	0006      	movs	r6, r0
     49c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     49e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     4a0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     4a2:	4b32      	ldr	r3, [pc, #200]	; (56c <_i2c_master_write_packet+0xe0>)
     4a4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     4a6:	7a7b      	ldrb	r3, [r7, #9]
     4a8:	2b00      	cmp	r3, #0
     4aa:	d11d      	bne.n	4e8 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4ac:	686b      	ldr	r3, [r5, #4]
     4ae:	4a30      	ldr	r2, [pc, #192]	; (570 <_i2c_master_write_packet+0xe4>)
     4b0:	4013      	ands	r3, r2
     4b2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     4b4:	7a3b      	ldrb	r3, [r7, #8]
     4b6:	2b00      	cmp	r3, #0
     4b8:	d01b      	beq.n	4f2 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     4ba:	883b      	ldrh	r3, [r7, #0]
     4bc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     4be:	7a7a      	ldrb	r2, [r7, #9]
     4c0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     4c2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     4c4:	2280      	movs	r2, #128	; 0x80
     4c6:	0212      	lsls	r2, r2, #8
     4c8:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     4ca:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4cc:	0030      	movs	r0, r6
     4ce:	4b29      	ldr	r3, [pc, #164]	; (574 <_i2c_master_write_packet+0xe8>)
     4d0:	4798      	blx	r3
     4d2:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4d4:	2800      	cmp	r0, #0
     4d6:	d013      	beq.n	500 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     4d8:	9801      	ldr	r0, [sp, #4]
     4da:	b003      	add	sp, #12
     4dc:	bc3c      	pop	{r2, r3, r4, r5}
     4de:	4690      	mov	r8, r2
     4e0:	4699      	mov	r9, r3
     4e2:	46a2      	mov	sl, r4
     4e4:	46ab      	mov	fp, r5
     4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     4e8:	7ab9      	ldrb	r1, [r7, #10]
     4ea:	0030      	movs	r0, r6
     4ec:	4b22      	ldr	r3, [pc, #136]	; (578 <_i2c_master_write_packet+0xec>)
     4ee:	4798      	blx	r3
     4f0:	e7dc      	b.n	4ac <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     4f2:	883b      	ldrh	r3, [r7, #0]
     4f4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4f6:	7a7a      	ldrb	r2, [r7, #9]
     4f8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     4fa:	4313      	orrs	r3, r2
     4fc:	626b      	str	r3, [r5, #36]	; 0x24
     4fe:	e7e5      	b.n	4cc <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     500:	0030      	movs	r0, r6
     502:	4b1e      	ldr	r3, [pc, #120]	; (57c <_i2c_master_write_packet+0xf0>)
     504:	4798      	blx	r3
     506:	1e03      	subs	r3, r0, #0
     508:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     50a:	d1e5      	bne.n	4d8 <_i2c_master_write_packet+0x4c>
     50c:	46a0      	mov	r8, r4
     50e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     510:	3320      	adds	r3, #32
     512:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     514:	4b15      	ldr	r3, [pc, #84]	; (56c <_i2c_master_write_packet+0xe0>)
     516:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     518:	4b16      	ldr	r3, [pc, #88]	; (574 <_i2c_master_write_packet+0xe8>)
     51a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     51c:	4544      	cmp	r4, r8
     51e:	d015      	beq.n	54c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     520:	8b6b      	ldrh	r3, [r5, #26]
     522:	464a      	mov	r2, r9
     524:	4213      	tst	r3, r2
     526:	d01d      	beq.n	564 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     528:	0030      	movs	r0, r6
     52a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	5d1a      	ldrb	r2, [r3, r4]
     530:	2328      	movs	r3, #40	; 0x28
     532:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     534:	0030      	movs	r0, r6
     536:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     538:	2800      	cmp	r0, #0
     53a:	d106      	bne.n	54a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     53c:	8b6b      	ldrh	r3, [r5, #26]
     53e:	3401      	adds	r4, #1
     540:	075b      	lsls	r3, r3, #29
     542:	d5eb      	bpl.n	51c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     544:	231e      	movs	r3, #30
     546:	9301      	str	r3, [sp, #4]
     548:	e000      	b.n	54c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     54a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     54c:	7ab3      	ldrb	r3, [r6, #10]
     54e:	2b00      	cmp	r3, #0
     550:	d0c2      	beq.n	4d8 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     552:	0030      	movs	r0, r6
     554:	4b05      	ldr	r3, [pc, #20]	; (56c <_i2c_master_write_packet+0xe0>)
     556:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     558:	686a      	ldr	r2, [r5, #4]
     55a:	23c0      	movs	r3, #192	; 0xc0
     55c:	029b      	lsls	r3, r3, #10
     55e:	4313      	orrs	r3, r2
     560:	606b      	str	r3, [r5, #4]
     562:	e7b9      	b.n	4d8 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     564:	2341      	movs	r3, #65	; 0x41
     566:	9301      	str	r3, [sp, #4]
     568:	e7b6      	b.n	4d8 <_i2c_master_write_packet+0x4c>
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	000001f5 	.word	0x000001f5
     570:	fffbffff 	.word	0xfffbffff
     574:	00000441 	.word	0x00000441
     578:	0000046d 	.word	0x0000046d
     57c:	00000411 	.word	0x00000411

00000580 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     580:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     582:	8b83      	ldrh	r3, [r0, #28]
     584:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     586:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     588:	2b00      	cmp	r3, #0
     58a:	d001      	beq.n	590 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     58c:	0010      	movs	r0, r2
     58e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     590:	3301      	adds	r3, #1
     592:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     594:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     596:	4b02      	ldr	r3, [pc, #8]	; (5a0 <i2c_master_write_packet_wait+0x20>)
     598:	4798      	blx	r3
     59a:	0002      	movs	r2, r0
     59c:	e7f6      	b.n	58c <i2c_master_write_packet_wait+0xc>
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	0000048d 	.word	0x0000048d

000005a4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5a4:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5a6:	2207      	movs	r2, #7
     5a8:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     5aa:	421a      	tst	r2, r3
     5ac:	d1fc      	bne.n	5a8 <_i2c_master_wait_for_sync+0x4>
}
     5ae:	4770      	bx	lr

000005b0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     5b0:	b570      	push	{r4, r5, r6, lr}
     5b2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5b4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5b6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     5b8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     5ba:	8b83      	ldrh	r3, [r0, #28]
     5bc:	1aed      	subs	r5, r5, r3
     5be:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     5c0:	8b83      	ldrh	r3, [r0, #28]
     5c2:	3b01      	subs	r3, #1
     5c4:	b29b      	uxth	r3, r3
     5c6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     5c8:	0113      	lsls	r3, r2, #4
     5ca:	d51d      	bpl.n	608 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     5cc:	7ac3      	ldrb	r3, [r0, #11]
     5ce:	2b00      	cmp	r3, #0
     5d0:	d003      	beq.n	5da <_i2c_master_read+0x2a>
     5d2:	8b83      	ldrh	r3, [r0, #28]
     5d4:	b29b      	uxth	r3, r3
     5d6:	2b01      	cmp	r3, #1
     5d8:	d010      	beq.n	5fc <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     5da:	8ba3      	ldrh	r3, [r4, #28]
     5dc:	b29b      	uxth	r3, r3
     5de:	2b00      	cmp	r3, #0
     5e0:	d102      	bne.n	5e8 <_i2c_master_read+0x38>
		if (module->send_stop) {
     5e2:	7aa3      	ldrb	r3, [r4, #10]
     5e4:	2b00      	cmp	r3, #0
     5e6:	d11c      	bne.n	622 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     5e8:	0020      	movs	r0, r4
     5ea:	4b12      	ldr	r3, [pc, #72]	; (634 <_i2c_master_read+0x84>)
     5ec:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     5ee:	6a23      	ldr	r3, [r4, #32]
     5f0:	195d      	adds	r5, r3, r5
     5f2:	2328      	movs	r3, #40	; 0x28
     5f4:	5cf3      	ldrb	r3, [r6, r3]
     5f6:	b2db      	uxtb	r3, r3
     5f8:	702b      	strb	r3, [r5, #0]
}
     5fa:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5fc:	6872      	ldr	r2, [r6, #4]
     5fe:	2380      	movs	r3, #128	; 0x80
     600:	02db      	lsls	r3, r3, #11
     602:	4313      	orrs	r3, r2
     604:	6073      	str	r3, [r6, #4]
     606:	e7e8      	b.n	5da <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     608:	7ac3      	ldrb	r3, [r0, #11]
     60a:	2b00      	cmp	r3, #0
     60c:	d0e5      	beq.n	5da <_i2c_master_read+0x2a>
     60e:	8b83      	ldrh	r3, [r0, #28]
     610:	b29b      	uxth	r3, r3
     612:	2b00      	cmp	r3, #0
     614:	d1e1      	bne.n	5da <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     616:	6872      	ldr	r2, [r6, #4]
     618:	2380      	movs	r3, #128	; 0x80
     61a:	02db      	lsls	r3, r3, #11
     61c:	4313      	orrs	r3, r2
     61e:	6073      	str	r3, [r6, #4]
     620:	e7db      	b.n	5da <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     622:	0020      	movs	r0, r4
     624:	4b03      	ldr	r3, [pc, #12]	; (634 <_i2c_master_read+0x84>)
     626:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     628:	6872      	ldr	r2, [r6, #4]
     62a:	23c0      	movs	r3, #192	; 0xc0
     62c:	029b      	lsls	r3, r3, #10
     62e:	4313      	orrs	r3, r2
     630:	6073      	str	r3, [r6, #4]
     632:	e7d9      	b.n	5e8 <_i2c_master_read+0x38>
     634:	000005a5 	.word	0x000005a5

00000638 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     638:	b570      	push	{r4, r5, r6, lr}
     63a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     63c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     63e:	8b6b      	ldrh	r3, [r5, #26]
     640:	075b      	lsls	r3, r3, #29
     642:	d503      	bpl.n	64c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     644:	221e      	movs	r2, #30
     646:	2325      	movs	r3, #37	; 0x25
     648:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     64a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     64c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     64e:	8b83      	ldrh	r3, [r0, #28]
     650:	1af6      	subs	r6, r6, r3
     652:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     654:	8b83      	ldrh	r3, [r0, #28]
     656:	3b01      	subs	r3, #1
     658:	b29b      	uxth	r3, r3
     65a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     65c:	4b04      	ldr	r3, [pc, #16]	; (670 <_i2c_master_write+0x38>)
     65e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     660:	6a23      	ldr	r3, [r4, #32]
     662:	199e      	adds	r6, r3, r6
     664:	7833      	ldrb	r3, [r6, #0]
     666:	b2db      	uxtb	r3, r3
     668:	2228      	movs	r2, #40	; 0x28
     66a:	54ab      	strb	r3, [r5, r2]
     66c:	e7ed      	b.n	64a <_i2c_master_write+0x12>
     66e:	46c0      	nop			; (mov r8, r8)
     670:	000005a5 	.word	0x000005a5

00000674 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     674:	b570      	push	{r4, r5, r6, lr}
     676:	0005      	movs	r5, r0
     678:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     67a:	6806      	ldr	r6, [r0, #0]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     67c:	684b      	ldr	r3, [r1, #4]
     67e:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     680:	884b      	ldrh	r3, [r1, #2]
     682:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     684:	2201      	movs	r2, #1
     686:	2324      	movs	r3, #36	; 0x24
     688:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     68a:	3204      	adds	r2, #4
     68c:	3301      	adds	r3, #1
     68e:	54c2      	strb	r2, [r0, r3]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     690:	7a4b      	ldrb	r3, [r1, #9]
     692:	2b00      	cmp	r3, #0
     694:	d112      	bne.n	6bc <_i2c_master_read_packet+0x48>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     696:	6873      	ldr	r3, [r6, #4]
     698:	4a1d      	ldr	r2, [pc, #116]	; (710 <_i2c_master_read_packet+0x9c>)
     69a:	4013      	ands	r3, r2
     69c:	6073      	str	r3, [r6, #4]

	if (packet->ten_bit_address) {
     69e:	7a23      	ldrb	r3, [r4, #8]
     6a0:	2b00      	cmp	r3, #0
     6a2:	d10f      	bne.n	6c4 <_i2c_master_read_packet+0x50>
		} else {
			return tmp_status;
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     6a4:	2303      	movs	r3, #3
     6a6:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     6a8:	8823      	ldrh	r3, [r4, #0]
     6aa:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     6ac:	7a62      	ldrb	r2, [r4, #9]
     6ae:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     6b0:	4313      	orrs	r3, r2
     6b2:	2201      	movs	r2, #1
     6b4:	4313      	orrs	r3, r2
     6b6:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
     6b8:	2000      	movs	r0, #0
}
     6ba:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6bc:	7a89      	ldrb	r1, [r1, #10]
     6be:	4b15      	ldr	r3, [pc, #84]	; (714 <_i2c_master_read_packet+0xa0>)
     6c0:	4798      	blx	r3
     6c2:	e7e8      	b.n	696 <_i2c_master_read_packet+0x22>
		i2c_module->ADDR.reg = (packet->address << 1) |
     6c4:	8823      	ldrh	r3, [r4, #0]
     6c6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6c8:	7a62      	ldrb	r2, [r4, #9]
     6ca:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     6cc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6ce:	2280      	movs	r2, #128	; 0x80
     6d0:	0212      	lsls	r2, r2, #8
     6d2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     6d4:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     6d6:	0028      	movs	r0, r5
     6d8:	4b0f      	ldr	r3, [pc, #60]	; (718 <_i2c_master_read_packet+0xa4>)
     6da:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6dc:	6873      	ldr	r3, [r6, #4]
     6de:	4a0c      	ldr	r2, [pc, #48]	; (710 <_i2c_master_read_packet+0x9c>)
     6e0:	4013      	ands	r3, r2
     6e2:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     6e4:	2800      	cmp	r0, #0
     6e6:	d1e8      	bne.n	6ba <_i2c_master_read_packet+0x46>
			tmp_status = _i2c_master_address_response(module);
     6e8:	0028      	movs	r0, r5
     6ea:	4b0c      	ldr	r3, [pc, #48]	; (71c <_i2c_master_read_packet+0xa8>)
     6ec:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     6ee:	2800      	cmp	r0, #0
     6f0:	d1e3      	bne.n	6ba <_i2c_master_read_packet+0x46>
			i2c_module->INTENSET.reg =
     6f2:	2303      	movs	r3, #3
     6f4:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     6f6:	8823      	ldrh	r3, [r4, #0]
     6f8:	0a1b      	lsrs	r3, r3, #8
     6fa:	2278      	movs	r2, #120	; 0x78
     6fc:	4313      	orrs	r3, r2
     6fe:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     700:	7a62      	ldrb	r2, [r4, #9]
     702:	0392      	lsls	r2, r2, #14
     704:	2101      	movs	r1, #1
     706:	430a      	orrs	r2, r1
     708:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     70a:	6273      	str	r3, [r6, #36]	; 0x24
     70c:	e7d5      	b.n	6ba <_i2c_master_read_packet+0x46>
     70e:	46c0      	nop			; (mov r8, r8)
     710:	fffbffff 	.word	0xfffbffff
     714:	0000046d 	.word	0x0000046d
     718:	00000441 	.word	0x00000441
     71c:	00000411 	.word	0x00000411

00000720 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     720:	1c93      	adds	r3, r2, #2
     722:	009b      	lsls	r3, r3, #2
     724:	18c3      	adds	r3, r0, r3
     726:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     728:	7e03      	ldrb	r3, [r0, #24]
     72a:	2101      	movs	r1, #1
     72c:	4091      	lsls	r1, r2
     72e:	430b      	orrs	r3, r1
     730:	b2db      	uxtb	r3, r3
     732:	7603      	strb	r3, [r0, #24]
}
     734:	4770      	bx	lr
	...

00000738 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     738:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     73a:	8b83      	ldrh	r3, [r0, #28]
     73c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     73e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     740:	2b00      	cmp	r3, #0
     742:	d001      	beq.n	748 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     744:	0010      	movs	r0, r2
     746:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     748:	3301      	adds	r3, #1
     74a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     74c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     74e:	4b02      	ldr	r3, [pc, #8]	; (758 <i2c_master_read_packet_job+0x20>)
     750:	4798      	blx	r3
     752:	0002      	movs	r2, r0
     754:	e7f6      	b.n	744 <i2c_master_read_packet_job+0xc>
     756:	46c0      	nop			; (mov r8, r8)
     758:	00000675 	.word	0x00000675

0000075c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     75c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     75e:	0080      	lsls	r0, r0, #2
     760:	4b75      	ldr	r3, [pc, #468]	; (938 <_i2c_master_interrupt_handler+0x1dc>)
     762:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     764:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     766:	682b      	ldr	r3, [r5, #0]
     768:	011b      	lsls	r3, r3, #4
     76a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     76c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     76e:	7e26      	ldrb	r6, [r4, #24]
     770:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     772:	8b63      	ldrh	r3, [r4, #26]
     774:	b29b      	uxth	r3, r3
     776:	2b00      	cmp	r3, #0
     778:	d103      	bne.n	782 <_i2c_master_interrupt_handler+0x26>
     77a:	8ba3      	ldrh	r3, [r4, #28]
     77c:	b29b      	uxth	r3, r3
     77e:	2b00      	cmp	r3, #0
     780:	d123      	bne.n	7ca <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     782:	8b63      	ldrh	r3, [r4, #26]
     784:	b29b      	uxth	r3, r3
     786:	2b00      	cmp	r3, #0
     788:	d008      	beq.n	79c <_i2c_master_interrupt_handler+0x40>
     78a:	8ba3      	ldrh	r3, [r4, #28]
     78c:	b29b      	uxth	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	d104      	bne.n	79c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     792:	3325      	adds	r3, #37	; 0x25
     794:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     796:	2b05      	cmp	r3, #5
     798:	d100      	bne.n	79c <_i2c_master_interrupt_handler+0x40>
     79a:	e06d      	b.n	878 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     79c:	8b63      	ldrh	r3, [r4, #26]
     79e:	b29b      	uxth	r3, r3
     7a0:	2b00      	cmp	r3, #0
     7a2:	d024      	beq.n	7ee <_i2c_master_interrupt_handler+0x92>
     7a4:	8ba3      	ldrh	r3, [r4, #28]
     7a6:	b29b      	uxth	r3, r3
     7a8:	2b00      	cmp	r3, #0
     7aa:	d020      	beq.n	7ee <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     7ac:	8b6b      	ldrh	r3, [r5, #26]
     7ae:	069b      	lsls	r3, r3, #26
     7b0:	d500      	bpl.n	7b4 <_i2c_master_interrupt_handler+0x58>
     7b2:	e081      	b.n	8b8 <_i2c_master_interrupt_handler+0x15c>
     7b4:	2a00      	cmp	r2, #0
     7b6:	d004      	beq.n	7c2 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     7b8:	8ba3      	ldrh	r3, [r4, #28]
     7ba:	b29b      	uxth	r3, r3
     7bc:	2b01      	cmp	r3, #1
     7be:	d100      	bne.n	7c2 <_i2c_master_interrupt_handler+0x66>
     7c0:	e07a      	b.n	8b8 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     7c2:	2241      	movs	r2, #65	; 0x41
     7c4:	2325      	movs	r3, #37	; 0x25
     7c6:	54e2      	strb	r2, [r4, r3]
     7c8:	e011      	b.n	7ee <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     7ca:	7e2b      	ldrb	r3, [r5, #24]
     7cc:	07db      	lsls	r3, r3, #31
     7ce:	d533      	bpl.n	838 <_i2c_master_interrupt_handler+0xdc>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     7d0:	2301      	movs	r3, #1
     7d2:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     7d4:	8b6b      	ldrh	r3, [r5, #26]
     7d6:	079b      	lsls	r3, r3, #30
     7d8:	d502      	bpl.n	7e0 <_i2c_master_interrupt_handler+0x84>
			module->status = STATUS_ERR_PACKET_COLLISION;
     7da:	2241      	movs	r2, #65	; 0x41
     7dc:	2325      	movs	r3, #37	; 0x25
     7de:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     7e0:	8ba3      	ldrh	r3, [r4, #28]
     7e2:	b29b      	uxth	r3, r3
     7e4:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     7e6:	2325      	movs	r3, #37	; 0x25
     7e8:	5ce3      	ldrb	r3, [r4, r3]
     7ea:	2b05      	cmp	r3, #5
     7ec:	d038      	beq.n	860 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7ee:	8b63      	ldrh	r3, [r4, #26]
     7f0:	b29b      	uxth	r3, r3
     7f2:	2b00      	cmp	r3, #0
     7f4:	d007      	beq.n	806 <_i2c_master_interrupt_handler+0xaa>
     7f6:	8ba3      	ldrh	r3, [r4, #28]
     7f8:	b29b      	uxth	r3, r3
     7fa:	2b00      	cmp	r3, #0
     7fc:	d103      	bne.n	806 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     7fe:	3325      	adds	r3, #37	; 0x25
     800:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     802:	2b05      	cmp	r3, #5
     804:	d064      	beq.n	8d0 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     806:	2325      	movs	r3, #37	; 0x25
     808:	5ce3      	ldrb	r3, [r4, r3]
     80a:	2b05      	cmp	r3, #5
     80c:	d013      	beq.n	836 <_i2c_master_interrupt_handler+0xda>
     80e:	2325      	movs	r3, #37	; 0x25
     810:	5ce3      	ldrb	r3, [r4, r3]
     812:	2b00      	cmp	r3, #0
     814:	d00f      	beq.n	836 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     816:	2303      	movs	r3, #3
     818:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     81a:	2300      	movs	r3, #0
     81c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     81e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     820:	3325      	adds	r3, #37	; 0x25
     822:	5ce3      	ldrb	r3, [r4, r3]
     824:	2b41      	cmp	r3, #65	; 0x41
     826:	d003      	beq.n	830 <_i2c_master_interrupt_handler+0xd4>
     828:	7aa3      	ldrb	r3, [r4, #10]
     82a:	2b00      	cmp	r3, #0
     82c:	d000      	beq.n	830 <_i2c_master_interrupt_handler+0xd4>
     82e:	e075      	b.n	91c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     830:	0773      	lsls	r3, r6, #29
     832:	d500      	bpl.n	836 <_i2c_master_interrupt_handler+0xda>
     834:	e07b      	b.n	92e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     836:	bd70      	pop	{r4, r5, r6, pc}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     838:	8b6b      	ldrh	r3, [r5, #26]
     83a:	075b      	lsls	r3, r3, #29
     83c:	d5d0      	bpl.n	7e0 <_i2c_master_interrupt_handler+0x84>
		module->status           = STATUS_ERR_BAD_ADDRESS;
     83e:	2218      	movs	r2, #24
     840:	2325      	movs	r3, #37	; 0x25
     842:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     844:	2300      	movs	r3, #0
     846:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
     848:	7aa3      	ldrb	r3, [r4, #10]
     84a:	2b00      	cmp	r3, #0
     84c:	d0c8      	beq.n	7e0 <_i2c_master_interrupt_handler+0x84>
			_i2c_master_wait_for_sync(module);
     84e:	0020      	movs	r0, r4
     850:	4b3a      	ldr	r3, [pc, #232]	; (93c <_i2c_master_interrupt_handler+0x1e0>)
     852:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     854:	686a      	ldr	r2, [r5, #4]
     856:	23c0      	movs	r3, #192	; 0xc0
     858:	029b      	lsls	r3, r3, #10
     85a:	4313      	orrs	r3, r2
     85c:	606b      	str	r3, [r5, #4]
     85e:	e7bf      	b.n	7e0 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     860:	331f      	adds	r3, #31
     862:	5ce3      	ldrb	r3, [r4, r3]
     864:	2b00      	cmp	r3, #0
     866:	d003      	beq.n	870 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     868:	0020      	movs	r0, r4
     86a:	4b35      	ldr	r3, [pc, #212]	; (940 <_i2c_master_interrupt_handler+0x1e4>)
     86c:	4798      	blx	r3
     86e:	e7be      	b.n	7ee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     870:	0020      	movs	r0, r4
     872:	4b34      	ldr	r3, [pc, #208]	; (944 <_i2c_master_interrupt_handler+0x1e8>)
     874:	4798      	blx	r3
     876:	e7ba      	b.n	7ee <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     878:	331f      	adds	r3, #31
     87a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     87c:	2b00      	cmp	r3, #0
     87e:	d000      	beq.n	882 <_i2c_master_interrupt_handler+0x126>
     880:	e78c      	b.n	79c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     882:	3303      	adds	r3, #3
     884:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     886:	2300      	movs	r3, #0
     888:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     88a:	3325      	adds	r3, #37	; 0x25
     88c:	2200      	movs	r2, #0
     88e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     890:	7aa3      	ldrb	r3, [r4, #10]
     892:	2b00      	cmp	r3, #0
     894:	d107      	bne.n	8a6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     896:	2301      	movs	r3, #1
     898:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     89a:	07f3      	lsls	r3, r6, #31
     89c:	d5a7      	bpl.n	7ee <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     89e:	68e3      	ldr	r3, [r4, #12]
     8a0:	0020      	movs	r0, r4
     8a2:	4798      	blx	r3
     8a4:	e7a3      	b.n	7ee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     8a6:	0020      	movs	r0, r4
     8a8:	4b24      	ldr	r3, [pc, #144]	; (93c <_i2c_master_interrupt_handler+0x1e0>)
     8aa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8ac:	686a      	ldr	r2, [r5, #4]
     8ae:	23c0      	movs	r3, #192	; 0xc0
     8b0:	029b      	lsls	r3, r3, #10
     8b2:	4313      	orrs	r3, r2
     8b4:	606b      	str	r3, [r5, #4]
     8b6:	e7f0      	b.n	89a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8b8:	2324      	movs	r3, #36	; 0x24
     8ba:	5ce3      	ldrb	r3, [r4, r3]
     8bc:	2b00      	cmp	r3, #0
     8be:	d103      	bne.n	8c8 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     8c0:	0020      	movs	r0, r4
     8c2:	4b20      	ldr	r3, [pc, #128]	; (944 <_i2c_master_interrupt_handler+0x1e8>)
     8c4:	4798      	blx	r3
     8c6:	e792      	b.n	7ee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     8c8:	0020      	movs	r0, r4
     8ca:	4b1d      	ldr	r3, [pc, #116]	; (940 <_i2c_master_interrupt_handler+0x1e4>)
     8cc:	4798      	blx	r3
     8ce:	e78e      	b.n	7ee <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     8d0:	331f      	adds	r3, #31
     8d2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     8d4:	2b01      	cmp	r3, #1
     8d6:	d196      	bne.n	806 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     8d8:	7e2b      	ldrb	r3, [r5, #24]
     8da:	079b      	lsls	r3, r3, #30
     8dc:	d501      	bpl.n	8e2 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     8de:	2302      	movs	r3, #2
     8e0:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     8e2:	2303      	movs	r3, #3
     8e4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     8e6:	2300      	movs	r3, #0
     8e8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     8ea:	3325      	adds	r3, #37	; 0x25
     8ec:	2200      	movs	r2, #0
     8ee:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     8f0:	07b3      	lsls	r3, r6, #30
     8f2:	d503      	bpl.n	8fc <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     8f4:	2324      	movs	r3, #36	; 0x24
     8f6:	5ce3      	ldrb	r3, [r4, r3]
     8f8:	2b01      	cmp	r3, #1
     8fa:	d00b      	beq.n	914 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     8fc:	07f3      	lsls	r3, r6, #31
     8fe:	d400      	bmi.n	902 <_i2c_master_interrupt_handler+0x1a6>
     900:	e781      	b.n	806 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     902:	2324      	movs	r3, #36	; 0x24
     904:	5ce3      	ldrb	r3, [r4, r3]
     906:	2b00      	cmp	r3, #0
     908:	d000      	beq.n	90c <_i2c_master_interrupt_handler+0x1b0>
     90a:	e77c      	b.n	806 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     90c:	68e3      	ldr	r3, [r4, #12]
     90e:	0020      	movs	r0, r4
     910:	4798      	blx	r3
     912:	e778      	b.n	806 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     914:	6923      	ldr	r3, [r4, #16]
     916:	0020      	movs	r0, r4
     918:	4798      	blx	r3
     91a:	e774      	b.n	806 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     91c:	0020      	movs	r0, r4
     91e:	4b07      	ldr	r3, [pc, #28]	; (93c <_i2c_master_interrupt_handler+0x1e0>)
     920:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     922:	686a      	ldr	r2, [r5, #4]
     924:	23e0      	movs	r3, #224	; 0xe0
     926:	02db      	lsls	r3, r3, #11
     928:	4313      	orrs	r3, r2
     92a:	606b      	str	r3, [r5, #4]
     92c:	e780      	b.n	830 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     92e:	6963      	ldr	r3, [r4, #20]
     930:	0020      	movs	r0, r4
     932:	4798      	blx	r3
}
     934:	e77f      	b.n	836 <_i2c_master_interrupt_handler+0xda>
     936:	46c0      	nop			; (mov r8, r8)
     938:	200000d8 	.word	0x200000d8
     93c:	000005a5 	.word	0x000005a5
     940:	000005b1 	.word	0x000005b1
     944:	00000639 	.word	0x00000639

00000948 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     948:	b5f0      	push	{r4, r5, r6, r7, lr}
     94a:	46de      	mov	lr, fp
     94c:	4657      	mov	r7, sl
     94e:	464e      	mov	r6, r9
     950:	4645      	mov	r5, r8
     952:	b5e0      	push	{r5, r6, r7, lr}
     954:	b087      	sub	sp, #28
     956:	4680      	mov	r8, r0
     958:	9104      	str	r1, [sp, #16]
     95a:	0016      	movs	r6, r2
     95c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     95e:	2200      	movs	r2, #0
     960:	2300      	movs	r3, #0
     962:	2100      	movs	r1, #0
     964:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     966:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     968:	2001      	movs	r0, #1
     96a:	0021      	movs	r1, r4
     96c:	9600      	str	r6, [sp, #0]
     96e:	9701      	str	r7, [sp, #4]
     970:	465c      	mov	r4, fp
     972:	9403      	str	r4, [sp, #12]
     974:	4644      	mov	r4, r8
     976:	9405      	str	r4, [sp, #20]
     978:	e013      	b.n	9a2 <long_division+0x5a>
     97a:	2420      	movs	r4, #32
     97c:	1a64      	subs	r4, r4, r1
     97e:	0005      	movs	r5, r0
     980:	40e5      	lsrs	r5, r4
     982:	46a8      	mov	r8, r5
     984:	e014      	b.n	9b0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     986:	9c00      	ldr	r4, [sp, #0]
     988:	9d01      	ldr	r5, [sp, #4]
     98a:	1b12      	subs	r2, r2, r4
     98c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     98e:	465c      	mov	r4, fp
     990:	464d      	mov	r5, r9
     992:	432c      	orrs	r4, r5
     994:	46a3      	mov	fp, r4
     996:	9c03      	ldr	r4, [sp, #12]
     998:	4645      	mov	r5, r8
     99a:	432c      	orrs	r4, r5
     99c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     99e:	3901      	subs	r1, #1
     9a0:	d325      	bcc.n	9ee <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     9a2:	2420      	movs	r4, #32
     9a4:	4264      	negs	r4, r4
     9a6:	190c      	adds	r4, r1, r4
     9a8:	d4e7      	bmi.n	97a <long_division+0x32>
     9aa:	0005      	movs	r5, r0
     9ac:	40a5      	lsls	r5, r4
     9ae:	46a8      	mov	r8, r5
     9b0:	0004      	movs	r4, r0
     9b2:	408c      	lsls	r4, r1
     9b4:	46a1      	mov	r9, r4
		r = r << 1;
     9b6:	1892      	adds	r2, r2, r2
     9b8:	415b      	adcs	r3, r3
     9ba:	0014      	movs	r4, r2
     9bc:	001d      	movs	r5, r3
		if (n & bit_shift) {
     9be:	9e05      	ldr	r6, [sp, #20]
     9c0:	464f      	mov	r7, r9
     9c2:	403e      	ands	r6, r7
     9c4:	46b4      	mov	ip, r6
     9c6:	9e04      	ldr	r6, [sp, #16]
     9c8:	4647      	mov	r7, r8
     9ca:	403e      	ands	r6, r7
     9cc:	46b2      	mov	sl, r6
     9ce:	4666      	mov	r6, ip
     9d0:	4657      	mov	r7, sl
     9d2:	433e      	orrs	r6, r7
     9d4:	d003      	beq.n	9de <long_division+0x96>
			r |= 0x01;
     9d6:	0006      	movs	r6, r0
     9d8:	4326      	orrs	r6, r4
     9da:	0032      	movs	r2, r6
     9dc:	002b      	movs	r3, r5
		if (r >= d) {
     9de:	9c00      	ldr	r4, [sp, #0]
     9e0:	9d01      	ldr	r5, [sp, #4]
     9e2:	429d      	cmp	r5, r3
     9e4:	d8db      	bhi.n	99e <long_division+0x56>
     9e6:	d1ce      	bne.n	986 <long_division+0x3e>
     9e8:	4294      	cmp	r4, r2
     9ea:	d8d8      	bhi.n	99e <long_division+0x56>
     9ec:	e7cb      	b.n	986 <long_division+0x3e>
     9ee:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     9f0:	4658      	mov	r0, fp
     9f2:	0019      	movs	r1, r3
     9f4:	b007      	add	sp, #28
     9f6:	bc3c      	pop	{r2, r3, r4, r5}
     9f8:	4690      	mov	r8, r2
     9fa:	4699      	mov	r9, r3
     9fc:	46a2      	mov	sl, r4
     9fe:	46ab      	mov	fp, r5
     a00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a02 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a02:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a04:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a06:	2340      	movs	r3, #64	; 0x40
     a08:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a0a:	4281      	cmp	r1, r0
     a0c:	d202      	bcs.n	a14 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a0e:	0018      	movs	r0, r3
     a10:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a12:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a14:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a16:	1c63      	adds	r3, r4, #1
     a18:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a1a:	4288      	cmp	r0, r1
     a1c:	d9f9      	bls.n	a12 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a1e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     a20:	2cff      	cmp	r4, #255	; 0xff
     a22:	d8f4      	bhi.n	a0e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     a24:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a26:	2300      	movs	r3, #0
     a28:	e7f1      	b.n	a0e <_sercom_get_sync_baud_val+0xc>
	...

00000a2c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2e:	b083      	sub	sp, #12
     a30:	000f      	movs	r7, r1
     a32:	0016      	movs	r6, r2
     a34:	aa08      	add	r2, sp, #32
     a36:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a38:	0004      	movs	r4, r0
     a3a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a3c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     a3e:	42bc      	cmp	r4, r7
     a40:	d902      	bls.n	a48 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     a42:	0010      	movs	r0, r2
     a44:	b003      	add	sp, #12
     a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a48:	2b00      	cmp	r3, #0
     a4a:	d114      	bne.n	a76 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a4c:	0002      	movs	r2, r0
     a4e:	0008      	movs	r0, r1
     a50:	2100      	movs	r1, #0
     a52:	4c19      	ldr	r4, [pc, #100]	; (ab8 <_sercom_get_async_baud_val+0x8c>)
     a54:	47a0      	blx	r4
     a56:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     a58:	003a      	movs	r2, r7
     a5a:	2300      	movs	r3, #0
     a5c:	2000      	movs	r0, #0
     a5e:	4c17      	ldr	r4, [pc, #92]	; (abc <_sercom_get_async_baud_val+0x90>)
     a60:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     a62:	2200      	movs	r2, #0
     a64:	2301      	movs	r3, #1
     a66:	1a12      	subs	r2, r2, r0
     a68:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     a6a:	0c12      	lsrs	r2, r2, #16
     a6c:	041b      	lsls	r3, r3, #16
     a6e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     a70:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     a72:	2200      	movs	r2, #0
     a74:	e7e5      	b.n	a42 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     a76:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     a78:	2b01      	cmp	r3, #1
     a7a:	d1f9      	bne.n	a70 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     a7c:	000a      	movs	r2, r1
     a7e:	2300      	movs	r3, #0
     a80:	2100      	movs	r1, #0
     a82:	4c0d      	ldr	r4, [pc, #52]	; (ab8 <_sercom_get_async_baud_val+0x8c>)
     a84:	47a0      	blx	r4
     a86:	0002      	movs	r2, r0
     a88:	000b      	movs	r3, r1
     a8a:	9200      	str	r2, [sp, #0]
     a8c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     a8e:	0038      	movs	r0, r7
     a90:	2100      	movs	r1, #0
     a92:	4c0a      	ldr	r4, [pc, #40]	; (abc <_sercom_get_async_baud_val+0x90>)
     a94:	47a0      	blx	r4
     a96:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     a98:	2380      	movs	r3, #128	; 0x80
     a9a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a9c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     a9e:	4298      	cmp	r0, r3
     aa0:	d8cf      	bhi.n	a42 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     aa2:	0f79      	lsrs	r1, r7, #29
     aa4:	00f8      	lsls	r0, r7, #3
     aa6:	9a00      	ldr	r2, [sp, #0]
     aa8:	9b01      	ldr	r3, [sp, #4]
     aaa:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     aac:	00ea      	lsls	r2, r5, #3
     aae:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     ab0:	b2d2      	uxtb	r2, r2
     ab2:	0352      	lsls	r2, r2, #13
     ab4:	432a      	orrs	r2, r5
     ab6:	e7db      	b.n	a70 <_sercom_get_async_baud_val+0x44>
     ab8:	000020bd 	.word	0x000020bd
     abc:	00000949 	.word	0x00000949

00000ac0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ac0:	b510      	push	{r4, lr}
     ac2:	b082      	sub	sp, #8
     ac4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ac6:	4b0e      	ldr	r3, [pc, #56]	; (b00 <sercom_set_gclk_generator+0x40>)
     ac8:	781b      	ldrb	r3, [r3, #0]
     aca:	2b00      	cmp	r3, #0
     acc:	d007      	beq.n	ade <sercom_set_gclk_generator+0x1e>
     ace:	2900      	cmp	r1, #0
     ad0:	d105      	bne.n	ade <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     ad2:	4b0b      	ldr	r3, [pc, #44]	; (b00 <sercom_set_gclk_generator+0x40>)
     ad4:	785b      	ldrb	r3, [r3, #1]
     ad6:	4283      	cmp	r3, r0
     ad8:	d010      	beq.n	afc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ada:	201d      	movs	r0, #29
     adc:	e00c      	b.n	af8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     ade:	a901      	add	r1, sp, #4
     ae0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     ae2:	2013      	movs	r0, #19
     ae4:	4b07      	ldr	r3, [pc, #28]	; (b04 <sercom_set_gclk_generator+0x44>)
     ae6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ae8:	2013      	movs	r0, #19
     aea:	4b07      	ldr	r3, [pc, #28]	; (b08 <sercom_set_gclk_generator+0x48>)
     aec:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     aee:	4b04      	ldr	r3, [pc, #16]	; (b00 <sercom_set_gclk_generator+0x40>)
     af0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     af2:	2201      	movs	r2, #1
     af4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     af6:	2000      	movs	r0, #0
}
     af8:	b002      	add	sp, #8
     afa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     afc:	2000      	movs	r0, #0
     afe:	e7fb      	b.n	af8 <sercom_set_gclk_generator+0x38>
     b00:	20000094 	.word	0x20000094
     b04:	000017b9 	.word	0x000017b9
     b08:	0000172d 	.word	0x0000172d

00000b0c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b0c:	4b40      	ldr	r3, [pc, #256]	; (c10 <_sercom_get_default_pad+0x104>)
     b0e:	4298      	cmp	r0, r3
     b10:	d031      	beq.n	b76 <_sercom_get_default_pad+0x6a>
     b12:	d90a      	bls.n	b2a <_sercom_get_default_pad+0x1e>
     b14:	4b3f      	ldr	r3, [pc, #252]	; (c14 <_sercom_get_default_pad+0x108>)
     b16:	4298      	cmp	r0, r3
     b18:	d04d      	beq.n	bb6 <_sercom_get_default_pad+0xaa>
     b1a:	4b3f      	ldr	r3, [pc, #252]	; (c18 <_sercom_get_default_pad+0x10c>)
     b1c:	4298      	cmp	r0, r3
     b1e:	d05a      	beq.n	bd6 <_sercom_get_default_pad+0xca>
     b20:	4b3e      	ldr	r3, [pc, #248]	; (c1c <_sercom_get_default_pad+0x110>)
     b22:	4298      	cmp	r0, r3
     b24:	d037      	beq.n	b96 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     b26:	2000      	movs	r0, #0
}
     b28:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     b2a:	4b3d      	ldr	r3, [pc, #244]	; (c20 <_sercom_get_default_pad+0x114>)
     b2c:	4298      	cmp	r0, r3
     b2e:	d00c      	beq.n	b4a <_sercom_get_default_pad+0x3e>
     b30:	4b3c      	ldr	r3, [pc, #240]	; (c24 <_sercom_get_default_pad+0x118>)
     b32:	4298      	cmp	r0, r3
     b34:	d1f7      	bne.n	b26 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b36:	2901      	cmp	r1, #1
     b38:	d017      	beq.n	b6a <_sercom_get_default_pad+0x5e>
     b3a:	2900      	cmp	r1, #0
     b3c:	d05d      	beq.n	bfa <_sercom_get_default_pad+0xee>
     b3e:	2902      	cmp	r1, #2
     b40:	d015      	beq.n	b6e <_sercom_get_default_pad+0x62>
     b42:	2903      	cmp	r1, #3
     b44:	d015      	beq.n	b72 <_sercom_get_default_pad+0x66>
	return 0;
     b46:	2000      	movs	r0, #0
     b48:	e7ee      	b.n	b28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b4a:	2901      	cmp	r1, #1
     b4c:	d007      	beq.n	b5e <_sercom_get_default_pad+0x52>
     b4e:	2900      	cmp	r1, #0
     b50:	d051      	beq.n	bf6 <_sercom_get_default_pad+0xea>
     b52:	2902      	cmp	r1, #2
     b54:	d005      	beq.n	b62 <_sercom_get_default_pad+0x56>
     b56:	2903      	cmp	r1, #3
     b58:	d005      	beq.n	b66 <_sercom_get_default_pad+0x5a>
	return 0;
     b5a:	2000      	movs	r0, #0
     b5c:	e7e4      	b.n	b28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b5e:	4832      	ldr	r0, [pc, #200]	; (c28 <_sercom_get_default_pad+0x11c>)
     b60:	e7e2      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b62:	4832      	ldr	r0, [pc, #200]	; (c2c <_sercom_get_default_pad+0x120>)
     b64:	e7e0      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b66:	4832      	ldr	r0, [pc, #200]	; (c30 <_sercom_get_default_pad+0x124>)
     b68:	e7de      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b6a:	4832      	ldr	r0, [pc, #200]	; (c34 <_sercom_get_default_pad+0x128>)
     b6c:	e7dc      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b6e:	4832      	ldr	r0, [pc, #200]	; (c38 <_sercom_get_default_pad+0x12c>)
     b70:	e7da      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b72:	4832      	ldr	r0, [pc, #200]	; (c3c <_sercom_get_default_pad+0x130>)
     b74:	e7d8      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b76:	2901      	cmp	r1, #1
     b78:	d007      	beq.n	b8a <_sercom_get_default_pad+0x7e>
     b7a:	2900      	cmp	r1, #0
     b7c:	d03f      	beq.n	bfe <_sercom_get_default_pad+0xf2>
     b7e:	2902      	cmp	r1, #2
     b80:	d005      	beq.n	b8e <_sercom_get_default_pad+0x82>
     b82:	2903      	cmp	r1, #3
     b84:	d005      	beq.n	b92 <_sercom_get_default_pad+0x86>
	return 0;
     b86:	2000      	movs	r0, #0
     b88:	e7ce      	b.n	b28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b8a:	482d      	ldr	r0, [pc, #180]	; (c40 <_sercom_get_default_pad+0x134>)
     b8c:	e7cc      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b8e:	482d      	ldr	r0, [pc, #180]	; (c44 <_sercom_get_default_pad+0x138>)
     b90:	e7ca      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b92:	482d      	ldr	r0, [pc, #180]	; (c48 <_sercom_get_default_pad+0x13c>)
     b94:	e7c8      	b.n	b28 <_sercom_get_default_pad+0x1c>
     b96:	2901      	cmp	r1, #1
     b98:	d007      	beq.n	baa <_sercom_get_default_pad+0x9e>
     b9a:	2900      	cmp	r1, #0
     b9c:	d031      	beq.n	c02 <_sercom_get_default_pad+0xf6>
     b9e:	2902      	cmp	r1, #2
     ba0:	d005      	beq.n	bae <_sercom_get_default_pad+0xa2>
     ba2:	2903      	cmp	r1, #3
     ba4:	d005      	beq.n	bb2 <_sercom_get_default_pad+0xa6>
	return 0;
     ba6:	2000      	movs	r0, #0
     ba8:	e7be      	b.n	b28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     baa:	4828      	ldr	r0, [pc, #160]	; (c4c <_sercom_get_default_pad+0x140>)
     bac:	e7bc      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bae:	4828      	ldr	r0, [pc, #160]	; (c50 <_sercom_get_default_pad+0x144>)
     bb0:	e7ba      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bb2:	4828      	ldr	r0, [pc, #160]	; (c54 <_sercom_get_default_pad+0x148>)
     bb4:	e7b8      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bb6:	2901      	cmp	r1, #1
     bb8:	d007      	beq.n	bca <_sercom_get_default_pad+0xbe>
     bba:	2900      	cmp	r1, #0
     bbc:	d023      	beq.n	c06 <_sercom_get_default_pad+0xfa>
     bbe:	2902      	cmp	r1, #2
     bc0:	d005      	beq.n	bce <_sercom_get_default_pad+0xc2>
     bc2:	2903      	cmp	r1, #3
     bc4:	d005      	beq.n	bd2 <_sercom_get_default_pad+0xc6>
	return 0;
     bc6:	2000      	movs	r0, #0
     bc8:	e7ae      	b.n	b28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bca:	4823      	ldr	r0, [pc, #140]	; (c58 <_sercom_get_default_pad+0x14c>)
     bcc:	e7ac      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bce:	4823      	ldr	r0, [pc, #140]	; (c5c <_sercom_get_default_pad+0x150>)
     bd0:	e7aa      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bd2:	4823      	ldr	r0, [pc, #140]	; (c60 <_sercom_get_default_pad+0x154>)
     bd4:	e7a8      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bd6:	2901      	cmp	r1, #1
     bd8:	d007      	beq.n	bea <_sercom_get_default_pad+0xde>
     bda:	2900      	cmp	r1, #0
     bdc:	d015      	beq.n	c0a <_sercom_get_default_pad+0xfe>
     bde:	2902      	cmp	r1, #2
     be0:	d005      	beq.n	bee <_sercom_get_default_pad+0xe2>
     be2:	2903      	cmp	r1, #3
     be4:	d005      	beq.n	bf2 <_sercom_get_default_pad+0xe6>
	return 0;
     be6:	2000      	movs	r0, #0
     be8:	e79e      	b.n	b28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bea:	481e      	ldr	r0, [pc, #120]	; (c64 <_sercom_get_default_pad+0x158>)
     bec:	e79c      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bee:	481e      	ldr	r0, [pc, #120]	; (c68 <_sercom_get_default_pad+0x15c>)
     bf0:	e79a      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bf2:	481e      	ldr	r0, [pc, #120]	; (c6c <_sercom_get_default_pad+0x160>)
     bf4:	e798      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bf6:	481e      	ldr	r0, [pc, #120]	; (c70 <_sercom_get_default_pad+0x164>)
     bf8:	e796      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bfa:	2003      	movs	r0, #3
     bfc:	e794      	b.n	b28 <_sercom_get_default_pad+0x1c>
     bfe:	481d      	ldr	r0, [pc, #116]	; (c74 <_sercom_get_default_pad+0x168>)
     c00:	e792      	b.n	b28 <_sercom_get_default_pad+0x1c>
     c02:	481d      	ldr	r0, [pc, #116]	; (c78 <_sercom_get_default_pad+0x16c>)
     c04:	e790      	b.n	b28 <_sercom_get_default_pad+0x1c>
     c06:	481d      	ldr	r0, [pc, #116]	; (c7c <_sercom_get_default_pad+0x170>)
     c08:	e78e      	b.n	b28 <_sercom_get_default_pad+0x1c>
     c0a:	481d      	ldr	r0, [pc, #116]	; (c80 <_sercom_get_default_pad+0x174>)
     c0c:	e78c      	b.n	b28 <_sercom_get_default_pad+0x1c>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	42001000 	.word	0x42001000
     c14:	42001800 	.word	0x42001800
     c18:	42001c00 	.word	0x42001c00
     c1c:	42001400 	.word	0x42001400
     c20:	42000800 	.word	0x42000800
     c24:	42000c00 	.word	0x42000c00
     c28:	00050003 	.word	0x00050003
     c2c:	00060003 	.word	0x00060003
     c30:	00070003 	.word	0x00070003
     c34:	00010003 	.word	0x00010003
     c38:	001e0003 	.word	0x001e0003
     c3c:	001f0003 	.word	0x001f0003
     c40:	00090003 	.word	0x00090003
     c44:	000a0003 	.word	0x000a0003
     c48:	000b0003 	.word	0x000b0003
     c4c:	00110003 	.word	0x00110003
     c50:	00120003 	.word	0x00120003
     c54:	00130003 	.word	0x00130003
     c58:	000d0003 	.word	0x000d0003
     c5c:	000e0003 	.word	0x000e0003
     c60:	000f0003 	.word	0x000f0003
     c64:	00170003 	.word	0x00170003
     c68:	00180003 	.word	0x00180003
     c6c:	00190003 	.word	0x00190003
     c70:	00040003 	.word	0x00040003
     c74:	00080003 	.word	0x00080003
     c78:	00100003 	.word	0x00100003
     c7c:	000c0003 	.word	0x000c0003
     c80:	00160003 	.word	0x00160003

00000c84 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c84:	b530      	push	{r4, r5, lr}
     c86:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c88:	4b0b      	ldr	r3, [pc, #44]	; (cb8 <_sercom_get_sercom_inst_index+0x34>)
     c8a:	466a      	mov	r2, sp
     c8c:	cb32      	ldmia	r3!, {r1, r4, r5}
     c8e:	c232      	stmia	r2!, {r1, r4, r5}
     c90:	cb32      	ldmia	r3!, {r1, r4, r5}
     c92:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c94:	9b00      	ldr	r3, [sp, #0]
     c96:	4283      	cmp	r3, r0
     c98:	d00b      	beq.n	cb2 <_sercom_get_sercom_inst_index+0x2e>
     c9a:	2301      	movs	r3, #1
     c9c:	009a      	lsls	r2, r3, #2
     c9e:	4669      	mov	r1, sp
     ca0:	5852      	ldr	r2, [r2, r1]
     ca2:	4282      	cmp	r2, r0
     ca4:	d006      	beq.n	cb4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ca6:	3301      	adds	r3, #1
     ca8:	2b06      	cmp	r3, #6
     caa:	d1f7      	bne.n	c9c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     cac:	2000      	movs	r0, #0
}
     cae:	b007      	add	sp, #28
     cb0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cb2:	2300      	movs	r3, #0
			return i;
     cb4:	b2d8      	uxtb	r0, r3
     cb6:	e7fa      	b.n	cae <_sercom_get_sercom_inst_index+0x2a>
     cb8:	00003140 	.word	0x00003140

00000cbc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     cbc:	4770      	bx	lr
	...

00000cc0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <_sercom_set_handler+0x2c>)
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d10c      	bne.n	ce4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     cca:	4f09      	ldr	r7, [pc, #36]	; (cf0 <_sercom_set_handler+0x30>)
     ccc:	4e09      	ldr	r6, [pc, #36]	; (cf4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     cce:	4d0a      	ldr	r5, [pc, #40]	; (cf8 <_sercom_set_handler+0x38>)
     cd0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     cd2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     cd4:	195a      	adds	r2, r3, r5
     cd6:	6014      	str	r4, [r2, #0]
     cd8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cda:	2b18      	cmp	r3, #24
     cdc:	d1f9      	bne.n	cd2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     cde:	2201      	movs	r2, #1
     ce0:	4b02      	ldr	r3, [pc, #8]	; (cec <_sercom_set_handler+0x2c>)
     ce2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ce4:	0080      	lsls	r0, r0, #2
     ce6:	4b02      	ldr	r3, [pc, #8]	; (cf0 <_sercom_set_handler+0x30>)
     ce8:	50c1      	str	r1, [r0, r3]
}
     cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cec:	20000096 	.word	0x20000096
     cf0:	20000098 	.word	0x20000098
     cf4:	00000cbd 	.word	0x00000cbd
     cf8:	200000d8 	.word	0x200000d8

00000cfc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     cfc:	b500      	push	{lr}
     cfe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d00:	2309      	movs	r3, #9
     d02:	466a      	mov	r2, sp
     d04:	7013      	strb	r3, [r2, #0]
     d06:	3301      	adds	r3, #1
     d08:	7053      	strb	r3, [r2, #1]
     d0a:	3301      	adds	r3, #1
     d0c:	7093      	strb	r3, [r2, #2]
     d0e:	3301      	adds	r3, #1
     d10:	70d3      	strb	r3, [r2, #3]
     d12:	3301      	adds	r3, #1
     d14:	7113      	strb	r3, [r2, #4]
     d16:	3301      	adds	r3, #1
     d18:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     d1a:	4b03      	ldr	r3, [pc, #12]	; (d28 <_sercom_get_interrupt_vector+0x2c>)
     d1c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     d1e:	466b      	mov	r3, sp
     d20:	5618      	ldrsb	r0, [r3, r0]
}
     d22:	b003      	add	sp, #12
     d24:	bd00      	pop	{pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00000c85 	.word	0x00000c85

00000d2c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d2c:	b510      	push	{r4, lr}
     d2e:	4b02      	ldr	r3, [pc, #8]	; (d38 <SERCOM0_Handler+0xc>)
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	2000      	movs	r0, #0
     d34:	4798      	blx	r3
     d36:	bd10      	pop	{r4, pc}
     d38:	20000098 	.word	0x20000098

00000d3c <SERCOM1_Handler>:
     d3c:	b510      	push	{r4, lr}
     d3e:	4b02      	ldr	r3, [pc, #8]	; (d48 <SERCOM1_Handler+0xc>)
     d40:	685b      	ldr	r3, [r3, #4]
     d42:	2001      	movs	r0, #1
     d44:	4798      	blx	r3
     d46:	bd10      	pop	{r4, pc}
     d48:	20000098 	.word	0x20000098

00000d4c <SERCOM2_Handler>:
     d4c:	b510      	push	{r4, lr}
     d4e:	4b02      	ldr	r3, [pc, #8]	; (d58 <SERCOM2_Handler+0xc>)
     d50:	689b      	ldr	r3, [r3, #8]
     d52:	2002      	movs	r0, #2
     d54:	4798      	blx	r3
     d56:	bd10      	pop	{r4, pc}
     d58:	20000098 	.word	0x20000098

00000d5c <SERCOM3_Handler>:
     d5c:	b510      	push	{r4, lr}
     d5e:	4b02      	ldr	r3, [pc, #8]	; (d68 <SERCOM3_Handler+0xc>)
     d60:	68db      	ldr	r3, [r3, #12]
     d62:	2003      	movs	r0, #3
     d64:	4798      	blx	r3
     d66:	bd10      	pop	{r4, pc}
     d68:	20000098 	.word	0x20000098

00000d6c <SERCOM4_Handler>:
     d6c:	b510      	push	{r4, lr}
     d6e:	4b02      	ldr	r3, [pc, #8]	; (d78 <SERCOM4_Handler+0xc>)
     d70:	691b      	ldr	r3, [r3, #16]
     d72:	2004      	movs	r0, #4
     d74:	4798      	blx	r3
     d76:	bd10      	pop	{r4, pc}
     d78:	20000098 	.word	0x20000098

00000d7c <SERCOM5_Handler>:
     d7c:	b510      	push	{r4, lr}
     d7e:	4b02      	ldr	r3, [pc, #8]	; (d88 <SERCOM5_Handler+0xc>)
     d80:	695b      	ldr	r3, [r3, #20]
     d82:	2005      	movs	r0, #5
     d84:	4798      	blx	r3
     d86:	bd10      	pop	{r4, pc}
     d88:	20000098 	.word	0x20000098

00000d8c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8e:	46de      	mov	lr, fp
     d90:	4657      	mov	r7, sl
     d92:	464e      	mov	r6, r9
     d94:	4645      	mov	r5, r8
     d96:	b5e0      	push	{r5, r6, r7, lr}
     d98:	b091      	sub	sp, #68	; 0x44
     d9a:	0005      	movs	r5, r0
     d9c:	000c      	movs	r4, r1
     d9e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     da0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     da2:	0008      	movs	r0, r1
     da4:	4bbc      	ldr	r3, [pc, #752]	; (1098 <usart_init+0x30c>)
     da6:	4798      	blx	r3
     da8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     daa:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     dac:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     dae:	07db      	lsls	r3, r3, #31
     db0:	d506      	bpl.n	dc0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     db2:	b011      	add	sp, #68	; 0x44
     db4:	bc3c      	pop	{r2, r3, r4, r5}
     db6:	4690      	mov	r8, r2
     db8:	4699      	mov	r9, r3
     dba:	46a2      	mov	sl, r4
     dbc:	46ab      	mov	fp, r5
     dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     dc0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     dc2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     dc4:	079b      	lsls	r3, r3, #30
     dc6:	d4f4      	bmi.n	db2 <usart_init+0x26>
     dc8:	49b4      	ldr	r1, [pc, #720]	; (109c <usart_init+0x310>)
     dca:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     dcc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     dce:	2301      	movs	r3, #1
     dd0:	40bb      	lsls	r3, r7
     dd2:	4303      	orrs	r3, r0
     dd4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     dd6:	a90f      	add	r1, sp, #60	; 0x3c
     dd8:	272d      	movs	r7, #45	; 0x2d
     dda:	5df3      	ldrb	r3, [r6, r7]
     ddc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dde:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     de0:	b2d3      	uxtb	r3, r2
     de2:	9302      	str	r3, [sp, #8]
     de4:	0018      	movs	r0, r3
     de6:	4bae      	ldr	r3, [pc, #696]	; (10a0 <usart_init+0x314>)
     de8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     dea:	9802      	ldr	r0, [sp, #8]
     dec:	4bad      	ldr	r3, [pc, #692]	; (10a4 <usart_init+0x318>)
     dee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     df0:	5df0      	ldrb	r0, [r6, r7]
     df2:	2100      	movs	r1, #0
     df4:	4bac      	ldr	r3, [pc, #688]	; (10a8 <usart_init+0x31c>)
     df6:	4798      	blx	r3
	module->character_size = config->character_size;
     df8:	7af3      	ldrb	r3, [r6, #11]
     dfa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     dfc:	2324      	movs	r3, #36	; 0x24
     dfe:	5cf3      	ldrb	r3, [r6, r3]
     e00:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     e02:	2325      	movs	r3, #37	; 0x25
     e04:	5cf3      	ldrb	r3, [r6, r3]
     e06:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     e08:	7ef3      	ldrb	r3, [r6, #27]
     e0a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     e0c:	7f33      	ldrb	r3, [r6, #28]
     e0e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e10:	682b      	ldr	r3, [r5, #0]
     e12:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e14:	0018      	movs	r0, r3
     e16:	4ba0      	ldr	r3, [pc, #640]	; (1098 <usart_init+0x30c>)
     e18:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e1a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     e1c:	2200      	movs	r2, #0
     e1e:	230e      	movs	r3, #14
     e20:	a906      	add	r1, sp, #24
     e22:	468c      	mov	ip, r1
     e24:	4463      	add	r3, ip
     e26:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     e28:	8a32      	ldrh	r2, [r6, #16]
     e2a:	9202      	str	r2, [sp, #8]
     e2c:	2380      	movs	r3, #128	; 0x80
     e2e:	01db      	lsls	r3, r3, #7
     e30:	429a      	cmp	r2, r3
     e32:	d100      	bne.n	e36 <usart_init+0xaa>
     e34:	e09e      	b.n	f74 <usart_init+0x1e8>
     e36:	d90f      	bls.n	e58 <usart_init+0xcc>
     e38:	23c0      	movs	r3, #192	; 0xc0
     e3a:	01db      	lsls	r3, r3, #7
     e3c:	9a02      	ldr	r2, [sp, #8]
     e3e:	429a      	cmp	r2, r3
     e40:	d100      	bne.n	e44 <usart_init+0xb8>
     e42:	e092      	b.n	f6a <usart_init+0x1de>
     e44:	2380      	movs	r3, #128	; 0x80
     e46:	021b      	lsls	r3, r3, #8
     e48:	429a      	cmp	r2, r3
     e4a:	d000      	beq.n	e4e <usart_init+0xc2>
     e4c:	e11f      	b.n	108e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e4e:	2303      	movs	r3, #3
     e50:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e52:	2300      	movs	r3, #0
     e54:	9307      	str	r3, [sp, #28]
     e56:	e008      	b.n	e6a <usart_init+0xde>
	switch (config->sample_rate) {
     e58:	2380      	movs	r3, #128	; 0x80
     e5a:	019b      	lsls	r3, r3, #6
     e5c:	429a      	cmp	r2, r3
     e5e:	d000      	beq.n	e62 <usart_init+0xd6>
     e60:	e115      	b.n	108e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e62:	2310      	movs	r3, #16
     e64:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e66:	3b0f      	subs	r3, #15
     e68:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     e6a:	6833      	ldr	r3, [r6, #0]
     e6c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     e6e:	68f3      	ldr	r3, [r6, #12]
     e70:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     e72:	6973      	ldr	r3, [r6, #20]
     e74:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e76:	7e33      	ldrb	r3, [r6, #24]
     e78:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e7a:	2326      	movs	r3, #38	; 0x26
     e7c:	5cf3      	ldrb	r3, [r6, r3]
     e7e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     e80:	6873      	ldr	r3, [r6, #4]
     e82:	4699      	mov	r9, r3
	switch (transfer_mode)
     e84:	2b00      	cmp	r3, #0
     e86:	d100      	bne.n	e8a <usart_init+0xfe>
     e88:	e0a0      	b.n	fcc <usart_init+0x240>
     e8a:	2380      	movs	r3, #128	; 0x80
     e8c:	055b      	lsls	r3, r3, #21
     e8e:	4599      	cmp	r9, r3
     e90:	d100      	bne.n	e94 <usart_init+0x108>
     e92:	e084      	b.n	f9e <usart_init+0x212>
	if(config->encoding_format_enable) {
     e94:	7e73      	ldrb	r3, [r6, #25]
     e96:	2b00      	cmp	r3, #0
     e98:	d002      	beq.n	ea0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     e9a:	7eb3      	ldrb	r3, [r6, #26]
     e9c:	4642      	mov	r2, r8
     e9e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ea0:	682a      	ldr	r2, [r5, #0]
     ea2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ea4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ea6:	2b00      	cmp	r3, #0
     ea8:	d1fc      	bne.n	ea4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     eaa:	330e      	adds	r3, #14
     eac:	aa06      	add	r2, sp, #24
     eae:	4694      	mov	ip, r2
     eb0:	4463      	add	r3, ip
     eb2:	881b      	ldrh	r3, [r3, #0]
     eb4:	4642      	mov	r2, r8
     eb6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     eb8:	9b05      	ldr	r3, [sp, #20]
     eba:	9a03      	ldr	r2, [sp, #12]
     ebc:	4313      	orrs	r3, r2
     ebe:	9a04      	ldr	r2, [sp, #16]
     ec0:	4313      	orrs	r3, r2
     ec2:	464a      	mov	r2, r9
     ec4:	4313      	orrs	r3, r2
     ec6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ec8:	465b      	mov	r3, fp
     eca:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     ecc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ece:	4653      	mov	r3, sl
     ed0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     ed2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     ed4:	2327      	movs	r3, #39	; 0x27
     ed6:	5cf3      	ldrb	r3, [r6, r3]
     ed8:	2b00      	cmp	r3, #0
     eda:	d101      	bne.n	ee0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     edc:	3304      	adds	r3, #4
     ede:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ee0:	7e73      	ldrb	r3, [r6, #25]
     ee2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ee4:	7f32      	ldrb	r2, [r6, #28]
     ee6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ee8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     eea:	7f72      	ldrb	r2, [r6, #29]
     eec:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     eee:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ef0:	2224      	movs	r2, #36	; 0x24
     ef2:	5cb2      	ldrb	r2, [r6, r2]
     ef4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ef6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     ef8:	2225      	movs	r2, #37	; 0x25
     efa:	5cb2      	ldrb	r2, [r6, r2]
     efc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     efe:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     f00:	7ab1      	ldrb	r1, [r6, #10]
     f02:	7af2      	ldrb	r2, [r6, #11]
     f04:	4311      	orrs	r1, r2
     f06:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     f08:	8933      	ldrh	r3, [r6, #8]
     f0a:	2bff      	cmp	r3, #255	; 0xff
     f0c:	d100      	bne.n	f10 <usart_init+0x184>
     f0e:	e081      	b.n	1014 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f10:	2280      	movs	r2, #128	; 0x80
     f12:	0452      	lsls	r2, r2, #17
     f14:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     f16:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     f18:	232c      	movs	r3, #44	; 0x2c
     f1a:	5cf3      	ldrb	r3, [r6, r3]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d103      	bne.n	f28 <usart_init+0x19c>
     f20:	4b62      	ldr	r3, [pc, #392]	; (10ac <usart_init+0x320>)
     f22:	789b      	ldrb	r3, [r3, #2]
     f24:	079b      	lsls	r3, r3, #30
     f26:	d501      	bpl.n	f2c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f28:	2380      	movs	r3, #128	; 0x80
     f2a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     f2c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f2e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     f30:	2b00      	cmp	r3, #0
     f32:	d1fc      	bne.n	f2e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     f34:	4643      	mov	r3, r8
     f36:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     f38:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f3a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     f3c:	2b00      	cmp	r3, #0
     f3e:	d1fc      	bne.n	f3a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     f40:	4643      	mov	r3, r8
     f42:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f44:	ab0e      	add	r3, sp, #56	; 0x38
     f46:	2280      	movs	r2, #128	; 0x80
     f48:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f4a:	2200      	movs	r2, #0
     f4c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     f4e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f50:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     f52:	6b33      	ldr	r3, [r6, #48]	; 0x30
     f54:	930a      	str	r3, [sp, #40]	; 0x28
     f56:	6b73      	ldr	r3, [r6, #52]	; 0x34
     f58:	930b      	str	r3, [sp, #44]	; 0x2c
     f5a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     f5c:	930c      	str	r3, [sp, #48]	; 0x30
     f5e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     f60:	9302      	str	r3, [sp, #8]
     f62:	930d      	str	r3, [sp, #52]	; 0x34
     f64:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f66:	ae0a      	add	r6, sp, #40	; 0x28
     f68:	e063      	b.n	1032 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f6a:	2308      	movs	r3, #8
     f6c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f6e:	3b07      	subs	r3, #7
     f70:	9307      	str	r3, [sp, #28]
     f72:	e77a      	b.n	e6a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     f74:	6833      	ldr	r3, [r6, #0]
     f76:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f78:	68f3      	ldr	r3, [r6, #12]
     f7a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     f7c:	6973      	ldr	r3, [r6, #20]
     f7e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f80:	7e33      	ldrb	r3, [r6, #24]
     f82:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f84:	2326      	movs	r3, #38	; 0x26
     f86:	5cf3      	ldrb	r3, [r6, r3]
     f88:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f8a:	6873      	ldr	r3, [r6, #4]
     f8c:	4699      	mov	r9, r3
	switch (transfer_mode)
     f8e:	2b00      	cmp	r3, #0
     f90:	d018      	beq.n	fc4 <usart_init+0x238>
     f92:	2380      	movs	r3, #128	; 0x80
     f94:	055b      	lsls	r3, r3, #21
     f96:	4599      	cmp	r9, r3
     f98:	d001      	beq.n	f9e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     f9a:	2000      	movs	r0, #0
     f9c:	e025      	b.n	fea <usart_init+0x25e>
			if (!config->use_external_clock) {
     f9e:	2327      	movs	r3, #39	; 0x27
     fa0:	5cf3      	ldrb	r3, [r6, r3]
     fa2:	2b00      	cmp	r3, #0
     fa4:	d000      	beq.n	fa8 <usart_init+0x21c>
     fa6:	e775      	b.n	e94 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     fa8:	6a33      	ldr	r3, [r6, #32]
     faa:	001f      	movs	r7, r3
     fac:	b2c0      	uxtb	r0, r0
     fae:	4b40      	ldr	r3, [pc, #256]	; (10b0 <usart_init+0x324>)
     fb0:	4798      	blx	r3
     fb2:	0001      	movs	r1, r0
     fb4:	220e      	movs	r2, #14
     fb6:	ab06      	add	r3, sp, #24
     fb8:	469c      	mov	ip, r3
     fba:	4462      	add	r2, ip
     fbc:	0038      	movs	r0, r7
     fbe:	4b3d      	ldr	r3, [pc, #244]	; (10b4 <usart_init+0x328>)
     fc0:	4798      	blx	r3
     fc2:	e012      	b.n	fea <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fc4:	2308      	movs	r3, #8
     fc6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fc8:	2300      	movs	r3, #0
     fca:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     fcc:	2327      	movs	r3, #39	; 0x27
     fce:	5cf3      	ldrb	r3, [r6, r3]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d00e      	beq.n	ff2 <usart_init+0x266>
				status_code =
     fd4:	9b06      	ldr	r3, [sp, #24]
     fd6:	9300      	str	r3, [sp, #0]
     fd8:	9b07      	ldr	r3, [sp, #28]
     fda:	220e      	movs	r2, #14
     fdc:	a906      	add	r1, sp, #24
     fde:	468c      	mov	ip, r1
     fe0:	4462      	add	r2, ip
     fe2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     fe4:	6a30      	ldr	r0, [r6, #32]
     fe6:	4f34      	ldr	r7, [pc, #208]	; (10b8 <usart_init+0x32c>)
     fe8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     fea:	2800      	cmp	r0, #0
     fec:	d000      	beq.n	ff0 <usart_init+0x264>
     fee:	e6e0      	b.n	db2 <usart_init+0x26>
     ff0:	e750      	b.n	e94 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     ff2:	6a33      	ldr	r3, [r6, #32]
     ff4:	001f      	movs	r7, r3
     ff6:	b2c0      	uxtb	r0, r0
     ff8:	4b2d      	ldr	r3, [pc, #180]	; (10b0 <usart_init+0x324>)
     ffa:	4798      	blx	r3
     ffc:	0001      	movs	r1, r0
				status_code =
     ffe:	9b06      	ldr	r3, [sp, #24]
    1000:	9300      	str	r3, [sp, #0]
    1002:	9b07      	ldr	r3, [sp, #28]
    1004:	220e      	movs	r2, #14
    1006:	a806      	add	r0, sp, #24
    1008:	4684      	mov	ip, r0
    100a:	4462      	add	r2, ip
    100c:	0038      	movs	r0, r7
    100e:	4f2a      	ldr	r7, [pc, #168]	; (10b8 <usart_init+0x32c>)
    1010:	47b8      	blx	r7
    1012:	e7ea      	b.n	fea <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1014:	7ef3      	ldrb	r3, [r6, #27]
    1016:	2b00      	cmp	r3, #0
    1018:	d100      	bne.n	101c <usart_init+0x290>
    101a:	e77d      	b.n	f18 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    101c:	2380      	movs	r3, #128	; 0x80
    101e:	04db      	lsls	r3, r3, #19
    1020:	431f      	orrs	r7, r3
    1022:	e779      	b.n	f18 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1024:	0020      	movs	r0, r4
    1026:	4b25      	ldr	r3, [pc, #148]	; (10bc <usart_init+0x330>)
    1028:	4798      	blx	r3
    102a:	e007      	b.n	103c <usart_init+0x2b0>
    102c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    102e:	2f04      	cmp	r7, #4
    1030:	d00d      	beq.n	104e <usart_init+0x2c2>
    1032:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1034:	00bb      	lsls	r3, r7, #2
    1036:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1038:	2800      	cmp	r0, #0
    103a:	d0f3      	beq.n	1024 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    103c:	1c43      	adds	r3, r0, #1
    103e:	d0f5      	beq.n	102c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1040:	a90e      	add	r1, sp, #56	; 0x38
    1042:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1044:	0c00      	lsrs	r0, r0, #16
    1046:	b2c0      	uxtb	r0, r0
    1048:	4b1d      	ldr	r3, [pc, #116]	; (10c0 <usart_init+0x334>)
    104a:	4798      	blx	r3
    104c:	e7ee      	b.n	102c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    104e:	2300      	movs	r3, #0
    1050:	60eb      	str	r3, [r5, #12]
    1052:	612b      	str	r3, [r5, #16]
    1054:	616b      	str	r3, [r5, #20]
    1056:	61ab      	str	r3, [r5, #24]
    1058:	61eb      	str	r3, [r5, #28]
    105a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    105c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    105e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1060:	2200      	movs	r2, #0
    1062:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1064:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1066:	3330      	adds	r3, #48	; 0x30
    1068:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    106a:	3301      	adds	r3, #1
    106c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    106e:	3301      	adds	r3, #1
    1070:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1072:	3301      	adds	r3, #1
    1074:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1076:	6828      	ldr	r0, [r5, #0]
    1078:	4b07      	ldr	r3, [pc, #28]	; (1098 <usart_init+0x30c>)
    107a:	4798      	blx	r3
    107c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    107e:	4911      	ldr	r1, [pc, #68]	; (10c4 <usart_init+0x338>)
    1080:	4b11      	ldr	r3, [pc, #68]	; (10c8 <usart_init+0x33c>)
    1082:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1084:	00a4      	lsls	r4, r4, #2
    1086:	4b11      	ldr	r3, [pc, #68]	; (10cc <usart_init+0x340>)
    1088:	50e5      	str	r5, [r4, r3]
	return status_code;
    108a:	2000      	movs	r0, #0
    108c:	e691      	b.n	db2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    108e:	2310      	movs	r3, #16
    1090:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1092:	2300      	movs	r3, #0
    1094:	9307      	str	r3, [sp, #28]
    1096:	e6e8      	b.n	e6a <usart_init+0xde>
    1098:	00000c85 	.word	0x00000c85
    109c:	40000400 	.word	0x40000400
    10a0:	000017b9 	.word	0x000017b9
    10a4:	0000172d 	.word	0x0000172d
    10a8:	00000ac1 	.word	0x00000ac1
    10ac:	41002000 	.word	0x41002000
    10b0:	000017d5 	.word	0x000017d5
    10b4:	00000a03 	.word	0x00000a03
    10b8:	00000a2d 	.word	0x00000a2d
    10bc:	00000b0d 	.word	0x00000b0d
    10c0:	000018b1 	.word	0x000018b1
    10c4:	000011e1 	.word	0x000011e1
    10c8:	00000cc1 	.word	0x00000cc1
    10cc:	200000d8 	.word	0x200000d8

000010d0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    10d0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    10d2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    10d4:	2a00      	cmp	r2, #0
    10d6:	d101      	bne.n	10dc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    10d8:	0018      	movs	r0, r3
    10da:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    10dc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    10de:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    10e0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    10e2:	2a00      	cmp	r2, #0
    10e4:	d1f8      	bne.n	10d8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    10e6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    10e8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    10ea:	2a00      	cmp	r2, #0
    10ec:	d1fc      	bne.n	10e8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    10ee:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    10f0:	2102      	movs	r1, #2
    10f2:	7e1a      	ldrb	r2, [r3, #24]
    10f4:	420a      	tst	r2, r1
    10f6:	d0fc      	beq.n	10f2 <usart_write_wait+0x22>
	return STATUS_OK;
    10f8:	2300      	movs	r3, #0
    10fa:	e7ed      	b.n	10d8 <usart_write_wait+0x8>

000010fc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    10fc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    10fe:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1100:	2a00      	cmp	r2, #0
    1102:	d101      	bne.n	1108 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1104:	0018      	movs	r0, r3
    1106:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1108:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    110a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    110c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    110e:	2a00      	cmp	r2, #0
    1110:	d1f8      	bne.n	1104 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1112:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1114:	7e10      	ldrb	r0, [r2, #24]
    1116:	0740      	lsls	r0, r0, #29
    1118:	d5f4      	bpl.n	1104 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    111a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    111c:	2b00      	cmp	r3, #0
    111e:	d1fc      	bne.n	111a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1120:	8b53      	ldrh	r3, [r2, #26]
    1122:	b2db      	uxtb	r3, r3
	if (error_code) {
    1124:	0698      	lsls	r0, r3, #26
    1126:	d01d      	beq.n	1164 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1128:	0798      	lsls	r0, r3, #30
    112a:	d503      	bpl.n	1134 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    112c:	2302      	movs	r3, #2
    112e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1130:	3318      	adds	r3, #24
    1132:	e7e7      	b.n	1104 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1134:	0758      	lsls	r0, r3, #29
    1136:	d503      	bpl.n	1140 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1138:	2304      	movs	r3, #4
    113a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    113c:	331a      	adds	r3, #26
    113e:	e7e1      	b.n	1104 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1140:	07d8      	lsls	r0, r3, #31
    1142:	d503      	bpl.n	114c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1144:	2301      	movs	r3, #1
    1146:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1148:	3312      	adds	r3, #18
    114a:	e7db      	b.n	1104 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    114c:	06d8      	lsls	r0, r3, #27
    114e:	d503      	bpl.n	1158 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1150:	2310      	movs	r3, #16
    1152:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1154:	3332      	adds	r3, #50	; 0x32
    1156:	e7d5      	b.n	1104 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1158:	069b      	lsls	r3, r3, #26
    115a:	d503      	bpl.n	1164 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    115c:	2320      	movs	r3, #32
    115e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1160:	3321      	adds	r3, #33	; 0x21
    1162:	e7cf      	b.n	1104 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1164:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1166:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1168:	2300      	movs	r3, #0
    116a:	e7cb      	b.n	1104 <usart_read_wait+0x8>

0000116c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    116e:	0006      	movs	r6, r0
    1170:	000c      	movs	r4, r1
    1172:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1174:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1176:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <_usart_write_buffer+0x34>)
    1178:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    117a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    117c:	b29b      	uxth	r3, r3
    117e:	2b00      	cmp	r3, #0
    1180:	d003      	beq.n	118a <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1182:	4b08      	ldr	r3, [pc, #32]	; (11a4 <_usart_write_buffer+0x38>)
    1184:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1186:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    118a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    118c:	4b05      	ldr	r3, [pc, #20]	; (11a4 <_usart_write_buffer+0x38>)
    118e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1190:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1192:	2205      	movs	r2, #5
    1194:	2333      	movs	r3, #51	; 0x33
    1196:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1198:	3b32      	subs	r3, #50	; 0x32
    119a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    119c:	2000      	movs	r0, #0
    119e:	e7f3      	b.n	1188 <_usart_write_buffer+0x1c>
    11a0:	00000185 	.word	0x00000185
    11a4:	000001c5 	.word	0x000001c5

000011a8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    11a8:	1c93      	adds	r3, r2, #2
    11aa:	009b      	lsls	r3, r3, #2
    11ac:	18c3      	adds	r3, r0, r3
    11ae:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    11b0:	2130      	movs	r1, #48	; 0x30
    11b2:	2301      	movs	r3, #1
    11b4:	4093      	lsls	r3, r2
    11b6:	001a      	movs	r2, r3
    11b8:	5c43      	ldrb	r3, [r0, r1]
    11ba:	4313      	orrs	r3, r2
    11bc:	5443      	strb	r3, [r0, r1]
}
    11be:	4770      	bx	lr

000011c0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    11c0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11c2:	2317      	movs	r3, #23
	if (length == 0) {
    11c4:	2a00      	cmp	r2, #0
    11c6:	d101      	bne.n	11cc <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    11c8:	0018      	movs	r0, r3
    11ca:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    11cc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    11ce:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    11d0:	2c00      	cmp	r4, #0
    11d2:	d0f9      	beq.n	11c8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    11d4:	4b01      	ldr	r3, [pc, #4]	; (11dc <usart_write_buffer_job+0x1c>)
    11d6:	4798      	blx	r3
    11d8:	0003      	movs	r3, r0
    11da:	e7f5      	b.n	11c8 <usart_write_buffer_job+0x8>
    11dc:	0000116d 	.word	0x0000116d

000011e0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    11e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    11e2:	0080      	lsls	r0, r0, #2
    11e4:	4b62      	ldr	r3, [pc, #392]	; (1370 <_usart_interrupt_handler+0x190>)
    11e6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    11e8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    11ea:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    11ec:	2b00      	cmp	r3, #0
    11ee:	d1fc      	bne.n	11ea <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    11f0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    11f2:	7da6      	ldrb	r6, [r4, #22]
    11f4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    11f6:	2330      	movs	r3, #48	; 0x30
    11f8:	5ceb      	ldrb	r3, [r5, r3]
    11fa:	2231      	movs	r2, #49	; 0x31
    11fc:	5caf      	ldrb	r7, [r5, r2]
    11fe:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1200:	07f3      	lsls	r3, r6, #31
    1202:	d522      	bpl.n	124a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1204:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1206:	b29b      	uxth	r3, r3
    1208:	2b00      	cmp	r3, #0
    120a:	d01c      	beq.n	1246 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    120c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    120e:	7813      	ldrb	r3, [r2, #0]
    1210:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1212:	1c51      	adds	r1, r2, #1
    1214:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1216:	7969      	ldrb	r1, [r5, #5]
    1218:	2901      	cmp	r1, #1
    121a:	d00e      	beq.n	123a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    121c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    121e:	05db      	lsls	r3, r3, #23
    1220:	0ddb      	lsrs	r3, r3, #23
    1222:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1224:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1226:	3b01      	subs	r3, #1
    1228:	b29b      	uxth	r3, r3
    122a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    122c:	2b00      	cmp	r3, #0
    122e:	d10c      	bne.n	124a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1230:	3301      	adds	r3, #1
    1232:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1234:	3301      	adds	r3, #1
    1236:	75a3      	strb	r3, [r4, #22]
    1238:	e007      	b.n	124a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    123a:	7851      	ldrb	r1, [r2, #1]
    123c:	0209      	lsls	r1, r1, #8
    123e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1240:	3202      	adds	r2, #2
    1242:	62aa      	str	r2, [r5, #40]	; 0x28
    1244:	e7eb      	b.n	121e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1246:	2301      	movs	r3, #1
    1248:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    124a:	07b3      	lsls	r3, r6, #30
    124c:	d506      	bpl.n	125c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    124e:	2302      	movs	r3, #2
    1250:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1252:	2200      	movs	r2, #0
    1254:	3331      	adds	r3, #49	; 0x31
    1256:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1258:	07fb      	lsls	r3, r7, #31
    125a:	d41a      	bmi.n	1292 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    125c:	0773      	lsls	r3, r6, #29
    125e:	d565      	bpl.n	132c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1260:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1262:	b29b      	uxth	r3, r3
    1264:	2b00      	cmp	r3, #0
    1266:	d05f      	beq.n	1328 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1268:	8b63      	ldrh	r3, [r4, #26]
    126a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    126c:	071a      	lsls	r2, r3, #28
    126e:	d414      	bmi.n	129a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1270:	223f      	movs	r2, #63	; 0x3f
    1272:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1274:	2b00      	cmp	r3, #0
    1276:	d034      	beq.n	12e2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1278:	079a      	lsls	r2, r3, #30
    127a:	d511      	bpl.n	12a0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    127c:	221a      	movs	r2, #26
    127e:	2332      	movs	r3, #50	; 0x32
    1280:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1282:	3b30      	subs	r3, #48	; 0x30
    1284:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1286:	077b      	lsls	r3, r7, #29
    1288:	d550      	bpl.n	132c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    128a:	0028      	movs	r0, r5
    128c:	696b      	ldr	r3, [r5, #20]
    128e:	4798      	blx	r3
    1290:	e04c      	b.n	132c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1292:	0028      	movs	r0, r5
    1294:	68eb      	ldr	r3, [r5, #12]
    1296:	4798      	blx	r3
    1298:	e7e0      	b.n	125c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    129a:	2237      	movs	r2, #55	; 0x37
    129c:	4013      	ands	r3, r2
    129e:	e7e9      	b.n	1274 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    12a0:	075a      	lsls	r2, r3, #29
    12a2:	d505      	bpl.n	12b0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    12a4:	221e      	movs	r2, #30
    12a6:	2332      	movs	r3, #50	; 0x32
    12a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    12aa:	3b2e      	subs	r3, #46	; 0x2e
    12ac:	8363      	strh	r3, [r4, #26]
    12ae:	e7ea      	b.n	1286 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    12b0:	07da      	lsls	r2, r3, #31
    12b2:	d505      	bpl.n	12c0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    12b4:	2213      	movs	r2, #19
    12b6:	2332      	movs	r3, #50	; 0x32
    12b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    12ba:	3b31      	subs	r3, #49	; 0x31
    12bc:	8363      	strh	r3, [r4, #26]
    12be:	e7e2      	b.n	1286 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    12c0:	06da      	lsls	r2, r3, #27
    12c2:	d505      	bpl.n	12d0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    12c4:	2242      	movs	r2, #66	; 0x42
    12c6:	2332      	movs	r3, #50	; 0x32
    12c8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    12ca:	3b22      	subs	r3, #34	; 0x22
    12cc:	8363      	strh	r3, [r4, #26]
    12ce:	e7da      	b.n	1286 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    12d0:	2220      	movs	r2, #32
    12d2:	421a      	tst	r2, r3
    12d4:	d0d7      	beq.n	1286 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    12d6:	3221      	adds	r2, #33	; 0x21
    12d8:	2332      	movs	r3, #50	; 0x32
    12da:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    12dc:	3b12      	subs	r3, #18
    12de:	8363      	strh	r3, [r4, #26]
    12e0:	e7d1      	b.n	1286 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    12e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    12e4:	05db      	lsls	r3, r3, #23
    12e6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    12e8:	b2da      	uxtb	r2, r3
    12ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
    12ec:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    12ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12f0:	1c51      	adds	r1, r2, #1
    12f2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12f4:	7969      	ldrb	r1, [r5, #5]
    12f6:	2901      	cmp	r1, #1
    12f8:	d010      	beq.n	131c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    12fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12fc:	3b01      	subs	r3, #1
    12fe:	b29b      	uxth	r3, r3
    1300:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1302:	2b00      	cmp	r3, #0
    1304:	d112      	bne.n	132c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1306:	3304      	adds	r3, #4
    1308:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    130a:	2200      	movs	r2, #0
    130c:	332e      	adds	r3, #46	; 0x2e
    130e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1310:	07bb      	lsls	r3, r7, #30
    1312:	d50b      	bpl.n	132c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1314:	0028      	movs	r0, r5
    1316:	692b      	ldr	r3, [r5, #16]
    1318:	4798      	blx	r3
    131a:	e007      	b.n	132c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    131c:	0a1b      	lsrs	r3, r3, #8
    131e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1320:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1322:	3301      	adds	r3, #1
    1324:	626b      	str	r3, [r5, #36]	; 0x24
    1326:	e7e8      	b.n	12fa <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1328:	2304      	movs	r3, #4
    132a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    132c:	06f3      	lsls	r3, r6, #27
    132e:	d504      	bpl.n	133a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1330:	2310      	movs	r3, #16
    1332:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1334:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1336:	06fb      	lsls	r3, r7, #27
    1338:	d40e      	bmi.n	1358 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    133a:	06b3      	lsls	r3, r6, #26
    133c:	d504      	bpl.n	1348 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    133e:	2320      	movs	r3, #32
    1340:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1342:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1344:	073b      	lsls	r3, r7, #28
    1346:	d40b      	bmi.n	1360 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1348:	0733      	lsls	r3, r6, #28
    134a:	d504      	bpl.n	1356 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    134c:	2308      	movs	r3, #8
    134e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1350:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1352:	06bb      	lsls	r3, r7, #26
    1354:	d408      	bmi.n	1368 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1358:	0028      	movs	r0, r5
    135a:	69eb      	ldr	r3, [r5, #28]
    135c:	4798      	blx	r3
    135e:	e7ec      	b.n	133a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1360:	0028      	movs	r0, r5
    1362:	69ab      	ldr	r3, [r5, #24]
    1364:	4798      	blx	r3
    1366:	e7ef      	b.n	1348 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1368:	6a2b      	ldr	r3, [r5, #32]
    136a:	0028      	movs	r0, r5
    136c:	4798      	blx	r3
}
    136e:	e7f2      	b.n	1356 <_usart_interrupt_handler+0x176>
    1370:	200000d8 	.word	0x200000d8

00001374 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1374:	b510      	push	{r4, lr}
	switch (clock_source) {
    1376:	2808      	cmp	r0, #8
    1378:	d803      	bhi.n	1382 <system_clock_source_get_hz+0xe>
    137a:	0080      	lsls	r0, r0, #2
    137c:	4b1b      	ldr	r3, [pc, #108]	; (13ec <system_clock_source_get_hz+0x78>)
    137e:	581b      	ldr	r3, [r3, r0]
    1380:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1382:	2000      	movs	r0, #0
    1384:	e030      	b.n	13e8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1386:	4b1a      	ldr	r3, [pc, #104]	; (13f0 <system_clock_source_get_hz+0x7c>)
    1388:	6918      	ldr	r0, [r3, #16]
    138a:	e02d      	b.n	13e8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    138c:	4b19      	ldr	r3, [pc, #100]	; (13f4 <system_clock_source_get_hz+0x80>)
    138e:	6a1b      	ldr	r3, [r3, #32]
    1390:	059b      	lsls	r3, r3, #22
    1392:	0f9b      	lsrs	r3, r3, #30
    1394:	4818      	ldr	r0, [pc, #96]	; (13f8 <system_clock_source_get_hz+0x84>)
    1396:	40d8      	lsrs	r0, r3
    1398:	e026      	b.n	13e8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    139a:	4b15      	ldr	r3, [pc, #84]	; (13f0 <system_clock_source_get_hz+0x7c>)
    139c:	6958      	ldr	r0, [r3, #20]
    139e:	e023      	b.n	13e8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13a0:	4b13      	ldr	r3, [pc, #76]	; (13f0 <system_clock_source_get_hz+0x7c>)
    13a2:	681b      	ldr	r3, [r3, #0]
			return 0;
    13a4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13a6:	079b      	lsls	r3, r3, #30
    13a8:	d51e      	bpl.n	13e8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13aa:	4912      	ldr	r1, [pc, #72]	; (13f4 <system_clock_source_get_hz+0x80>)
    13ac:	2210      	movs	r2, #16
    13ae:	68cb      	ldr	r3, [r1, #12]
    13b0:	421a      	tst	r2, r3
    13b2:	d0fc      	beq.n	13ae <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    13b4:	4b0e      	ldr	r3, [pc, #56]	; (13f0 <system_clock_source_get_hz+0x7c>)
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	075b      	lsls	r3, r3, #29
    13ba:	d401      	bmi.n	13c0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    13bc:	480f      	ldr	r0, [pc, #60]	; (13fc <system_clock_source_get_hz+0x88>)
    13be:	e013      	b.n	13e8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13c0:	2000      	movs	r0, #0
    13c2:	4b0f      	ldr	r3, [pc, #60]	; (1400 <system_clock_source_get_hz+0x8c>)
    13c4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    13c6:	4b0a      	ldr	r3, [pc, #40]	; (13f0 <system_clock_source_get_hz+0x7c>)
    13c8:	689b      	ldr	r3, [r3, #8]
    13ca:	041b      	lsls	r3, r3, #16
    13cc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    13ce:	4358      	muls	r0, r3
    13d0:	e00a      	b.n	13e8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    13d2:	2350      	movs	r3, #80	; 0x50
    13d4:	4a07      	ldr	r2, [pc, #28]	; (13f4 <system_clock_source_get_hz+0x80>)
    13d6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    13d8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    13da:	075b      	lsls	r3, r3, #29
    13dc:	d504      	bpl.n	13e8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <system_clock_source_get_hz+0x7c>)
    13e0:	68d8      	ldr	r0, [r3, #12]
    13e2:	e001      	b.n	13e8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    13e4:	2080      	movs	r0, #128	; 0x80
    13e6:	0200      	lsls	r0, r0, #8
	}
}
    13e8:	bd10      	pop	{r4, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	00003158 	.word	0x00003158
    13f0:	200000b0 	.word	0x200000b0
    13f4:	40000800 	.word	0x40000800
    13f8:	007a1200 	.word	0x007a1200
    13fc:	02dc6c00 	.word	0x02dc6c00
    1400:	000017d5 	.word	0x000017d5

00001404 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1404:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1406:	490c      	ldr	r1, [pc, #48]	; (1438 <system_clock_source_osc8m_set_config+0x34>)
    1408:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    140a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    140c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    140e:	7840      	ldrb	r0, [r0, #1]
    1410:	2201      	movs	r2, #1
    1412:	4010      	ands	r0, r2
    1414:	0180      	lsls	r0, r0, #6
    1416:	2640      	movs	r6, #64	; 0x40
    1418:	43b3      	bics	r3, r6
    141a:	4303      	orrs	r3, r0
    141c:	402a      	ands	r2, r5
    141e:	01d2      	lsls	r2, r2, #7
    1420:	2080      	movs	r0, #128	; 0x80
    1422:	4383      	bics	r3, r0
    1424:	4313      	orrs	r3, r2
    1426:	2203      	movs	r2, #3
    1428:	4022      	ands	r2, r4
    142a:	0212      	lsls	r2, r2, #8
    142c:	4803      	ldr	r0, [pc, #12]	; (143c <system_clock_source_osc8m_set_config+0x38>)
    142e:	4003      	ands	r3, r0
    1430:	4313      	orrs	r3, r2
    1432:	620b      	str	r3, [r1, #32]
}
    1434:	bd70      	pop	{r4, r5, r6, pc}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	40000800 	.word	0x40000800
    143c:	fffffcff 	.word	0xfffffcff

00001440 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1440:	2808      	cmp	r0, #8
    1442:	d803      	bhi.n	144c <system_clock_source_enable+0xc>
    1444:	0080      	lsls	r0, r0, #2
    1446:	4b25      	ldr	r3, [pc, #148]	; (14dc <system_clock_source_enable+0x9c>)
    1448:	581b      	ldr	r3, [r3, r0]
    144a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    144c:	2017      	movs	r0, #23
    144e:	e044      	b.n	14da <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1450:	4a23      	ldr	r2, [pc, #140]	; (14e0 <system_clock_source_enable+0xa0>)
    1452:	6a13      	ldr	r3, [r2, #32]
    1454:	2102      	movs	r1, #2
    1456:	430b      	orrs	r3, r1
    1458:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    145a:	2000      	movs	r0, #0
    145c:	e03d      	b.n	14da <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    145e:	4a20      	ldr	r2, [pc, #128]	; (14e0 <system_clock_source_enable+0xa0>)
    1460:	6993      	ldr	r3, [r2, #24]
    1462:	2102      	movs	r1, #2
    1464:	430b      	orrs	r3, r1
    1466:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1468:	2000      	movs	r0, #0
		break;
    146a:	e036      	b.n	14da <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    146c:	4a1c      	ldr	r2, [pc, #112]	; (14e0 <system_clock_source_enable+0xa0>)
    146e:	8a13      	ldrh	r3, [r2, #16]
    1470:	2102      	movs	r1, #2
    1472:	430b      	orrs	r3, r1
    1474:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1476:	2000      	movs	r0, #0
		break;
    1478:	e02f      	b.n	14da <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    147a:	4a19      	ldr	r2, [pc, #100]	; (14e0 <system_clock_source_enable+0xa0>)
    147c:	8a93      	ldrh	r3, [r2, #20]
    147e:	2102      	movs	r1, #2
    1480:	430b      	orrs	r3, r1
    1482:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1484:	2000      	movs	r0, #0
		break;
    1486:	e028      	b.n	14da <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1488:	4916      	ldr	r1, [pc, #88]	; (14e4 <system_clock_source_enable+0xa4>)
    148a:	680b      	ldr	r3, [r1, #0]
    148c:	2202      	movs	r2, #2
    148e:	4313      	orrs	r3, r2
    1490:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1492:	4b13      	ldr	r3, [pc, #76]	; (14e0 <system_clock_source_enable+0xa0>)
    1494:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1496:	0019      	movs	r1, r3
    1498:	320e      	adds	r2, #14
    149a:	68cb      	ldr	r3, [r1, #12]
    149c:	421a      	tst	r2, r3
    149e:	d0fc      	beq.n	149a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    14a0:	4a10      	ldr	r2, [pc, #64]	; (14e4 <system_clock_source_enable+0xa4>)
    14a2:	6891      	ldr	r1, [r2, #8]
    14a4:	4b0e      	ldr	r3, [pc, #56]	; (14e0 <system_clock_source_enable+0xa0>)
    14a6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    14a8:	6852      	ldr	r2, [r2, #4]
    14aa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    14ac:	2200      	movs	r2, #0
    14ae:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14b0:	0019      	movs	r1, r3
    14b2:	3210      	adds	r2, #16
    14b4:	68cb      	ldr	r3, [r1, #12]
    14b6:	421a      	tst	r2, r3
    14b8:	d0fc      	beq.n	14b4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    14ba:	4b0a      	ldr	r3, [pc, #40]	; (14e4 <system_clock_source_enable+0xa4>)
    14bc:	681b      	ldr	r3, [r3, #0]
    14be:	b29b      	uxth	r3, r3
    14c0:	4a07      	ldr	r2, [pc, #28]	; (14e0 <system_clock_source_enable+0xa0>)
    14c2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    14c4:	2000      	movs	r0, #0
    14c6:	e008      	b.n	14da <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    14c8:	4905      	ldr	r1, [pc, #20]	; (14e0 <system_clock_source_enable+0xa0>)
    14ca:	2244      	movs	r2, #68	; 0x44
    14cc:	5c8b      	ldrb	r3, [r1, r2]
    14ce:	2002      	movs	r0, #2
    14d0:	4303      	orrs	r3, r0
    14d2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    14d4:	2000      	movs	r0, #0
		break;
    14d6:	e000      	b.n	14da <system_clock_source_enable+0x9a>
		return STATUS_OK;
    14d8:	2000      	movs	r0, #0
}
    14da:	4770      	bx	lr
    14dc:	0000317c 	.word	0x0000317c
    14e0:	40000800 	.word	0x40000800
    14e4:	200000b0 	.word	0x200000b0

000014e8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    14e8:	b530      	push	{r4, r5, lr}
    14ea:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    14ec:	22c2      	movs	r2, #194	; 0xc2
    14ee:	00d2      	lsls	r2, r2, #3
    14f0:	4b1a      	ldr	r3, [pc, #104]	; (155c <system_clock_init+0x74>)
    14f2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    14f4:	4a1a      	ldr	r2, [pc, #104]	; (1560 <system_clock_init+0x78>)
    14f6:	6853      	ldr	r3, [r2, #4]
    14f8:	211e      	movs	r1, #30
    14fa:	438b      	bics	r3, r1
    14fc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    14fe:	2301      	movs	r3, #1
    1500:	466a      	mov	r2, sp
    1502:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1504:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1506:	4d17      	ldr	r5, [pc, #92]	; (1564 <system_clock_init+0x7c>)
    1508:	b2e0      	uxtb	r0, r4
    150a:	4669      	mov	r1, sp
    150c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    150e:	3401      	adds	r4, #1
    1510:	2c25      	cmp	r4, #37	; 0x25
    1512:	d1f9      	bne.n	1508 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1514:	a803      	add	r0, sp, #12
    1516:	2400      	movs	r4, #0
    1518:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    151a:	2501      	movs	r5, #1
    151c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    151e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1520:	4b11      	ldr	r3, [pc, #68]	; (1568 <system_clock_init+0x80>)
    1522:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1524:	2006      	movs	r0, #6
    1526:	4b11      	ldr	r3, [pc, #68]	; (156c <system_clock_init+0x84>)
    1528:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    152a:	4b11      	ldr	r3, [pc, #68]	; (1570 <system_clock_init+0x88>)
    152c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    152e:	4b11      	ldr	r3, [pc, #68]	; (1574 <system_clock_init+0x8c>)
    1530:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1532:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1534:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1536:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1538:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    153a:	466b      	mov	r3, sp
    153c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    153e:	2306      	movs	r3, #6
    1540:	466a      	mov	r2, sp
    1542:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1544:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1546:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1548:	4669      	mov	r1, sp
    154a:	2000      	movs	r0, #0
    154c:	4b0a      	ldr	r3, [pc, #40]	; (1578 <system_clock_init+0x90>)
    154e:	4798      	blx	r3
    1550:	2000      	movs	r0, #0
    1552:	4b0a      	ldr	r3, [pc, #40]	; (157c <system_clock_init+0x94>)
    1554:	4798      	blx	r3
#endif
}
    1556:	b005      	add	sp, #20
    1558:	bd30      	pop	{r4, r5, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	40000800 	.word	0x40000800
    1560:	41004000 	.word	0x41004000
    1564:	000017b9 	.word	0x000017b9
    1568:	00001405 	.word	0x00001405
    156c:	00001441 	.word	0x00001441
    1570:	00001581 	.word	0x00001581
    1574:	40000400 	.word	0x40000400
    1578:	000015a5 	.word	0x000015a5
    157c:	0000165d 	.word	0x0000165d

00001580 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1580:	4a06      	ldr	r2, [pc, #24]	; (159c <system_gclk_init+0x1c>)
    1582:	6993      	ldr	r3, [r2, #24]
    1584:	2108      	movs	r1, #8
    1586:	430b      	orrs	r3, r1
    1588:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    158a:	2201      	movs	r2, #1
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <system_gclk_init+0x20>)
    158e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1590:	0019      	movs	r1, r3
    1592:	780b      	ldrb	r3, [r1, #0]
    1594:	4213      	tst	r3, r2
    1596:	d1fc      	bne.n	1592 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1598:	4770      	bx	lr
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	40000400 	.word	0x40000400
    15a0:	40000c00 	.word	0x40000c00

000015a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    15a4:	b570      	push	{r4, r5, r6, lr}
    15a6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    15a8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    15aa:	780d      	ldrb	r5, [r1, #0]
    15ac:	022d      	lsls	r5, r5, #8
    15ae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    15b0:	784b      	ldrb	r3, [r1, #1]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d002      	beq.n	15bc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    15b6:	2380      	movs	r3, #128	; 0x80
    15b8:	02db      	lsls	r3, r3, #11
    15ba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    15bc:	7a4b      	ldrb	r3, [r1, #9]
    15be:	2b00      	cmp	r3, #0
    15c0:	d002      	beq.n	15c8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    15c2:	2380      	movs	r3, #128	; 0x80
    15c4:	031b      	lsls	r3, r3, #12
    15c6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    15c8:	6848      	ldr	r0, [r1, #4]
    15ca:	2801      	cmp	r0, #1
    15cc:	d910      	bls.n	15f0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    15ce:	1e43      	subs	r3, r0, #1
    15d0:	4218      	tst	r0, r3
    15d2:	d134      	bne.n	163e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    15d4:	2802      	cmp	r0, #2
    15d6:	d930      	bls.n	163a <system_gclk_gen_set_config+0x96>
    15d8:	2302      	movs	r3, #2
    15da:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    15dc:	3201      	adds	r2, #1
						mask <<= 1) {
    15de:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    15e0:	4298      	cmp	r0, r3
    15e2:	d8fb      	bhi.n	15dc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    15e4:	0212      	lsls	r2, r2, #8
    15e6:	4332      	orrs	r2, r6
    15e8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	035b      	lsls	r3, r3, #13
    15ee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15f0:	7a0b      	ldrb	r3, [r1, #8]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d002      	beq.n	15fc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15f6:	2380      	movs	r3, #128	; 0x80
    15f8:	039b      	lsls	r3, r3, #14
    15fa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15fc:	4a13      	ldr	r2, [pc, #76]	; (164c <system_gclk_gen_set_config+0xa8>)
    15fe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1600:	b25b      	sxtb	r3, r3
    1602:	2b00      	cmp	r3, #0
    1604:	dbfb      	blt.n	15fe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1606:	4b12      	ldr	r3, [pc, #72]	; (1650 <system_gclk_gen_set_config+0xac>)
    1608:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    160a:	4b12      	ldr	r3, [pc, #72]	; (1654 <system_gclk_gen_set_config+0xb0>)
    160c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    160e:	4a0f      	ldr	r2, [pc, #60]	; (164c <system_gclk_gen_set_config+0xa8>)
    1610:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1612:	b25b      	sxtb	r3, r3
    1614:	2b00      	cmp	r3, #0
    1616:	dbfb      	blt.n	1610 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1618:	4b0c      	ldr	r3, [pc, #48]	; (164c <system_gclk_gen_set_config+0xa8>)
    161a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    161c:	001a      	movs	r2, r3
    161e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1620:	b25b      	sxtb	r3, r3
    1622:	2b00      	cmp	r3, #0
    1624:	dbfb      	blt.n	161e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1626:	4a09      	ldr	r2, [pc, #36]	; (164c <system_gclk_gen_set_config+0xa8>)
    1628:	6853      	ldr	r3, [r2, #4]
    162a:	2180      	movs	r1, #128	; 0x80
    162c:	0249      	lsls	r1, r1, #9
    162e:	400b      	ands	r3, r1
    1630:	431d      	orrs	r5, r3
    1632:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1634:	4b08      	ldr	r3, [pc, #32]	; (1658 <system_gclk_gen_set_config+0xb4>)
    1636:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1638:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    163a:	2200      	movs	r2, #0
    163c:	e7d2      	b.n	15e4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    163e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1640:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1642:	2380      	movs	r3, #128	; 0x80
    1644:	029b      	lsls	r3, r3, #10
    1646:	431d      	orrs	r5, r3
    1648:	e7d2      	b.n	15f0 <system_gclk_gen_set_config+0x4c>
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	40000c00 	.word	0x40000c00
    1650:	00000185 	.word	0x00000185
    1654:	40000c08 	.word	0x40000c08
    1658:	000001c5 	.word	0x000001c5

0000165c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    165c:	b510      	push	{r4, lr}
    165e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1660:	4a0b      	ldr	r2, [pc, #44]	; (1690 <system_gclk_gen_enable+0x34>)
    1662:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1664:	b25b      	sxtb	r3, r3
    1666:	2b00      	cmp	r3, #0
    1668:	dbfb      	blt.n	1662 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    166a:	4b0a      	ldr	r3, [pc, #40]	; (1694 <system_gclk_gen_enable+0x38>)
    166c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    166e:	4b0a      	ldr	r3, [pc, #40]	; (1698 <system_gclk_gen_enable+0x3c>)
    1670:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1672:	4a07      	ldr	r2, [pc, #28]	; (1690 <system_gclk_gen_enable+0x34>)
    1674:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1676:	b25b      	sxtb	r3, r3
    1678:	2b00      	cmp	r3, #0
    167a:	dbfb      	blt.n	1674 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    167c:	4a04      	ldr	r2, [pc, #16]	; (1690 <system_gclk_gen_enable+0x34>)
    167e:	6851      	ldr	r1, [r2, #4]
    1680:	2380      	movs	r3, #128	; 0x80
    1682:	025b      	lsls	r3, r3, #9
    1684:	430b      	orrs	r3, r1
    1686:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1688:	4b04      	ldr	r3, [pc, #16]	; (169c <system_gclk_gen_enable+0x40>)
    168a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    168c:	bd10      	pop	{r4, pc}
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	40000c00 	.word	0x40000c00
    1694:	00000185 	.word	0x00000185
    1698:	40000c04 	.word	0x40000c04
    169c:	000001c5 	.word	0x000001c5

000016a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    16a0:	b570      	push	{r4, r5, r6, lr}
    16a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16a4:	4a1a      	ldr	r2, [pc, #104]	; (1710 <system_gclk_gen_get_hz+0x70>)
    16a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    16a8:	b25b      	sxtb	r3, r3
    16aa:	2b00      	cmp	r3, #0
    16ac:	dbfb      	blt.n	16a6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    16ae:	4b19      	ldr	r3, [pc, #100]	; (1714 <system_gclk_gen_get_hz+0x74>)
    16b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16b2:	4b19      	ldr	r3, [pc, #100]	; (1718 <system_gclk_gen_get_hz+0x78>)
    16b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16b6:	4a16      	ldr	r2, [pc, #88]	; (1710 <system_gclk_gen_get_hz+0x70>)
    16b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    16ba:	b25b      	sxtb	r3, r3
    16bc:	2b00      	cmp	r3, #0
    16be:	dbfb      	blt.n	16b8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    16c0:	4e13      	ldr	r6, [pc, #76]	; (1710 <system_gclk_gen_get_hz+0x70>)
    16c2:	6870      	ldr	r0, [r6, #4]
    16c4:	04c0      	lsls	r0, r0, #19
    16c6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    16c8:	4b14      	ldr	r3, [pc, #80]	; (171c <system_gclk_gen_get_hz+0x7c>)
    16ca:	4798      	blx	r3
    16cc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16ce:	4b12      	ldr	r3, [pc, #72]	; (1718 <system_gclk_gen_get_hz+0x78>)
    16d0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    16d2:	6876      	ldr	r6, [r6, #4]
    16d4:	02f6      	lsls	r6, r6, #11
    16d6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16d8:	4b11      	ldr	r3, [pc, #68]	; (1720 <system_gclk_gen_get_hz+0x80>)
    16da:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16dc:	4a0c      	ldr	r2, [pc, #48]	; (1710 <system_gclk_gen_get_hz+0x70>)
    16de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    16e0:	b25b      	sxtb	r3, r3
    16e2:	2b00      	cmp	r3, #0
    16e4:	dbfb      	blt.n	16de <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    16e6:	4b0a      	ldr	r3, [pc, #40]	; (1710 <system_gclk_gen_get_hz+0x70>)
    16e8:	689c      	ldr	r4, [r3, #8]
    16ea:	0224      	lsls	r4, r4, #8
    16ec:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    16ee:	4b0d      	ldr	r3, [pc, #52]	; (1724 <system_gclk_gen_get_hz+0x84>)
    16f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16f2:	2e00      	cmp	r6, #0
    16f4:	d107      	bne.n	1706 <system_gclk_gen_get_hz+0x66>
    16f6:	2c01      	cmp	r4, #1
    16f8:	d907      	bls.n	170a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16fa:	0021      	movs	r1, r4
    16fc:	0028      	movs	r0, r5
    16fe:	4b0a      	ldr	r3, [pc, #40]	; (1728 <system_gclk_gen_get_hz+0x88>)
    1700:	4798      	blx	r3
    1702:	0005      	movs	r5, r0
    1704:	e001      	b.n	170a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1706:	3401      	adds	r4, #1
    1708:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    170a:	0028      	movs	r0, r5
    170c:	bd70      	pop	{r4, r5, r6, pc}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	40000c00 	.word	0x40000c00
    1714:	00000185 	.word	0x00000185
    1718:	40000c04 	.word	0x40000c04
    171c:	00001375 	.word	0x00001375
    1720:	40000c08 	.word	0x40000c08
    1724:	000001c5 	.word	0x000001c5
    1728:	00001dd1 	.word	0x00001dd1

0000172c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    172c:	b510      	push	{r4, lr}
    172e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <system_gclk_chan_enable+0x20>)
    1732:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1734:	4b06      	ldr	r3, [pc, #24]	; (1750 <system_gclk_chan_enable+0x24>)
    1736:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1738:	4a06      	ldr	r2, [pc, #24]	; (1754 <system_gclk_chan_enable+0x28>)
    173a:	8853      	ldrh	r3, [r2, #2]
    173c:	2180      	movs	r1, #128	; 0x80
    173e:	01c9      	lsls	r1, r1, #7
    1740:	430b      	orrs	r3, r1
    1742:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1744:	4b04      	ldr	r3, [pc, #16]	; (1758 <system_gclk_chan_enable+0x2c>)
    1746:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1748:	bd10      	pop	{r4, pc}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	00000185 	.word	0x00000185
    1750:	40000c02 	.word	0x40000c02
    1754:	40000c00 	.word	0x40000c00
    1758:	000001c5 	.word	0x000001c5

0000175c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    175c:	b510      	push	{r4, lr}
    175e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1760:	4b0f      	ldr	r3, [pc, #60]	; (17a0 <system_gclk_chan_disable+0x44>)
    1762:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1764:	4b0f      	ldr	r3, [pc, #60]	; (17a4 <system_gclk_chan_disable+0x48>)
    1766:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1768:	4a0f      	ldr	r2, [pc, #60]	; (17a8 <system_gclk_chan_disable+0x4c>)
    176a:	8853      	ldrh	r3, [r2, #2]
    176c:	051b      	lsls	r3, r3, #20
    176e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1770:	8853      	ldrh	r3, [r2, #2]
    1772:	490e      	ldr	r1, [pc, #56]	; (17ac <system_gclk_chan_disable+0x50>)
    1774:	400b      	ands	r3, r1
    1776:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1778:	8853      	ldrh	r3, [r2, #2]
    177a:	490d      	ldr	r1, [pc, #52]	; (17b0 <system_gclk_chan_disable+0x54>)
    177c:	400b      	ands	r3, r1
    177e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1780:	0011      	movs	r1, r2
    1782:	2280      	movs	r2, #128	; 0x80
    1784:	01d2      	lsls	r2, r2, #7
    1786:	884b      	ldrh	r3, [r1, #2]
    1788:	4213      	tst	r3, r2
    178a:	d1fc      	bne.n	1786 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    178c:	4906      	ldr	r1, [pc, #24]	; (17a8 <system_gclk_chan_disable+0x4c>)
    178e:	884a      	ldrh	r2, [r1, #2]
    1790:	0203      	lsls	r3, r0, #8
    1792:	4806      	ldr	r0, [pc, #24]	; (17ac <system_gclk_chan_disable+0x50>)
    1794:	4002      	ands	r2, r0
    1796:	4313      	orrs	r3, r2
    1798:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    179a:	4b06      	ldr	r3, [pc, #24]	; (17b4 <system_gclk_chan_disable+0x58>)
    179c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    179e:	bd10      	pop	{r4, pc}
    17a0:	00000185 	.word	0x00000185
    17a4:	40000c02 	.word	0x40000c02
    17a8:	40000c00 	.word	0x40000c00
    17ac:	fffff0ff 	.word	0xfffff0ff
    17b0:	ffffbfff 	.word	0xffffbfff
    17b4:	000001c5 	.word	0x000001c5

000017b8 <system_gclk_chan_set_config>:
{
    17b8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    17ba:	780c      	ldrb	r4, [r1, #0]
    17bc:	0224      	lsls	r4, r4, #8
    17be:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    17c0:	4b02      	ldr	r3, [pc, #8]	; (17cc <system_gclk_chan_set_config+0x14>)
    17c2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    17c4:	b2a4      	uxth	r4, r4
    17c6:	4b02      	ldr	r3, [pc, #8]	; (17d0 <system_gclk_chan_set_config+0x18>)
    17c8:	805c      	strh	r4, [r3, #2]
}
    17ca:	bd10      	pop	{r4, pc}
    17cc:	0000175d 	.word	0x0000175d
    17d0:	40000c00 	.word	0x40000c00

000017d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    17d4:	b510      	push	{r4, lr}
    17d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    17d8:	4b06      	ldr	r3, [pc, #24]	; (17f4 <system_gclk_chan_get_hz+0x20>)
    17da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    17dc:	4b06      	ldr	r3, [pc, #24]	; (17f8 <system_gclk_chan_get_hz+0x24>)
    17de:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    17e0:	4b06      	ldr	r3, [pc, #24]	; (17fc <system_gclk_chan_get_hz+0x28>)
    17e2:	885c      	ldrh	r4, [r3, #2]
    17e4:	0524      	lsls	r4, r4, #20
    17e6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    17e8:	4b05      	ldr	r3, [pc, #20]	; (1800 <system_gclk_chan_get_hz+0x2c>)
    17ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    17ec:	0020      	movs	r0, r4
    17ee:	4b05      	ldr	r3, [pc, #20]	; (1804 <system_gclk_chan_get_hz+0x30>)
    17f0:	4798      	blx	r3
}
    17f2:	bd10      	pop	{r4, pc}
    17f4:	00000185 	.word	0x00000185
    17f8:	40000c02 	.word	0x40000c02
    17fc:	40000c00 	.word	0x40000c00
    1800:	000001c5 	.word	0x000001c5
    1804:	000016a1 	.word	0x000016a1

00001808 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1808:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    180a:	78d3      	ldrb	r3, [r2, #3]
    180c:	2b00      	cmp	r3, #0
    180e:	d135      	bne.n	187c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1810:	7813      	ldrb	r3, [r2, #0]
    1812:	2b80      	cmp	r3, #128	; 0x80
    1814:	d029      	beq.n	186a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1816:	061b      	lsls	r3, r3, #24
    1818:	2480      	movs	r4, #128	; 0x80
    181a:	0264      	lsls	r4, r4, #9
    181c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    181e:	7854      	ldrb	r4, [r2, #1]
    1820:	2502      	movs	r5, #2
    1822:	43ac      	bics	r4, r5
    1824:	d106      	bne.n	1834 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1826:	7894      	ldrb	r4, [r2, #2]
    1828:	2c00      	cmp	r4, #0
    182a:	d120      	bne.n	186e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    182c:	2480      	movs	r4, #128	; 0x80
    182e:	02a4      	lsls	r4, r4, #10
    1830:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1832:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1834:	7854      	ldrb	r4, [r2, #1]
    1836:	3c01      	subs	r4, #1
    1838:	2c01      	cmp	r4, #1
    183a:	d91c      	bls.n	1876 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    183c:	040d      	lsls	r5, r1, #16
    183e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1840:	24a0      	movs	r4, #160	; 0xa0
    1842:	05e4      	lsls	r4, r4, #23
    1844:	432c      	orrs	r4, r5
    1846:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1848:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    184a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    184c:	24d0      	movs	r4, #208	; 0xd0
    184e:	0624      	lsls	r4, r4, #24
    1850:	432c      	orrs	r4, r5
    1852:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1854:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1856:	78d4      	ldrb	r4, [r2, #3]
    1858:	2c00      	cmp	r4, #0
    185a:	d122      	bne.n	18a2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    185c:	035b      	lsls	r3, r3, #13
    185e:	d51c      	bpl.n	189a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1860:	7893      	ldrb	r3, [r2, #2]
    1862:	2b01      	cmp	r3, #1
    1864:	d01e      	beq.n	18a4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1866:	6141      	str	r1, [r0, #20]
    1868:	e017      	b.n	189a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    186a:	2300      	movs	r3, #0
    186c:	e7d7      	b.n	181e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    186e:	24c0      	movs	r4, #192	; 0xc0
    1870:	02e4      	lsls	r4, r4, #11
    1872:	4323      	orrs	r3, r4
    1874:	e7dd      	b.n	1832 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1876:	4c0d      	ldr	r4, [pc, #52]	; (18ac <_system_pinmux_config+0xa4>)
    1878:	4023      	ands	r3, r4
    187a:	e7df      	b.n	183c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    187c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    187e:	040c      	lsls	r4, r1, #16
    1880:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1882:	23a0      	movs	r3, #160	; 0xa0
    1884:	05db      	lsls	r3, r3, #23
    1886:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1888:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    188a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    188c:	23d0      	movs	r3, #208	; 0xd0
    188e:	061b      	lsls	r3, r3, #24
    1890:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1892:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1894:	78d3      	ldrb	r3, [r2, #3]
    1896:	2b00      	cmp	r3, #0
    1898:	d103      	bne.n	18a2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    189a:	7853      	ldrb	r3, [r2, #1]
    189c:	3b01      	subs	r3, #1
    189e:	2b01      	cmp	r3, #1
    18a0:	d902      	bls.n	18a8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    18a2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    18a4:	6181      	str	r1, [r0, #24]
    18a6:	e7f8      	b.n	189a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    18a8:	6081      	str	r1, [r0, #8]
}
    18aa:	e7fa      	b.n	18a2 <_system_pinmux_config+0x9a>
    18ac:	fffbffff 	.word	0xfffbffff

000018b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    18b0:	b510      	push	{r4, lr}
    18b2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    18b4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    18b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    18b8:	2900      	cmp	r1, #0
    18ba:	d104      	bne.n	18c6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    18bc:	0943      	lsrs	r3, r0, #5
    18be:	01db      	lsls	r3, r3, #7
    18c0:	4905      	ldr	r1, [pc, #20]	; (18d8 <system_pinmux_pin_set_config+0x28>)
    18c2:	468c      	mov	ip, r1
    18c4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    18c6:	241f      	movs	r4, #31
    18c8:	4020      	ands	r0, r4
    18ca:	2101      	movs	r1, #1
    18cc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    18ce:	0018      	movs	r0, r3
    18d0:	4b02      	ldr	r3, [pc, #8]	; (18dc <system_pinmux_pin_set_config+0x2c>)
    18d2:	4798      	blx	r3
}
    18d4:	bd10      	pop	{r4, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	41004400 	.word	0x41004400
    18dc:	00001809 	.word	0x00001809

000018e0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    18e0:	4770      	bx	lr
	...

000018e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    18e4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    18e6:	4b05      	ldr	r3, [pc, #20]	; (18fc <system_init+0x18>)
    18e8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    18ea:	4b05      	ldr	r3, [pc, #20]	; (1900 <system_init+0x1c>)
    18ec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <system_init+0x20>)
    18f0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18f2:	4b05      	ldr	r3, [pc, #20]	; (1908 <system_init+0x24>)
    18f4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18f6:	4b05      	ldr	r3, [pc, #20]	; (190c <system_init+0x28>)
    18f8:	4798      	blx	r3
}
    18fa:	bd10      	pop	{r4, pc}
    18fc:	000014e9 	.word	0x000014e9
    1900:	00000115 	.word	0x00000115
    1904:	000018e1 	.word	0x000018e1
    1908:	000018e1 	.word	0x000018e1
    190c:	000018e1 	.word	0x000018e1

00001910 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1910:	e7fe      	b.n	1910 <Dummy_Handler>
	...

00001914 <Reset_Handler>:
{
    1914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1916:	4a2a      	ldr	r2, [pc, #168]	; (19c0 <Reset_Handler+0xac>)
    1918:	4b2a      	ldr	r3, [pc, #168]	; (19c4 <Reset_Handler+0xb0>)
    191a:	429a      	cmp	r2, r3
    191c:	d011      	beq.n	1942 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    191e:	001a      	movs	r2, r3
    1920:	4b29      	ldr	r3, [pc, #164]	; (19c8 <Reset_Handler+0xb4>)
    1922:	429a      	cmp	r2, r3
    1924:	d20d      	bcs.n	1942 <Reset_Handler+0x2e>
    1926:	4a29      	ldr	r2, [pc, #164]	; (19cc <Reset_Handler+0xb8>)
    1928:	3303      	adds	r3, #3
    192a:	1a9b      	subs	r3, r3, r2
    192c:	089b      	lsrs	r3, r3, #2
    192e:	3301      	adds	r3, #1
    1930:	009b      	lsls	r3, r3, #2
    1932:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1934:	4823      	ldr	r0, [pc, #140]	; (19c4 <Reset_Handler+0xb0>)
    1936:	4922      	ldr	r1, [pc, #136]	; (19c0 <Reset_Handler+0xac>)
    1938:	588c      	ldr	r4, [r1, r2]
    193a:	5084      	str	r4, [r0, r2]
    193c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    193e:	429a      	cmp	r2, r3
    1940:	d1fa      	bne.n	1938 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1942:	4a23      	ldr	r2, [pc, #140]	; (19d0 <Reset_Handler+0xbc>)
    1944:	4b23      	ldr	r3, [pc, #140]	; (19d4 <Reset_Handler+0xc0>)
    1946:	429a      	cmp	r2, r3
    1948:	d20a      	bcs.n	1960 <Reset_Handler+0x4c>
    194a:	43d3      	mvns	r3, r2
    194c:	4921      	ldr	r1, [pc, #132]	; (19d4 <Reset_Handler+0xc0>)
    194e:	185b      	adds	r3, r3, r1
    1950:	2103      	movs	r1, #3
    1952:	438b      	bics	r3, r1
    1954:	3304      	adds	r3, #4
    1956:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1958:	2100      	movs	r1, #0
    195a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    195c:	4293      	cmp	r3, r2
    195e:	d1fc      	bne.n	195a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1960:	4a1d      	ldr	r2, [pc, #116]	; (19d8 <Reset_Handler+0xc4>)
    1962:	21ff      	movs	r1, #255	; 0xff
    1964:	4b1d      	ldr	r3, [pc, #116]	; (19dc <Reset_Handler+0xc8>)
    1966:	438b      	bics	r3, r1
    1968:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    196a:	39fd      	subs	r1, #253	; 0xfd
    196c:	2390      	movs	r3, #144	; 0x90
    196e:	005b      	lsls	r3, r3, #1
    1970:	4a1b      	ldr	r2, [pc, #108]	; (19e0 <Reset_Handler+0xcc>)
    1972:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1974:	4a1b      	ldr	r2, [pc, #108]	; (19e4 <Reset_Handler+0xd0>)
    1976:	78d3      	ldrb	r3, [r2, #3]
    1978:	2503      	movs	r5, #3
    197a:	43ab      	bics	r3, r5
    197c:	2402      	movs	r4, #2
    197e:	4323      	orrs	r3, r4
    1980:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1982:	78d3      	ldrb	r3, [r2, #3]
    1984:	270c      	movs	r7, #12
    1986:	43bb      	bics	r3, r7
    1988:	2608      	movs	r6, #8
    198a:	4333      	orrs	r3, r6
    198c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    198e:	4b16      	ldr	r3, [pc, #88]	; (19e8 <Reset_Handler+0xd4>)
    1990:	7b98      	ldrb	r0, [r3, #14]
    1992:	2230      	movs	r2, #48	; 0x30
    1994:	4390      	bics	r0, r2
    1996:	2220      	movs	r2, #32
    1998:	4310      	orrs	r0, r2
    199a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    199c:	7b99      	ldrb	r1, [r3, #14]
    199e:	43b9      	bics	r1, r7
    19a0:	4331      	orrs	r1, r6
    19a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    19a4:	7b9a      	ldrb	r2, [r3, #14]
    19a6:	43aa      	bics	r2, r5
    19a8:	4322      	orrs	r2, r4
    19aa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    19ac:	4a0f      	ldr	r2, [pc, #60]	; (19ec <Reset_Handler+0xd8>)
    19ae:	6853      	ldr	r3, [r2, #4]
    19b0:	2180      	movs	r1, #128	; 0x80
    19b2:	430b      	orrs	r3, r1
    19b4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    19b6:	4b0e      	ldr	r3, [pc, #56]	; (19f0 <Reset_Handler+0xdc>)
    19b8:	4798      	blx	r3
        main();
    19ba:	4b0e      	ldr	r3, [pc, #56]	; (19f4 <Reset_Handler+0xe0>)
    19bc:	4798      	blx	r3
    19be:	e7fe      	b.n	19be <Reset_Handler+0xaa>
    19c0:	00003268 	.word	0x00003268
    19c4:	20000000 	.word	0x20000000
    19c8:	20000070 	.word	0x20000070
    19cc:	20000004 	.word	0x20000004
    19d0:	20000070 	.word	0x20000070
    19d4:	2000017c 	.word	0x2000017c
    19d8:	e000ed00 	.word	0xe000ed00
    19dc:	00000000 	.word	0x00000000
    19e0:	41007000 	.word	0x41007000
    19e4:	41005000 	.word	0x41005000
    19e8:	41004800 	.word	0x41004800
    19ec:	41004000 	.word	0x41004000
    19f0:	00002111 	.word	0x00002111
    19f4:	00001d35 	.word	0x00001d35

000019f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    19f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fa:	46c6      	mov	lr, r8
    19fc:	b500      	push	{lr}
    19fe:	000c      	movs	r4, r1
    1a00:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1a02:	2800      	cmp	r0, #0
    1a04:	d10f      	bne.n	1a26 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1a06:	2a00      	cmp	r2, #0
    1a08:	dd11      	ble.n	1a2e <_read+0x36>
    1a0a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1a0c:	4e09      	ldr	r6, [pc, #36]	; (1a34 <_read+0x3c>)
    1a0e:	4d0a      	ldr	r5, [pc, #40]	; (1a38 <_read+0x40>)
    1a10:	6830      	ldr	r0, [r6, #0]
    1a12:	0021      	movs	r1, r4
    1a14:	682b      	ldr	r3, [r5, #0]
    1a16:	4798      	blx	r3
		ptr++;
    1a18:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1a1a:	42bc      	cmp	r4, r7
    1a1c:	d1f8      	bne.n	1a10 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1a1e:	4640      	mov	r0, r8
    1a20:	bc04      	pop	{r2}
    1a22:	4690      	mov	r8, r2
    1a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1a26:	2301      	movs	r3, #1
    1a28:	425b      	negs	r3, r3
    1a2a:	4698      	mov	r8, r3
    1a2c:	e7f7      	b.n	1a1e <_read+0x26>
	for (; len > 0; --len) {
    1a2e:	4680      	mov	r8, r0
    1a30:	e7f5      	b.n	1a1e <_read+0x26>
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	200000f8 	.word	0x200000f8
    1a38:	200000f0 	.word	0x200000f0

00001a3c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a3e:	46c6      	mov	lr, r8
    1a40:	b500      	push	{lr}
    1a42:	000e      	movs	r6, r1
    1a44:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1a46:	3801      	subs	r0, #1
    1a48:	2802      	cmp	r0, #2
    1a4a:	d810      	bhi.n	1a6e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1a4c:	2a00      	cmp	r2, #0
    1a4e:	d011      	beq.n	1a74 <_write+0x38>
    1a50:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1a52:	4b0c      	ldr	r3, [pc, #48]	; (1a84 <_write+0x48>)
    1a54:	4698      	mov	r8, r3
    1a56:	4f0c      	ldr	r7, [pc, #48]	; (1a88 <_write+0x4c>)
    1a58:	4643      	mov	r3, r8
    1a5a:	6818      	ldr	r0, [r3, #0]
    1a5c:	5d31      	ldrb	r1, [r6, r4]
    1a5e:	683b      	ldr	r3, [r7, #0]
    1a60:	4798      	blx	r3
    1a62:	2800      	cmp	r0, #0
    1a64:	db08      	blt.n	1a78 <_write+0x3c>
			return -1;
		}
		++nChars;
    1a66:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1a68:	42a5      	cmp	r5, r4
    1a6a:	d1f5      	bne.n	1a58 <_write+0x1c>
    1a6c:	e006      	b.n	1a7c <_write+0x40>
		return -1;
    1a6e:	2401      	movs	r4, #1
    1a70:	4264      	negs	r4, r4
    1a72:	e003      	b.n	1a7c <_write+0x40>
	for (; len != 0; --len) {
    1a74:	0014      	movs	r4, r2
    1a76:	e001      	b.n	1a7c <_write+0x40>
			return -1;
    1a78:	2401      	movs	r4, #1
    1a7a:	4264      	negs	r4, r4
	}
	return nChars;
}
    1a7c:	0020      	movs	r0, r4
    1a7e:	bc04      	pop	{r2}
    1a80:	4690      	mov	r8, r2
    1a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a84:	200000f8 	.word	0x200000f8
    1a88:	200000f4 	.word	0x200000f4

00001a8c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1a8c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a8e:	4a06      	ldr	r2, [pc, #24]	; (1aa8 <_sbrk+0x1c>)
    1a90:	6812      	ldr	r2, [r2, #0]
    1a92:	2a00      	cmp	r2, #0
    1a94:	d004      	beq.n	1aa0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a96:	4a04      	ldr	r2, [pc, #16]	; (1aa8 <_sbrk+0x1c>)
    1a98:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a9a:	18c3      	adds	r3, r0, r3
    1a9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a9e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1aa0:	4902      	ldr	r1, [pc, #8]	; (1aac <_sbrk+0x20>)
    1aa2:	4a01      	ldr	r2, [pc, #4]	; (1aa8 <_sbrk+0x1c>)
    1aa4:	6011      	str	r1, [r2, #0]
    1aa6:	e7f6      	b.n	1a96 <_sbrk+0xa>
    1aa8:	200000c8 	.word	0x200000c8
    1aac:	20002180 	.word	0x20002180

00001ab0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1ab0:	2001      	movs	r0, #1
    1ab2:	4240      	negs	r0, r0
    1ab4:	4770      	bx	lr

00001ab6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1ab6:	2380      	movs	r3, #128	; 0x80
    1ab8:	019b      	lsls	r3, r3, #6
    1aba:	604b      	str	r3, [r1, #4]

	return 0;
}
    1abc:	2000      	movs	r0, #0
    1abe:	4770      	bx	lr

00001ac0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1ac0:	2001      	movs	r0, #1
    1ac2:	4770      	bx	lr

00001ac4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1ac4:	2000      	movs	r0, #0
    1ac6:	4770      	bx	lr

00001ac8 <usart_write_callback>:
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
void usart_write_callback(struct usart_module *const usart_module)
{
//	port_pin_toggle_output_level(LED_0_PIN);
}
    1ac8:	4770      	bx	lr
	...

00001acc <usart_read_callback>:
{usart_write_buffer_job(&usart_instance,
    1acc:	b510      	push	{r4, lr}
    1ace:	2205      	movs	r2, #5
    1ad0:	4902      	ldr	r1, [pc, #8]	; (1adc <usart_read_callback+0x10>)
    1ad2:	4803      	ldr	r0, [pc, #12]	; (1ae0 <usart_read_callback+0x14>)
    1ad4:	4b03      	ldr	r3, [pc, #12]	; (1ae4 <usart_read_callback+0x18>)
    1ad6:	4798      	blx	r3
}
    1ad8:	bd10      	pop	{r4, pc}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	20000130 	.word	0x20000130
    1ae0:	200000fc 	.word	0x200000fc
    1ae4:	000011c1 	.word	0x000011c1

00001ae8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1ae8:	b570      	push	{r4, r5, r6, lr}
    1aea:	b082      	sub	sp, #8
    1aec:	0005      	movs	r5, r0
    1aee:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1af0:	2200      	movs	r2, #0
    1af2:	466b      	mov	r3, sp
    1af4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1af6:	4c06      	ldr	r4, [pc, #24]	; (1b10 <usart_serial_getchar+0x28>)
    1af8:	466b      	mov	r3, sp
    1afa:	1d99      	adds	r1, r3, #6
    1afc:	0028      	movs	r0, r5
    1afe:	47a0      	blx	r4
    1b00:	2800      	cmp	r0, #0
    1b02:	d1f9      	bne.n	1af8 <usart_serial_getchar+0x10>

	*c = temp;
    1b04:	466b      	mov	r3, sp
    1b06:	3306      	adds	r3, #6
    1b08:	881b      	ldrh	r3, [r3, #0]
    1b0a:	7033      	strb	r3, [r6, #0]
}
    1b0c:	b002      	add	sp, #8
    1b0e:	bd70      	pop	{r4, r5, r6, pc}
    1b10:	000010fd 	.word	0x000010fd

00001b14 <usart_serial_putchar>:
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1b18:	b28c      	uxth	r4, r1
    1b1a:	4e03      	ldr	r6, [pc, #12]	; (1b28 <usart_serial_putchar+0x14>)
    1b1c:	0021      	movs	r1, r4
    1b1e:	0028      	movs	r0, r5
    1b20:	47b0      	blx	r6
    1b22:	2800      	cmp	r0, #0
    1b24:	d1fa      	bne.n	1b1c <usart_serial_putchar+0x8>
}
    1b26:	bd70      	pop	{r4, r5, r6, pc}
    1b28:	000010d1 	.word	0x000010d1

00001b2c <i2c_write_complete_callback>:
	i2c_master_enable(&i2c_master_instance);
}


void i2c_write_complete_callback(struct i2c_master_module *const module)
{
    1b2c:	b510      	push	{r4, lr}
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
    1b2e:	4902      	ldr	r1, [pc, #8]	; (1b38 <i2c_write_complete_callback+0xc>)
    1b30:	4802      	ldr	r0, [pc, #8]	; (1b3c <i2c_write_complete_callback+0x10>)
    1b32:	4b03      	ldr	r3, [pc, #12]	; (1b40 <i2c_write_complete_callback+0x14>)
    1b34:	4798      	blx	r3
}
    1b36:	bd10      	pop	{r4, pc}
    1b38:	2000016c 	.word	0x2000016c
    1b3c:	20000144 	.word	0x20000144
    1b40:	00000739 	.word	0x00000739

00001b44 <configure_usart>:
{
    1b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b46:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1b48:	2380      	movs	r3, #128	; 0x80
    1b4a:	05db      	lsls	r3, r3, #23
    1b4c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1b4e:	2300      	movs	r3, #0
    1b50:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1b52:	22ff      	movs	r2, #255	; 0xff
    1b54:	4669      	mov	r1, sp
    1b56:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1b58:	2200      	movs	r2, #0
    1b5a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1b5c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1b5e:	2196      	movs	r1, #150	; 0x96
    1b60:	0189      	lsls	r1, r1, #6
    1b62:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1b64:	2401      	movs	r4, #1
    1b66:	2124      	movs	r1, #36	; 0x24
    1b68:	4668      	mov	r0, sp
    1b6a:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1b6c:	3101      	adds	r1, #1
    1b6e:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1b70:	3101      	adds	r1, #1
    1b72:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1b74:	3101      	adds	r1, #1
    1b76:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1b78:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1b7a:	3105      	adds	r1, #5
    1b7c:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1b7e:	3101      	adds	r1, #1
    1b80:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1b82:	930c      	str	r3, [sp, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1b84:	930d      	str	r3, [sp, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1b86:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1b88:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1b8a:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1b8c:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1b8e:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1b90:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1b92:	2313      	movs	r3, #19
    1b94:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1b96:	7742      	strb	r2, [r0, #29]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1b98:	23c4      	movs	r3, #196	; 0xc4
    1b9a:	039b      	lsls	r3, r3, #14
    1b9c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
    1b9e:	4b17      	ldr	r3, [pc, #92]	; (1bfc <configure_usart+0xb8>)
    1ba0:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;
    1ba2:	4b17      	ldr	r3, [pc, #92]	; (1c00 <configure_usart+0xbc>)
    1ba4:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1ba6:	4d17      	ldr	r5, [pc, #92]	; (1c04 <configure_usart+0xc0>)
    1ba8:	4b17      	ldr	r3, [pc, #92]	; (1c08 <configure_usart+0xc4>)
    1baa:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1bac:	4a17      	ldr	r2, [pc, #92]	; (1c0c <configure_usart+0xc8>)
    1bae:	4b18      	ldr	r3, [pc, #96]	; (1c10 <configure_usart+0xcc>)
    1bb0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1bb2:	4a18      	ldr	r2, [pc, #96]	; (1c14 <configure_usart+0xd0>)
    1bb4:	4b18      	ldr	r3, [pc, #96]	; (1c18 <configure_usart+0xd4>)
    1bb6:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1bb8:	466a      	mov	r2, sp
    1bba:	4918      	ldr	r1, [pc, #96]	; (1c1c <configure_usart+0xd8>)
    1bbc:	0028      	movs	r0, r5
    1bbe:	4b18      	ldr	r3, [pc, #96]	; (1c20 <configure_usart+0xdc>)
    1bc0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1bc2:	4f18      	ldr	r7, [pc, #96]	; (1c24 <configure_usart+0xe0>)
    1bc4:	683b      	ldr	r3, [r7, #0]
    1bc6:	6898      	ldr	r0, [r3, #8]
    1bc8:	2100      	movs	r1, #0
    1bca:	4e17      	ldr	r6, [pc, #92]	; (1c28 <configure_usart+0xe4>)
    1bcc:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1bce:	683b      	ldr	r3, [r7, #0]
    1bd0:	6858      	ldr	r0, [r3, #4]
    1bd2:	2100      	movs	r1, #0
    1bd4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bd6:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1bd8:	0030      	movs	r0, r6
    1bda:	4b14      	ldr	r3, [pc, #80]	; (1c2c <configure_usart+0xe8>)
    1bdc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1bde:	231f      	movs	r3, #31
    1be0:	4018      	ands	r0, r3
    1be2:	4084      	lsls	r4, r0
    1be4:	4b12      	ldr	r3, [pc, #72]	; (1c30 <configure_usart+0xec>)
    1be6:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1be8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1bea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1bec:	2b00      	cmp	r3, #0
    1bee:	d1fc      	bne.n	1bea <configure_usart+0xa6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1bf0:	6833      	ldr	r3, [r6, #0]
    1bf2:	2202      	movs	r2, #2
    1bf4:	4313      	orrs	r3, r2
    1bf6:	6033      	str	r3, [r6, #0]
}
    1bf8:	b011      	add	sp, #68	; 0x44
    1bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bfc:	00140003 	.word	0x00140003
    1c00:	00150003 	.word	0x00150003
    1c04:	200000fc 	.word	0x200000fc
    1c08:	200000f8 	.word	0x200000f8
    1c0c:	00001b15 	.word	0x00001b15
    1c10:	200000f4 	.word	0x200000f4
    1c14:	00001ae9 	.word	0x00001ae9
    1c18:	200000f0 	.word	0x200000f0
    1c1c:	42001400 	.word	0x42001400
    1c20:	00000d8d 	.word	0x00000d8d
    1c24:	2000000c 	.word	0x2000000c
    1c28:	0000219d 	.word	0x0000219d
    1c2c:	00000cfd 	.word	0x00000cfd
    1c30:	e000e100 	.word	0xe000e100

00001c34 <configure_usart_callbacks>:
{
    1c34:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    1c36:	4c08      	ldr	r4, [pc, #32]	; (1c58 <configure_usart_callbacks+0x24>)
    1c38:	2200      	movs	r2, #0
    1c3a:	4908      	ldr	r1, [pc, #32]	; (1c5c <configure_usart_callbacks+0x28>)
    1c3c:	0020      	movs	r0, r4
    1c3e:	4d08      	ldr	r5, [pc, #32]	; (1c60 <configure_usart_callbacks+0x2c>)
    1c40:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    1c42:	2201      	movs	r2, #1
    1c44:	4907      	ldr	r1, [pc, #28]	; (1c64 <configure_usart_callbacks+0x30>)
    1c46:	0020      	movs	r0, r4
    1c48:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1c4a:	2231      	movs	r2, #49	; 0x31
    1c4c:	5ca3      	ldrb	r3, [r4, r2]
    1c4e:	2103      	movs	r1, #3
    1c50:	430b      	orrs	r3, r1
    1c52:	54a3      	strb	r3, [r4, r2]
}
    1c54:	bd70      	pop	{r4, r5, r6, pc}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	200000fc 	.word	0x200000fc
    1c5c:	00001ac9 	.word	0x00001ac9
    1c60:	000011a9 	.word	0x000011a9
    1c64:	00001acd 	.word	0x00001acd

00001c68 <configure_i2c>:
{
    1c68:	b530      	push	{r4, r5, lr}
    1c6a:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1c6c:	ab01      	add	r3, sp, #4
    1c6e:	2164      	movs	r1, #100	; 0x64
    1c70:	9101      	str	r1, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1c72:	4a21      	ldr	r2, [pc, #132]	; (1cf8 <configure_i2c+0x90>)
    1c74:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1c76:	2200      	movs	r2, #0
    1c78:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1c7a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1c7c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1c7e:	2080      	movs	r0, #128	; 0x80
    1c80:	0380      	lsls	r0, r0, #14
    1c82:	9005      	str	r0, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    1c84:	2001      	movs	r0, #1
    1c86:	4240      	negs	r0, r0
    1c88:	8298      	strh	r0, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1c8a:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1c8c:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    1c8e:	3025      	adds	r0, #37	; 0x25
    1c90:	541a      	strb	r2, [r3, r0]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1c92:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1c94:	3008      	adds	r0, #8
    1c96:	541a      	strb	r2, [r3, r0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1c98:	3001      	adds	r0, #1
    1c9a:	541a      	strb	r2, [r3, r0]
	config->master_scl_low_extend_timeout  = false;
    1c9c:	3001      	adds	r0, #1
    1c9e:	541a      	strb	r2, [r3, r0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1ca0:	32d7      	adds	r2, #215	; 0xd7
    1ca2:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.buffer_timeout = 100;
    1ca4:	82d9      	strh	r1, [r3, #22]
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE,
    1ca6:	4d15      	ldr	r5, [pc, #84]	; (1cfc <configure_i2c+0x94>)
    1ca8:	4c15      	ldr	r4, [pc, #84]	; (1d00 <configure_i2c+0x98>)
    1caa:	aa01      	add	r2, sp, #4
    1cac:	4915      	ldr	r1, [pc, #84]	; (1d04 <configure_i2c+0x9c>)
    1cae:	0028      	movs	r0, r5
    1cb0:	47a0      	blx	r4
    1cb2:	2800      	cmp	r0, #0
    1cb4:	d1f9      	bne.n	1caa <configure_i2c+0x42>
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1cb6:	4b11      	ldr	r3, [pc, #68]	; (1cfc <configure_i2c+0x94>)
    1cb8:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1cba:	2207      	movs	r2, #7
    1cbc:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1cbe:	421a      	tst	r2, r3
    1cc0:	d1fc      	bne.n	1cbc <configure_i2c+0x54>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1cc2:	6823      	ldr	r3, [r4, #0]
    1cc4:	2202      	movs	r2, #2
    1cc6:	4313      	orrs	r3, r2
    1cc8:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1cca:	4d0c      	ldr	r5, [pc, #48]	; (1cfc <configure_i2c+0x94>)
    1ccc:	6828      	ldr	r0, [r5, #0]
    1cce:	4b0e      	ldr	r3, [pc, #56]	; (1d08 <configure_i2c+0xa0>)
    1cd0:	4798      	blx	r3
    1cd2:	231f      	movs	r3, #31
    1cd4:	4018      	ands	r0, r3
    1cd6:	3b1e      	subs	r3, #30
    1cd8:	4083      	lsls	r3, r0
    1cda:	4a0c      	ldr	r2, [pc, #48]	; (1d0c <configure_i2c+0xa4>)
    1cdc:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1cde:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1ce0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1ce2:	2110      	movs	r1, #16
    1ce4:	8b62      	ldrh	r2, [r4, #26]
    1ce6:	420a      	tst	r2, r1
    1ce8:	d104      	bne.n	1cf4 <configure_i2c+0x8c>
		timeout_counter++;
    1cea:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1cec:	4283      	cmp	r3, r0
    1cee:	d3f9      	bcc.n	1ce4 <configure_i2c+0x7c>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1cf0:	2310      	movs	r3, #16
    1cf2:	8363      	strh	r3, [r4, #26]
}
    1cf4:	b00f      	add	sp, #60	; 0x3c
    1cf6:	bd30      	pop	{r4, r5, pc}
    1cf8:	00000d48 	.word	0x00000d48
    1cfc:	20000144 	.word	0x20000144
    1d00:	00000201 	.word	0x00000201
    1d04:	42001000 	.word	0x42001000
    1d08:	00000cfd 	.word	0x00000cfd
    1d0c:	e000e100 	.word	0xe000e100

00001d10 <configure_i2c_callbacks>:

void configure_i2c_callbacks(void)
{
    1d10:	b510      	push	{r4, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2c_master_instance,
    1d12:	4c05      	ldr	r4, [pc, #20]	; (1d28 <configure_i2c_callbacks+0x18>)
    1d14:	2200      	movs	r2, #0
    1d16:	4905      	ldr	r1, [pc, #20]	; (1d2c <configure_i2c_callbacks+0x1c>)
    1d18:	0020      	movs	r0, r4
    1d1a:	4b05      	ldr	r3, [pc, #20]	; (1d30 <configure_i2c_callbacks+0x20>)
    1d1c:	4798      	blx	r3
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    1d1e:	7e63      	ldrb	r3, [r4, #25]
    1d20:	2201      	movs	r2, #1
    1d22:	4313      	orrs	r3, r2
    1d24:	7663      	strb	r3, [r4, #25]
	i2c_write_complete_callback,
	I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_master_instance,
	I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    1d26:	bd10      	pop	{r4, pc}
    1d28:	20000144 	.word	0x20000144
    1d2c:	00001b2d 	.word	0x00001b2d
    1d30:	00000721 	.word	0x00000721

00001d34 <main>:



int main (void)
{
    1d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d36:	46c6      	mov	lr, r8
    1d38:	b500      	push	{lr}
	system_init();
    1d3a:	4b17      	ldr	r3, [pc, #92]	; (1d98 <main+0x64>)
    1d3c:	4798      	blx	r3
	
	configure_usart();
    1d3e:	4b17      	ldr	r3, [pc, #92]	; (1d9c <main+0x68>)
    1d40:	4798      	blx	r3
	configure_usart_callbacks();
    1d42:	4b17      	ldr	r3, [pc, #92]	; (1da0 <main+0x6c>)
    1d44:	4798      	blx	r3

	/* Configure device and enable. */
	configure_i2c();
    1d46:	4b17      	ldr	r3, [pc, #92]	; (1da4 <main+0x70>)
    1d48:	4798      	blx	r3
	/* Configure callbacks and enable. */
	configure_i2c_callbacks();
    1d4a:	4b17      	ldr	r3, [pc, #92]	; (1da8 <main+0x74>)
    1d4c:	4798      	blx	r3

	delay_init();
    1d4e:	4b17      	ldr	r3, [pc, #92]	; (1dac <main+0x78>)
    1d50:	4798      	blx	r3
	cpu_irq_enable();
    1d52:	2201      	movs	r2, #1
    1d54:	4b16      	ldr	r3, [pc, #88]	; (1db0 <main+0x7c>)
    1d56:	701a      	strb	r2, [r3, #0]
    1d58:	f3bf 8f5f 	dmb	sy
    1d5c:	b662      	cpsie	i
	system_interrupt_enable_global();
	while(true)
	{
		for(int i=0;i<128;i++)
		{
			wr_packet.address=i;
    1d5e:	4d15      	ldr	r5, [pc, #84]	; (1db4 <main+0x80>)
			wr_packet.data_length=DATA_LENGTH;
    1d60:	2701      	movs	r7, #1
		for(int i=0;i<128;i++)
    1d62:	2400      	movs	r4, #0
			wr_packet.data=wr_buffer;
    1d64:	4b14      	ldr	r3, [pc, #80]	; (1db8 <main+0x84>)
    1d66:	4698      	mov	r8, r3
    1d68:	e002      	b.n	1d70 <main+0x3c>
		for(int i=0;i<128;i++)
    1d6a:	3401      	adds	r4, #1
    1d6c:	2c80      	cmp	r4, #128	; 0x80
    1d6e:	d0f8      	beq.n	1d62 <main+0x2e>
			wr_packet.address=i;
    1d70:	802c      	strh	r4, [r5, #0]
			wr_packet.data_length=DATA_LENGTH;
    1d72:	806f      	strh	r7, [r5, #2]
			wr_packet.data=wr_buffer;
    1d74:	4643      	mov	r3, r8
    1d76:	606b      	str	r3, [r5, #4]
			enum status_code i2c_status_job = i2c_master_write_packet_wait(&i2c_master_instance, &wr_packet);
    1d78:	0029      	movs	r1, r5
    1d7a:	4810      	ldr	r0, [pc, #64]	; (1dbc <main+0x88>)
    1d7c:	4b10      	ldr	r3, [pc, #64]	; (1dc0 <main+0x8c>)
    1d7e:	4798      	blx	r3
    1d80:	0006      	movs	r6, r0
			delay_ms(1);
    1d82:	2001      	movs	r0, #1
    1d84:	4b0f      	ldr	r3, [pc, #60]	; (1dc4 <main+0x90>)
    1d86:	4798      	blx	r3
			//printf("I2C srite status %x= %d\n\r", i, i2c_status_job);
			if(i2c_status_job == 0) printf("Ack at: %x\n\r", i);
    1d88:	2e00      	cmp	r6, #0
    1d8a:	d1ee      	bne.n	1d6a <main+0x36>
    1d8c:	0021      	movs	r1, r4
    1d8e:	480e      	ldr	r0, [pc, #56]	; (1dc8 <main+0x94>)
    1d90:	4b0e      	ldr	r3, [pc, #56]	; (1dcc <main+0x98>)
    1d92:	4798      	blx	r3
    1d94:	e7e9      	b.n	1d6a <main+0x36>
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	000018e5 	.word	0x000018e5
    1d9c:	00001b45 	.word	0x00001b45
    1da0:	00001c35 	.word	0x00001c35
    1da4:	00001c69 	.word	0x00001c69
    1da8:	00001d11 	.word	0x00001d11
    1dac:	00000119 	.word	0x00000119
    1db0:	20000008 	.word	0x20000008
    1db4:	20000138 	.word	0x20000138
    1db8:	200000cc 	.word	0x200000cc
    1dbc:	20000144 	.word	0x20000144
    1dc0:	00000581 	.word	0x00000581
    1dc4:	00000159 	.word	0x00000159
    1dc8:	000031a0 	.word	0x000031a0
    1dcc:	00002169 	.word	0x00002169

00001dd0 <__udivsi3>:
    1dd0:	2200      	movs	r2, #0
    1dd2:	0843      	lsrs	r3, r0, #1
    1dd4:	428b      	cmp	r3, r1
    1dd6:	d374      	bcc.n	1ec2 <__udivsi3+0xf2>
    1dd8:	0903      	lsrs	r3, r0, #4
    1dda:	428b      	cmp	r3, r1
    1ddc:	d35f      	bcc.n	1e9e <__udivsi3+0xce>
    1dde:	0a03      	lsrs	r3, r0, #8
    1de0:	428b      	cmp	r3, r1
    1de2:	d344      	bcc.n	1e6e <__udivsi3+0x9e>
    1de4:	0b03      	lsrs	r3, r0, #12
    1de6:	428b      	cmp	r3, r1
    1de8:	d328      	bcc.n	1e3c <__udivsi3+0x6c>
    1dea:	0c03      	lsrs	r3, r0, #16
    1dec:	428b      	cmp	r3, r1
    1dee:	d30d      	bcc.n	1e0c <__udivsi3+0x3c>
    1df0:	22ff      	movs	r2, #255	; 0xff
    1df2:	0209      	lsls	r1, r1, #8
    1df4:	ba12      	rev	r2, r2
    1df6:	0c03      	lsrs	r3, r0, #16
    1df8:	428b      	cmp	r3, r1
    1dfa:	d302      	bcc.n	1e02 <__udivsi3+0x32>
    1dfc:	1212      	asrs	r2, r2, #8
    1dfe:	0209      	lsls	r1, r1, #8
    1e00:	d065      	beq.n	1ece <__udivsi3+0xfe>
    1e02:	0b03      	lsrs	r3, r0, #12
    1e04:	428b      	cmp	r3, r1
    1e06:	d319      	bcc.n	1e3c <__udivsi3+0x6c>
    1e08:	e000      	b.n	1e0c <__udivsi3+0x3c>
    1e0a:	0a09      	lsrs	r1, r1, #8
    1e0c:	0bc3      	lsrs	r3, r0, #15
    1e0e:	428b      	cmp	r3, r1
    1e10:	d301      	bcc.n	1e16 <__udivsi3+0x46>
    1e12:	03cb      	lsls	r3, r1, #15
    1e14:	1ac0      	subs	r0, r0, r3
    1e16:	4152      	adcs	r2, r2
    1e18:	0b83      	lsrs	r3, r0, #14
    1e1a:	428b      	cmp	r3, r1
    1e1c:	d301      	bcc.n	1e22 <__udivsi3+0x52>
    1e1e:	038b      	lsls	r3, r1, #14
    1e20:	1ac0      	subs	r0, r0, r3
    1e22:	4152      	adcs	r2, r2
    1e24:	0b43      	lsrs	r3, r0, #13
    1e26:	428b      	cmp	r3, r1
    1e28:	d301      	bcc.n	1e2e <__udivsi3+0x5e>
    1e2a:	034b      	lsls	r3, r1, #13
    1e2c:	1ac0      	subs	r0, r0, r3
    1e2e:	4152      	adcs	r2, r2
    1e30:	0b03      	lsrs	r3, r0, #12
    1e32:	428b      	cmp	r3, r1
    1e34:	d301      	bcc.n	1e3a <__udivsi3+0x6a>
    1e36:	030b      	lsls	r3, r1, #12
    1e38:	1ac0      	subs	r0, r0, r3
    1e3a:	4152      	adcs	r2, r2
    1e3c:	0ac3      	lsrs	r3, r0, #11
    1e3e:	428b      	cmp	r3, r1
    1e40:	d301      	bcc.n	1e46 <__udivsi3+0x76>
    1e42:	02cb      	lsls	r3, r1, #11
    1e44:	1ac0      	subs	r0, r0, r3
    1e46:	4152      	adcs	r2, r2
    1e48:	0a83      	lsrs	r3, r0, #10
    1e4a:	428b      	cmp	r3, r1
    1e4c:	d301      	bcc.n	1e52 <__udivsi3+0x82>
    1e4e:	028b      	lsls	r3, r1, #10
    1e50:	1ac0      	subs	r0, r0, r3
    1e52:	4152      	adcs	r2, r2
    1e54:	0a43      	lsrs	r3, r0, #9
    1e56:	428b      	cmp	r3, r1
    1e58:	d301      	bcc.n	1e5e <__udivsi3+0x8e>
    1e5a:	024b      	lsls	r3, r1, #9
    1e5c:	1ac0      	subs	r0, r0, r3
    1e5e:	4152      	adcs	r2, r2
    1e60:	0a03      	lsrs	r3, r0, #8
    1e62:	428b      	cmp	r3, r1
    1e64:	d301      	bcc.n	1e6a <__udivsi3+0x9a>
    1e66:	020b      	lsls	r3, r1, #8
    1e68:	1ac0      	subs	r0, r0, r3
    1e6a:	4152      	adcs	r2, r2
    1e6c:	d2cd      	bcs.n	1e0a <__udivsi3+0x3a>
    1e6e:	09c3      	lsrs	r3, r0, #7
    1e70:	428b      	cmp	r3, r1
    1e72:	d301      	bcc.n	1e78 <__udivsi3+0xa8>
    1e74:	01cb      	lsls	r3, r1, #7
    1e76:	1ac0      	subs	r0, r0, r3
    1e78:	4152      	adcs	r2, r2
    1e7a:	0983      	lsrs	r3, r0, #6
    1e7c:	428b      	cmp	r3, r1
    1e7e:	d301      	bcc.n	1e84 <__udivsi3+0xb4>
    1e80:	018b      	lsls	r3, r1, #6
    1e82:	1ac0      	subs	r0, r0, r3
    1e84:	4152      	adcs	r2, r2
    1e86:	0943      	lsrs	r3, r0, #5
    1e88:	428b      	cmp	r3, r1
    1e8a:	d301      	bcc.n	1e90 <__udivsi3+0xc0>
    1e8c:	014b      	lsls	r3, r1, #5
    1e8e:	1ac0      	subs	r0, r0, r3
    1e90:	4152      	adcs	r2, r2
    1e92:	0903      	lsrs	r3, r0, #4
    1e94:	428b      	cmp	r3, r1
    1e96:	d301      	bcc.n	1e9c <__udivsi3+0xcc>
    1e98:	010b      	lsls	r3, r1, #4
    1e9a:	1ac0      	subs	r0, r0, r3
    1e9c:	4152      	adcs	r2, r2
    1e9e:	08c3      	lsrs	r3, r0, #3
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d301      	bcc.n	1ea8 <__udivsi3+0xd8>
    1ea4:	00cb      	lsls	r3, r1, #3
    1ea6:	1ac0      	subs	r0, r0, r3
    1ea8:	4152      	adcs	r2, r2
    1eaa:	0883      	lsrs	r3, r0, #2
    1eac:	428b      	cmp	r3, r1
    1eae:	d301      	bcc.n	1eb4 <__udivsi3+0xe4>
    1eb0:	008b      	lsls	r3, r1, #2
    1eb2:	1ac0      	subs	r0, r0, r3
    1eb4:	4152      	adcs	r2, r2
    1eb6:	0843      	lsrs	r3, r0, #1
    1eb8:	428b      	cmp	r3, r1
    1eba:	d301      	bcc.n	1ec0 <__udivsi3+0xf0>
    1ebc:	004b      	lsls	r3, r1, #1
    1ebe:	1ac0      	subs	r0, r0, r3
    1ec0:	4152      	adcs	r2, r2
    1ec2:	1a41      	subs	r1, r0, r1
    1ec4:	d200      	bcs.n	1ec8 <__udivsi3+0xf8>
    1ec6:	4601      	mov	r1, r0
    1ec8:	4152      	adcs	r2, r2
    1eca:	4610      	mov	r0, r2
    1ecc:	4770      	bx	lr
    1ece:	e7ff      	b.n	1ed0 <__udivsi3+0x100>
    1ed0:	b501      	push	{r0, lr}
    1ed2:	2000      	movs	r0, #0
    1ed4:	f000 f8f0 	bl	20b8 <__aeabi_idiv0>
    1ed8:	bd02      	pop	{r1, pc}
    1eda:	46c0      	nop			; (mov r8, r8)

00001edc <__aeabi_uidivmod>:
    1edc:	2900      	cmp	r1, #0
    1ede:	d0f7      	beq.n	1ed0 <__udivsi3+0x100>
    1ee0:	e776      	b.n	1dd0 <__udivsi3>
    1ee2:	4770      	bx	lr

00001ee4 <__divsi3>:
    1ee4:	4603      	mov	r3, r0
    1ee6:	430b      	orrs	r3, r1
    1ee8:	d47f      	bmi.n	1fea <__divsi3+0x106>
    1eea:	2200      	movs	r2, #0
    1eec:	0843      	lsrs	r3, r0, #1
    1eee:	428b      	cmp	r3, r1
    1ef0:	d374      	bcc.n	1fdc <__divsi3+0xf8>
    1ef2:	0903      	lsrs	r3, r0, #4
    1ef4:	428b      	cmp	r3, r1
    1ef6:	d35f      	bcc.n	1fb8 <__divsi3+0xd4>
    1ef8:	0a03      	lsrs	r3, r0, #8
    1efa:	428b      	cmp	r3, r1
    1efc:	d344      	bcc.n	1f88 <__divsi3+0xa4>
    1efe:	0b03      	lsrs	r3, r0, #12
    1f00:	428b      	cmp	r3, r1
    1f02:	d328      	bcc.n	1f56 <__divsi3+0x72>
    1f04:	0c03      	lsrs	r3, r0, #16
    1f06:	428b      	cmp	r3, r1
    1f08:	d30d      	bcc.n	1f26 <__divsi3+0x42>
    1f0a:	22ff      	movs	r2, #255	; 0xff
    1f0c:	0209      	lsls	r1, r1, #8
    1f0e:	ba12      	rev	r2, r2
    1f10:	0c03      	lsrs	r3, r0, #16
    1f12:	428b      	cmp	r3, r1
    1f14:	d302      	bcc.n	1f1c <__divsi3+0x38>
    1f16:	1212      	asrs	r2, r2, #8
    1f18:	0209      	lsls	r1, r1, #8
    1f1a:	d065      	beq.n	1fe8 <__divsi3+0x104>
    1f1c:	0b03      	lsrs	r3, r0, #12
    1f1e:	428b      	cmp	r3, r1
    1f20:	d319      	bcc.n	1f56 <__divsi3+0x72>
    1f22:	e000      	b.n	1f26 <__divsi3+0x42>
    1f24:	0a09      	lsrs	r1, r1, #8
    1f26:	0bc3      	lsrs	r3, r0, #15
    1f28:	428b      	cmp	r3, r1
    1f2a:	d301      	bcc.n	1f30 <__divsi3+0x4c>
    1f2c:	03cb      	lsls	r3, r1, #15
    1f2e:	1ac0      	subs	r0, r0, r3
    1f30:	4152      	adcs	r2, r2
    1f32:	0b83      	lsrs	r3, r0, #14
    1f34:	428b      	cmp	r3, r1
    1f36:	d301      	bcc.n	1f3c <__divsi3+0x58>
    1f38:	038b      	lsls	r3, r1, #14
    1f3a:	1ac0      	subs	r0, r0, r3
    1f3c:	4152      	adcs	r2, r2
    1f3e:	0b43      	lsrs	r3, r0, #13
    1f40:	428b      	cmp	r3, r1
    1f42:	d301      	bcc.n	1f48 <__divsi3+0x64>
    1f44:	034b      	lsls	r3, r1, #13
    1f46:	1ac0      	subs	r0, r0, r3
    1f48:	4152      	adcs	r2, r2
    1f4a:	0b03      	lsrs	r3, r0, #12
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d301      	bcc.n	1f54 <__divsi3+0x70>
    1f50:	030b      	lsls	r3, r1, #12
    1f52:	1ac0      	subs	r0, r0, r3
    1f54:	4152      	adcs	r2, r2
    1f56:	0ac3      	lsrs	r3, r0, #11
    1f58:	428b      	cmp	r3, r1
    1f5a:	d301      	bcc.n	1f60 <__divsi3+0x7c>
    1f5c:	02cb      	lsls	r3, r1, #11
    1f5e:	1ac0      	subs	r0, r0, r3
    1f60:	4152      	adcs	r2, r2
    1f62:	0a83      	lsrs	r3, r0, #10
    1f64:	428b      	cmp	r3, r1
    1f66:	d301      	bcc.n	1f6c <__divsi3+0x88>
    1f68:	028b      	lsls	r3, r1, #10
    1f6a:	1ac0      	subs	r0, r0, r3
    1f6c:	4152      	adcs	r2, r2
    1f6e:	0a43      	lsrs	r3, r0, #9
    1f70:	428b      	cmp	r3, r1
    1f72:	d301      	bcc.n	1f78 <__divsi3+0x94>
    1f74:	024b      	lsls	r3, r1, #9
    1f76:	1ac0      	subs	r0, r0, r3
    1f78:	4152      	adcs	r2, r2
    1f7a:	0a03      	lsrs	r3, r0, #8
    1f7c:	428b      	cmp	r3, r1
    1f7e:	d301      	bcc.n	1f84 <__divsi3+0xa0>
    1f80:	020b      	lsls	r3, r1, #8
    1f82:	1ac0      	subs	r0, r0, r3
    1f84:	4152      	adcs	r2, r2
    1f86:	d2cd      	bcs.n	1f24 <__divsi3+0x40>
    1f88:	09c3      	lsrs	r3, r0, #7
    1f8a:	428b      	cmp	r3, r1
    1f8c:	d301      	bcc.n	1f92 <__divsi3+0xae>
    1f8e:	01cb      	lsls	r3, r1, #7
    1f90:	1ac0      	subs	r0, r0, r3
    1f92:	4152      	adcs	r2, r2
    1f94:	0983      	lsrs	r3, r0, #6
    1f96:	428b      	cmp	r3, r1
    1f98:	d301      	bcc.n	1f9e <__divsi3+0xba>
    1f9a:	018b      	lsls	r3, r1, #6
    1f9c:	1ac0      	subs	r0, r0, r3
    1f9e:	4152      	adcs	r2, r2
    1fa0:	0943      	lsrs	r3, r0, #5
    1fa2:	428b      	cmp	r3, r1
    1fa4:	d301      	bcc.n	1faa <__divsi3+0xc6>
    1fa6:	014b      	lsls	r3, r1, #5
    1fa8:	1ac0      	subs	r0, r0, r3
    1faa:	4152      	adcs	r2, r2
    1fac:	0903      	lsrs	r3, r0, #4
    1fae:	428b      	cmp	r3, r1
    1fb0:	d301      	bcc.n	1fb6 <__divsi3+0xd2>
    1fb2:	010b      	lsls	r3, r1, #4
    1fb4:	1ac0      	subs	r0, r0, r3
    1fb6:	4152      	adcs	r2, r2
    1fb8:	08c3      	lsrs	r3, r0, #3
    1fba:	428b      	cmp	r3, r1
    1fbc:	d301      	bcc.n	1fc2 <__divsi3+0xde>
    1fbe:	00cb      	lsls	r3, r1, #3
    1fc0:	1ac0      	subs	r0, r0, r3
    1fc2:	4152      	adcs	r2, r2
    1fc4:	0883      	lsrs	r3, r0, #2
    1fc6:	428b      	cmp	r3, r1
    1fc8:	d301      	bcc.n	1fce <__divsi3+0xea>
    1fca:	008b      	lsls	r3, r1, #2
    1fcc:	1ac0      	subs	r0, r0, r3
    1fce:	4152      	adcs	r2, r2
    1fd0:	0843      	lsrs	r3, r0, #1
    1fd2:	428b      	cmp	r3, r1
    1fd4:	d301      	bcc.n	1fda <__divsi3+0xf6>
    1fd6:	004b      	lsls	r3, r1, #1
    1fd8:	1ac0      	subs	r0, r0, r3
    1fda:	4152      	adcs	r2, r2
    1fdc:	1a41      	subs	r1, r0, r1
    1fde:	d200      	bcs.n	1fe2 <__divsi3+0xfe>
    1fe0:	4601      	mov	r1, r0
    1fe2:	4152      	adcs	r2, r2
    1fe4:	4610      	mov	r0, r2
    1fe6:	4770      	bx	lr
    1fe8:	e05d      	b.n	20a6 <STACK_SIZE+0xa6>
    1fea:	0fca      	lsrs	r2, r1, #31
    1fec:	d000      	beq.n	1ff0 <__divsi3+0x10c>
    1fee:	4249      	negs	r1, r1
    1ff0:	1003      	asrs	r3, r0, #32
    1ff2:	d300      	bcc.n	1ff6 <__divsi3+0x112>
    1ff4:	4240      	negs	r0, r0
    1ff6:	4053      	eors	r3, r2
    1ff8:	2200      	movs	r2, #0
    1ffa:	469c      	mov	ip, r3
    1ffc:	0903      	lsrs	r3, r0, #4
    1ffe:	428b      	cmp	r3, r1
    2000:	d32d      	bcc.n	205e <STACK_SIZE+0x5e>
    2002:	0a03      	lsrs	r3, r0, #8
    2004:	428b      	cmp	r3, r1
    2006:	d312      	bcc.n	202e <STACK_SIZE+0x2e>
    2008:	22fc      	movs	r2, #252	; 0xfc
    200a:	0189      	lsls	r1, r1, #6
    200c:	ba12      	rev	r2, r2
    200e:	0a03      	lsrs	r3, r0, #8
    2010:	428b      	cmp	r3, r1
    2012:	d30c      	bcc.n	202e <STACK_SIZE+0x2e>
    2014:	0189      	lsls	r1, r1, #6
    2016:	1192      	asrs	r2, r2, #6
    2018:	428b      	cmp	r3, r1
    201a:	d308      	bcc.n	202e <STACK_SIZE+0x2e>
    201c:	0189      	lsls	r1, r1, #6
    201e:	1192      	asrs	r2, r2, #6
    2020:	428b      	cmp	r3, r1
    2022:	d304      	bcc.n	202e <STACK_SIZE+0x2e>
    2024:	0189      	lsls	r1, r1, #6
    2026:	d03a      	beq.n	209e <STACK_SIZE+0x9e>
    2028:	1192      	asrs	r2, r2, #6
    202a:	e000      	b.n	202e <STACK_SIZE+0x2e>
    202c:	0989      	lsrs	r1, r1, #6
    202e:	09c3      	lsrs	r3, r0, #7
    2030:	428b      	cmp	r3, r1
    2032:	d301      	bcc.n	2038 <STACK_SIZE+0x38>
    2034:	01cb      	lsls	r3, r1, #7
    2036:	1ac0      	subs	r0, r0, r3
    2038:	4152      	adcs	r2, r2
    203a:	0983      	lsrs	r3, r0, #6
    203c:	428b      	cmp	r3, r1
    203e:	d301      	bcc.n	2044 <STACK_SIZE+0x44>
    2040:	018b      	lsls	r3, r1, #6
    2042:	1ac0      	subs	r0, r0, r3
    2044:	4152      	adcs	r2, r2
    2046:	0943      	lsrs	r3, r0, #5
    2048:	428b      	cmp	r3, r1
    204a:	d301      	bcc.n	2050 <STACK_SIZE+0x50>
    204c:	014b      	lsls	r3, r1, #5
    204e:	1ac0      	subs	r0, r0, r3
    2050:	4152      	adcs	r2, r2
    2052:	0903      	lsrs	r3, r0, #4
    2054:	428b      	cmp	r3, r1
    2056:	d301      	bcc.n	205c <STACK_SIZE+0x5c>
    2058:	010b      	lsls	r3, r1, #4
    205a:	1ac0      	subs	r0, r0, r3
    205c:	4152      	adcs	r2, r2
    205e:	08c3      	lsrs	r3, r0, #3
    2060:	428b      	cmp	r3, r1
    2062:	d301      	bcc.n	2068 <STACK_SIZE+0x68>
    2064:	00cb      	lsls	r3, r1, #3
    2066:	1ac0      	subs	r0, r0, r3
    2068:	4152      	adcs	r2, r2
    206a:	0883      	lsrs	r3, r0, #2
    206c:	428b      	cmp	r3, r1
    206e:	d301      	bcc.n	2074 <STACK_SIZE+0x74>
    2070:	008b      	lsls	r3, r1, #2
    2072:	1ac0      	subs	r0, r0, r3
    2074:	4152      	adcs	r2, r2
    2076:	d2d9      	bcs.n	202c <STACK_SIZE+0x2c>
    2078:	0843      	lsrs	r3, r0, #1
    207a:	428b      	cmp	r3, r1
    207c:	d301      	bcc.n	2082 <STACK_SIZE+0x82>
    207e:	004b      	lsls	r3, r1, #1
    2080:	1ac0      	subs	r0, r0, r3
    2082:	4152      	adcs	r2, r2
    2084:	1a41      	subs	r1, r0, r1
    2086:	d200      	bcs.n	208a <STACK_SIZE+0x8a>
    2088:	4601      	mov	r1, r0
    208a:	4663      	mov	r3, ip
    208c:	4152      	adcs	r2, r2
    208e:	105b      	asrs	r3, r3, #1
    2090:	4610      	mov	r0, r2
    2092:	d301      	bcc.n	2098 <STACK_SIZE+0x98>
    2094:	4240      	negs	r0, r0
    2096:	2b00      	cmp	r3, #0
    2098:	d500      	bpl.n	209c <STACK_SIZE+0x9c>
    209a:	4249      	negs	r1, r1
    209c:	4770      	bx	lr
    209e:	4663      	mov	r3, ip
    20a0:	105b      	asrs	r3, r3, #1
    20a2:	d300      	bcc.n	20a6 <STACK_SIZE+0xa6>
    20a4:	4240      	negs	r0, r0
    20a6:	b501      	push	{r0, lr}
    20a8:	2000      	movs	r0, #0
    20aa:	f000 f805 	bl	20b8 <__aeabi_idiv0>
    20ae:	bd02      	pop	{r1, pc}

000020b0 <__aeabi_idivmod>:
    20b0:	2900      	cmp	r1, #0
    20b2:	d0f8      	beq.n	20a6 <STACK_SIZE+0xa6>
    20b4:	e716      	b.n	1ee4 <__divsi3>
    20b6:	4770      	bx	lr

000020b8 <__aeabi_idiv0>:
    20b8:	4770      	bx	lr
    20ba:	46c0      	nop			; (mov r8, r8)

000020bc <__aeabi_lmul>:
    20bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20be:	46ce      	mov	lr, r9
    20c0:	4647      	mov	r7, r8
    20c2:	0415      	lsls	r5, r2, #16
    20c4:	0c2d      	lsrs	r5, r5, #16
    20c6:	002e      	movs	r6, r5
    20c8:	b580      	push	{r7, lr}
    20ca:	0407      	lsls	r7, r0, #16
    20cc:	0c14      	lsrs	r4, r2, #16
    20ce:	0c3f      	lsrs	r7, r7, #16
    20d0:	4699      	mov	r9, r3
    20d2:	0c03      	lsrs	r3, r0, #16
    20d4:	437e      	muls	r6, r7
    20d6:	435d      	muls	r5, r3
    20d8:	4367      	muls	r7, r4
    20da:	4363      	muls	r3, r4
    20dc:	197f      	adds	r7, r7, r5
    20de:	0c34      	lsrs	r4, r6, #16
    20e0:	19e4      	adds	r4, r4, r7
    20e2:	469c      	mov	ip, r3
    20e4:	42a5      	cmp	r5, r4
    20e6:	d903      	bls.n	20f0 <__aeabi_lmul+0x34>
    20e8:	2380      	movs	r3, #128	; 0x80
    20ea:	025b      	lsls	r3, r3, #9
    20ec:	4698      	mov	r8, r3
    20ee:	44c4      	add	ip, r8
    20f0:	464b      	mov	r3, r9
    20f2:	4351      	muls	r1, r2
    20f4:	4343      	muls	r3, r0
    20f6:	0436      	lsls	r6, r6, #16
    20f8:	0c36      	lsrs	r6, r6, #16
    20fa:	0c25      	lsrs	r5, r4, #16
    20fc:	0424      	lsls	r4, r4, #16
    20fe:	4465      	add	r5, ip
    2100:	19a4      	adds	r4, r4, r6
    2102:	1859      	adds	r1, r3, r1
    2104:	1949      	adds	r1, r1, r5
    2106:	0020      	movs	r0, r4
    2108:	bc0c      	pop	{r2, r3}
    210a:	4690      	mov	r8, r2
    210c:	4699      	mov	r9, r3
    210e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002110 <__libc_init_array>:
    2110:	b570      	push	{r4, r5, r6, lr}
    2112:	2600      	movs	r6, #0
    2114:	4d0c      	ldr	r5, [pc, #48]	; (2148 <__libc_init_array+0x38>)
    2116:	4c0d      	ldr	r4, [pc, #52]	; (214c <__libc_init_array+0x3c>)
    2118:	1b64      	subs	r4, r4, r5
    211a:	10a4      	asrs	r4, r4, #2
    211c:	42a6      	cmp	r6, r4
    211e:	d109      	bne.n	2134 <__libc_init_array+0x24>
    2120:	2600      	movs	r6, #0
    2122:	f001 f891 	bl	3248 <_init>
    2126:	4d0a      	ldr	r5, [pc, #40]	; (2150 <__libc_init_array+0x40>)
    2128:	4c0a      	ldr	r4, [pc, #40]	; (2154 <__libc_init_array+0x44>)
    212a:	1b64      	subs	r4, r4, r5
    212c:	10a4      	asrs	r4, r4, #2
    212e:	42a6      	cmp	r6, r4
    2130:	d105      	bne.n	213e <__libc_init_array+0x2e>
    2132:	bd70      	pop	{r4, r5, r6, pc}
    2134:	00b3      	lsls	r3, r6, #2
    2136:	58eb      	ldr	r3, [r5, r3]
    2138:	4798      	blx	r3
    213a:	3601      	adds	r6, #1
    213c:	e7ee      	b.n	211c <__libc_init_array+0xc>
    213e:	00b3      	lsls	r3, r6, #2
    2140:	58eb      	ldr	r3, [r5, r3]
    2142:	4798      	blx	r3
    2144:	3601      	adds	r6, #1
    2146:	e7f2      	b.n	212e <__libc_init_array+0x1e>
    2148:	00003254 	.word	0x00003254
    214c:	00003254 	.word	0x00003254
    2150:	00003254 	.word	0x00003254
    2154:	00003258 	.word	0x00003258

00002158 <memset>:
    2158:	0003      	movs	r3, r0
    215a:	1882      	adds	r2, r0, r2
    215c:	4293      	cmp	r3, r2
    215e:	d100      	bne.n	2162 <memset+0xa>
    2160:	4770      	bx	lr
    2162:	7019      	strb	r1, [r3, #0]
    2164:	3301      	adds	r3, #1
    2166:	e7f9      	b.n	215c <memset+0x4>

00002168 <iprintf>:
    2168:	b40f      	push	{r0, r1, r2, r3}
    216a:	4b0b      	ldr	r3, [pc, #44]	; (2198 <iprintf+0x30>)
    216c:	b513      	push	{r0, r1, r4, lr}
    216e:	681c      	ldr	r4, [r3, #0]
    2170:	2c00      	cmp	r4, #0
    2172:	d005      	beq.n	2180 <iprintf+0x18>
    2174:	69a3      	ldr	r3, [r4, #24]
    2176:	2b00      	cmp	r3, #0
    2178:	d102      	bne.n	2180 <iprintf+0x18>
    217a:	0020      	movs	r0, r4
    217c:	f000 f9bc 	bl	24f8 <__sinit>
    2180:	ab05      	add	r3, sp, #20
    2182:	9a04      	ldr	r2, [sp, #16]
    2184:	68a1      	ldr	r1, [r4, #8]
    2186:	0020      	movs	r0, r4
    2188:	9301      	str	r3, [sp, #4]
    218a:	f000 fb8b 	bl	28a4 <_vfiprintf_r>
    218e:	bc16      	pop	{r1, r2, r4}
    2190:	bc08      	pop	{r3}
    2192:	b004      	add	sp, #16
    2194:	4718      	bx	r3
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	2000000c 	.word	0x2000000c

0000219c <setbuf>:
    219c:	424a      	negs	r2, r1
    219e:	414a      	adcs	r2, r1
    21a0:	2380      	movs	r3, #128	; 0x80
    21a2:	b510      	push	{r4, lr}
    21a4:	0052      	lsls	r2, r2, #1
    21a6:	00db      	lsls	r3, r3, #3
    21a8:	f000 f802 	bl	21b0 <setvbuf>
    21ac:	bd10      	pop	{r4, pc}
	...

000021b0 <setvbuf>:
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b2:	001d      	movs	r5, r3
    21b4:	4b4f      	ldr	r3, [pc, #316]	; (22f4 <setvbuf+0x144>)
    21b6:	b085      	sub	sp, #20
    21b8:	681e      	ldr	r6, [r3, #0]
    21ba:	0004      	movs	r4, r0
    21bc:	000f      	movs	r7, r1
    21be:	9200      	str	r2, [sp, #0]
    21c0:	2e00      	cmp	r6, #0
    21c2:	d005      	beq.n	21d0 <setvbuf+0x20>
    21c4:	69b3      	ldr	r3, [r6, #24]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d102      	bne.n	21d0 <setvbuf+0x20>
    21ca:	0030      	movs	r0, r6
    21cc:	f000 f994 	bl	24f8 <__sinit>
    21d0:	4b49      	ldr	r3, [pc, #292]	; (22f8 <setvbuf+0x148>)
    21d2:	429c      	cmp	r4, r3
    21d4:	d150      	bne.n	2278 <setvbuf+0xc8>
    21d6:	6874      	ldr	r4, [r6, #4]
    21d8:	9b00      	ldr	r3, [sp, #0]
    21da:	2b02      	cmp	r3, #2
    21dc:	d005      	beq.n	21ea <setvbuf+0x3a>
    21de:	2b01      	cmp	r3, #1
    21e0:	d900      	bls.n	21e4 <setvbuf+0x34>
    21e2:	e084      	b.n	22ee <setvbuf+0x13e>
    21e4:	2d00      	cmp	r5, #0
    21e6:	da00      	bge.n	21ea <setvbuf+0x3a>
    21e8:	e081      	b.n	22ee <setvbuf+0x13e>
    21ea:	0021      	movs	r1, r4
    21ec:	0030      	movs	r0, r6
    21ee:	f000 f915 	bl	241c <_fflush_r>
    21f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21f4:	2900      	cmp	r1, #0
    21f6:	d008      	beq.n	220a <setvbuf+0x5a>
    21f8:	0023      	movs	r3, r4
    21fa:	3344      	adds	r3, #68	; 0x44
    21fc:	4299      	cmp	r1, r3
    21fe:	d002      	beq.n	2206 <setvbuf+0x56>
    2200:	0030      	movs	r0, r6
    2202:	f000 fa7f 	bl	2704 <_free_r>
    2206:	2300      	movs	r3, #0
    2208:	6363      	str	r3, [r4, #52]	; 0x34
    220a:	2300      	movs	r3, #0
    220c:	61a3      	str	r3, [r4, #24]
    220e:	6063      	str	r3, [r4, #4]
    2210:	89a3      	ldrh	r3, [r4, #12]
    2212:	061b      	lsls	r3, r3, #24
    2214:	d503      	bpl.n	221e <setvbuf+0x6e>
    2216:	6921      	ldr	r1, [r4, #16]
    2218:	0030      	movs	r0, r6
    221a:	f000 fa73 	bl	2704 <_free_r>
    221e:	89a3      	ldrh	r3, [r4, #12]
    2220:	4a36      	ldr	r2, [pc, #216]	; (22fc <setvbuf+0x14c>)
    2222:	4013      	ands	r3, r2
    2224:	81a3      	strh	r3, [r4, #12]
    2226:	9b00      	ldr	r3, [sp, #0]
    2228:	2b02      	cmp	r3, #2
    222a:	d05a      	beq.n	22e2 <setvbuf+0x132>
    222c:	ab03      	add	r3, sp, #12
    222e:	aa02      	add	r2, sp, #8
    2230:	0021      	movs	r1, r4
    2232:	0030      	movs	r0, r6
    2234:	f000 f9f6 	bl	2624 <__swhatbuf_r>
    2238:	89a3      	ldrh	r3, [r4, #12]
    223a:	4318      	orrs	r0, r3
    223c:	81a0      	strh	r0, [r4, #12]
    223e:	2d00      	cmp	r5, #0
    2240:	d124      	bne.n	228c <setvbuf+0xdc>
    2242:	9d02      	ldr	r5, [sp, #8]
    2244:	0028      	movs	r0, r5
    2246:	f000 fa53 	bl	26f0 <malloc>
    224a:	9501      	str	r5, [sp, #4]
    224c:	1e07      	subs	r7, r0, #0
    224e:	d142      	bne.n	22d6 <setvbuf+0x126>
    2250:	9b02      	ldr	r3, [sp, #8]
    2252:	9301      	str	r3, [sp, #4]
    2254:	42ab      	cmp	r3, r5
    2256:	d139      	bne.n	22cc <setvbuf+0x11c>
    2258:	2001      	movs	r0, #1
    225a:	4240      	negs	r0, r0
    225c:	2302      	movs	r3, #2
    225e:	89a2      	ldrh	r2, [r4, #12]
    2260:	4313      	orrs	r3, r2
    2262:	81a3      	strh	r3, [r4, #12]
    2264:	2300      	movs	r3, #0
    2266:	60a3      	str	r3, [r4, #8]
    2268:	0023      	movs	r3, r4
    226a:	3347      	adds	r3, #71	; 0x47
    226c:	6023      	str	r3, [r4, #0]
    226e:	6123      	str	r3, [r4, #16]
    2270:	2301      	movs	r3, #1
    2272:	6163      	str	r3, [r4, #20]
    2274:	b005      	add	sp, #20
    2276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2278:	4b21      	ldr	r3, [pc, #132]	; (2300 <setvbuf+0x150>)
    227a:	429c      	cmp	r4, r3
    227c:	d101      	bne.n	2282 <setvbuf+0xd2>
    227e:	68b4      	ldr	r4, [r6, #8]
    2280:	e7aa      	b.n	21d8 <setvbuf+0x28>
    2282:	4b20      	ldr	r3, [pc, #128]	; (2304 <setvbuf+0x154>)
    2284:	429c      	cmp	r4, r3
    2286:	d1a7      	bne.n	21d8 <setvbuf+0x28>
    2288:	68f4      	ldr	r4, [r6, #12]
    228a:	e7a5      	b.n	21d8 <setvbuf+0x28>
    228c:	2f00      	cmp	r7, #0
    228e:	d0d9      	beq.n	2244 <setvbuf+0x94>
    2290:	69b3      	ldr	r3, [r6, #24]
    2292:	2b00      	cmp	r3, #0
    2294:	d102      	bne.n	229c <setvbuf+0xec>
    2296:	0030      	movs	r0, r6
    2298:	f000 f92e 	bl	24f8 <__sinit>
    229c:	9b00      	ldr	r3, [sp, #0]
    229e:	2b01      	cmp	r3, #1
    22a0:	d103      	bne.n	22aa <setvbuf+0xfa>
    22a2:	89a3      	ldrh	r3, [r4, #12]
    22a4:	9a00      	ldr	r2, [sp, #0]
    22a6:	431a      	orrs	r2, r3
    22a8:	81a2      	strh	r2, [r4, #12]
    22aa:	2008      	movs	r0, #8
    22ac:	89a3      	ldrh	r3, [r4, #12]
    22ae:	6027      	str	r7, [r4, #0]
    22b0:	6127      	str	r7, [r4, #16]
    22b2:	6165      	str	r5, [r4, #20]
    22b4:	4018      	ands	r0, r3
    22b6:	d018      	beq.n	22ea <setvbuf+0x13a>
    22b8:	2001      	movs	r0, #1
    22ba:	4018      	ands	r0, r3
    22bc:	2300      	movs	r3, #0
    22be:	4298      	cmp	r0, r3
    22c0:	d011      	beq.n	22e6 <setvbuf+0x136>
    22c2:	426d      	negs	r5, r5
    22c4:	60a3      	str	r3, [r4, #8]
    22c6:	61a5      	str	r5, [r4, #24]
    22c8:	0018      	movs	r0, r3
    22ca:	e7d3      	b.n	2274 <setvbuf+0xc4>
    22cc:	9801      	ldr	r0, [sp, #4]
    22ce:	f000 fa0f 	bl	26f0 <malloc>
    22d2:	1e07      	subs	r7, r0, #0
    22d4:	d0c0      	beq.n	2258 <setvbuf+0xa8>
    22d6:	2380      	movs	r3, #128	; 0x80
    22d8:	89a2      	ldrh	r2, [r4, #12]
    22da:	9d01      	ldr	r5, [sp, #4]
    22dc:	4313      	orrs	r3, r2
    22de:	81a3      	strh	r3, [r4, #12]
    22e0:	e7d6      	b.n	2290 <setvbuf+0xe0>
    22e2:	2000      	movs	r0, #0
    22e4:	e7ba      	b.n	225c <setvbuf+0xac>
    22e6:	60a5      	str	r5, [r4, #8]
    22e8:	e7c4      	b.n	2274 <setvbuf+0xc4>
    22ea:	60a0      	str	r0, [r4, #8]
    22ec:	e7c2      	b.n	2274 <setvbuf+0xc4>
    22ee:	2001      	movs	r0, #1
    22f0:	4240      	negs	r0, r0
    22f2:	e7bf      	b.n	2274 <setvbuf+0xc4>
    22f4:	2000000c 	.word	0x2000000c
    22f8:	000031d4 	.word	0x000031d4
    22fc:	fffff35c 	.word	0xfffff35c
    2300:	000031f4 	.word	0x000031f4
    2304:	000031b4 	.word	0x000031b4

00002308 <__sflush_r>:
    2308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    230a:	898a      	ldrh	r2, [r1, #12]
    230c:	0005      	movs	r5, r0
    230e:	000c      	movs	r4, r1
    2310:	0713      	lsls	r3, r2, #28
    2312:	d460      	bmi.n	23d6 <__sflush_r+0xce>
    2314:	684b      	ldr	r3, [r1, #4]
    2316:	2b00      	cmp	r3, #0
    2318:	dc04      	bgt.n	2324 <__sflush_r+0x1c>
    231a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    231c:	2b00      	cmp	r3, #0
    231e:	dc01      	bgt.n	2324 <__sflush_r+0x1c>
    2320:	2000      	movs	r0, #0
    2322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2324:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2326:	2f00      	cmp	r7, #0
    2328:	d0fa      	beq.n	2320 <__sflush_r+0x18>
    232a:	2300      	movs	r3, #0
    232c:	682e      	ldr	r6, [r5, #0]
    232e:	602b      	str	r3, [r5, #0]
    2330:	2380      	movs	r3, #128	; 0x80
    2332:	015b      	lsls	r3, r3, #5
    2334:	401a      	ands	r2, r3
    2336:	d034      	beq.n	23a2 <__sflush_r+0x9a>
    2338:	6d60      	ldr	r0, [r4, #84]	; 0x54
    233a:	89a3      	ldrh	r3, [r4, #12]
    233c:	075b      	lsls	r3, r3, #29
    233e:	d506      	bpl.n	234e <__sflush_r+0x46>
    2340:	6863      	ldr	r3, [r4, #4]
    2342:	1ac0      	subs	r0, r0, r3
    2344:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2346:	2b00      	cmp	r3, #0
    2348:	d001      	beq.n	234e <__sflush_r+0x46>
    234a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    234c:	1ac0      	subs	r0, r0, r3
    234e:	0002      	movs	r2, r0
    2350:	6a21      	ldr	r1, [r4, #32]
    2352:	2300      	movs	r3, #0
    2354:	0028      	movs	r0, r5
    2356:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2358:	47b8      	blx	r7
    235a:	89a1      	ldrh	r1, [r4, #12]
    235c:	1c43      	adds	r3, r0, #1
    235e:	d106      	bne.n	236e <__sflush_r+0x66>
    2360:	682b      	ldr	r3, [r5, #0]
    2362:	2b1d      	cmp	r3, #29
    2364:	d831      	bhi.n	23ca <__sflush_r+0xc2>
    2366:	4a2c      	ldr	r2, [pc, #176]	; (2418 <__sflush_r+0x110>)
    2368:	40da      	lsrs	r2, r3
    236a:	07d3      	lsls	r3, r2, #31
    236c:	d52d      	bpl.n	23ca <__sflush_r+0xc2>
    236e:	2300      	movs	r3, #0
    2370:	6063      	str	r3, [r4, #4]
    2372:	6923      	ldr	r3, [r4, #16]
    2374:	6023      	str	r3, [r4, #0]
    2376:	04cb      	lsls	r3, r1, #19
    2378:	d505      	bpl.n	2386 <__sflush_r+0x7e>
    237a:	1c43      	adds	r3, r0, #1
    237c:	d102      	bne.n	2384 <__sflush_r+0x7c>
    237e:	682b      	ldr	r3, [r5, #0]
    2380:	2b00      	cmp	r3, #0
    2382:	d100      	bne.n	2386 <__sflush_r+0x7e>
    2384:	6560      	str	r0, [r4, #84]	; 0x54
    2386:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2388:	602e      	str	r6, [r5, #0]
    238a:	2900      	cmp	r1, #0
    238c:	d0c8      	beq.n	2320 <__sflush_r+0x18>
    238e:	0023      	movs	r3, r4
    2390:	3344      	adds	r3, #68	; 0x44
    2392:	4299      	cmp	r1, r3
    2394:	d002      	beq.n	239c <__sflush_r+0x94>
    2396:	0028      	movs	r0, r5
    2398:	f000 f9b4 	bl	2704 <_free_r>
    239c:	2000      	movs	r0, #0
    239e:	6360      	str	r0, [r4, #52]	; 0x34
    23a0:	e7bf      	b.n	2322 <__sflush_r+0x1a>
    23a2:	2301      	movs	r3, #1
    23a4:	6a21      	ldr	r1, [r4, #32]
    23a6:	0028      	movs	r0, r5
    23a8:	47b8      	blx	r7
    23aa:	1c43      	adds	r3, r0, #1
    23ac:	d1c5      	bne.n	233a <__sflush_r+0x32>
    23ae:	682b      	ldr	r3, [r5, #0]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d0c2      	beq.n	233a <__sflush_r+0x32>
    23b4:	2b1d      	cmp	r3, #29
    23b6:	d001      	beq.n	23bc <__sflush_r+0xb4>
    23b8:	2b16      	cmp	r3, #22
    23ba:	d101      	bne.n	23c0 <__sflush_r+0xb8>
    23bc:	602e      	str	r6, [r5, #0]
    23be:	e7af      	b.n	2320 <__sflush_r+0x18>
    23c0:	2340      	movs	r3, #64	; 0x40
    23c2:	89a2      	ldrh	r2, [r4, #12]
    23c4:	4313      	orrs	r3, r2
    23c6:	81a3      	strh	r3, [r4, #12]
    23c8:	e7ab      	b.n	2322 <__sflush_r+0x1a>
    23ca:	2340      	movs	r3, #64	; 0x40
    23cc:	430b      	orrs	r3, r1
    23ce:	2001      	movs	r0, #1
    23d0:	81a3      	strh	r3, [r4, #12]
    23d2:	4240      	negs	r0, r0
    23d4:	e7a5      	b.n	2322 <__sflush_r+0x1a>
    23d6:	690f      	ldr	r7, [r1, #16]
    23d8:	2f00      	cmp	r7, #0
    23da:	d0a1      	beq.n	2320 <__sflush_r+0x18>
    23dc:	680b      	ldr	r3, [r1, #0]
    23de:	600f      	str	r7, [r1, #0]
    23e0:	1bdb      	subs	r3, r3, r7
    23e2:	9301      	str	r3, [sp, #4]
    23e4:	2300      	movs	r3, #0
    23e6:	0792      	lsls	r2, r2, #30
    23e8:	d100      	bne.n	23ec <__sflush_r+0xe4>
    23ea:	694b      	ldr	r3, [r1, #20]
    23ec:	60a3      	str	r3, [r4, #8]
    23ee:	9b01      	ldr	r3, [sp, #4]
    23f0:	2b00      	cmp	r3, #0
    23f2:	dc00      	bgt.n	23f6 <__sflush_r+0xee>
    23f4:	e794      	b.n	2320 <__sflush_r+0x18>
    23f6:	9b01      	ldr	r3, [sp, #4]
    23f8:	003a      	movs	r2, r7
    23fa:	6a21      	ldr	r1, [r4, #32]
    23fc:	0028      	movs	r0, r5
    23fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2400:	47b0      	blx	r6
    2402:	2800      	cmp	r0, #0
    2404:	dc03      	bgt.n	240e <__sflush_r+0x106>
    2406:	2340      	movs	r3, #64	; 0x40
    2408:	89a2      	ldrh	r2, [r4, #12]
    240a:	4313      	orrs	r3, r2
    240c:	e7df      	b.n	23ce <__sflush_r+0xc6>
    240e:	9b01      	ldr	r3, [sp, #4]
    2410:	183f      	adds	r7, r7, r0
    2412:	1a1b      	subs	r3, r3, r0
    2414:	9301      	str	r3, [sp, #4]
    2416:	e7ea      	b.n	23ee <__sflush_r+0xe6>
    2418:	20400001 	.word	0x20400001

0000241c <_fflush_r>:
    241c:	690b      	ldr	r3, [r1, #16]
    241e:	b570      	push	{r4, r5, r6, lr}
    2420:	0005      	movs	r5, r0
    2422:	000c      	movs	r4, r1
    2424:	2b00      	cmp	r3, #0
    2426:	d101      	bne.n	242c <_fflush_r+0x10>
    2428:	2000      	movs	r0, #0
    242a:	bd70      	pop	{r4, r5, r6, pc}
    242c:	2800      	cmp	r0, #0
    242e:	d004      	beq.n	243a <_fflush_r+0x1e>
    2430:	6983      	ldr	r3, [r0, #24]
    2432:	2b00      	cmp	r3, #0
    2434:	d101      	bne.n	243a <_fflush_r+0x1e>
    2436:	f000 f85f 	bl	24f8 <__sinit>
    243a:	4b0b      	ldr	r3, [pc, #44]	; (2468 <_fflush_r+0x4c>)
    243c:	429c      	cmp	r4, r3
    243e:	d109      	bne.n	2454 <_fflush_r+0x38>
    2440:	686c      	ldr	r4, [r5, #4]
    2442:	220c      	movs	r2, #12
    2444:	5ea3      	ldrsh	r3, [r4, r2]
    2446:	2b00      	cmp	r3, #0
    2448:	d0ee      	beq.n	2428 <_fflush_r+0xc>
    244a:	0021      	movs	r1, r4
    244c:	0028      	movs	r0, r5
    244e:	f7ff ff5b 	bl	2308 <__sflush_r>
    2452:	e7ea      	b.n	242a <_fflush_r+0xe>
    2454:	4b05      	ldr	r3, [pc, #20]	; (246c <_fflush_r+0x50>)
    2456:	429c      	cmp	r4, r3
    2458:	d101      	bne.n	245e <_fflush_r+0x42>
    245a:	68ac      	ldr	r4, [r5, #8]
    245c:	e7f1      	b.n	2442 <_fflush_r+0x26>
    245e:	4b04      	ldr	r3, [pc, #16]	; (2470 <_fflush_r+0x54>)
    2460:	429c      	cmp	r4, r3
    2462:	d1ee      	bne.n	2442 <_fflush_r+0x26>
    2464:	68ec      	ldr	r4, [r5, #12]
    2466:	e7ec      	b.n	2442 <_fflush_r+0x26>
    2468:	000031d4 	.word	0x000031d4
    246c:	000031f4 	.word	0x000031f4
    2470:	000031b4 	.word	0x000031b4

00002474 <_cleanup_r>:
    2474:	b510      	push	{r4, lr}
    2476:	4902      	ldr	r1, [pc, #8]	; (2480 <_cleanup_r+0xc>)
    2478:	f000 f8b2 	bl	25e0 <_fwalk_reent>
    247c:	bd10      	pop	{r4, pc}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	0000241d 	.word	0x0000241d

00002484 <std.isra.0>:
    2484:	2300      	movs	r3, #0
    2486:	b510      	push	{r4, lr}
    2488:	0004      	movs	r4, r0
    248a:	6003      	str	r3, [r0, #0]
    248c:	6043      	str	r3, [r0, #4]
    248e:	6083      	str	r3, [r0, #8]
    2490:	8181      	strh	r1, [r0, #12]
    2492:	6643      	str	r3, [r0, #100]	; 0x64
    2494:	81c2      	strh	r2, [r0, #14]
    2496:	6103      	str	r3, [r0, #16]
    2498:	6143      	str	r3, [r0, #20]
    249a:	6183      	str	r3, [r0, #24]
    249c:	0019      	movs	r1, r3
    249e:	2208      	movs	r2, #8
    24a0:	305c      	adds	r0, #92	; 0x5c
    24a2:	f7ff fe59 	bl	2158 <memset>
    24a6:	4b05      	ldr	r3, [pc, #20]	; (24bc <std.isra.0+0x38>)
    24a8:	6224      	str	r4, [r4, #32]
    24aa:	6263      	str	r3, [r4, #36]	; 0x24
    24ac:	4b04      	ldr	r3, [pc, #16]	; (24c0 <std.isra.0+0x3c>)
    24ae:	62a3      	str	r3, [r4, #40]	; 0x28
    24b0:	4b04      	ldr	r3, [pc, #16]	; (24c4 <std.isra.0+0x40>)
    24b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    24b4:	4b04      	ldr	r3, [pc, #16]	; (24c8 <std.isra.0+0x44>)
    24b6:	6323      	str	r3, [r4, #48]	; 0x30
    24b8:	bd10      	pop	{r4, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	00002e11 	.word	0x00002e11
    24c0:	00002e39 	.word	0x00002e39
    24c4:	00002e71 	.word	0x00002e71
    24c8:	00002e9d 	.word	0x00002e9d

000024cc <__sfmoreglue>:
    24cc:	b570      	push	{r4, r5, r6, lr}
    24ce:	2568      	movs	r5, #104	; 0x68
    24d0:	1e4a      	subs	r2, r1, #1
    24d2:	4355      	muls	r5, r2
    24d4:	000e      	movs	r6, r1
    24d6:	0029      	movs	r1, r5
    24d8:	3174      	adds	r1, #116	; 0x74
    24da:	f000 f95d 	bl	2798 <_malloc_r>
    24de:	1e04      	subs	r4, r0, #0
    24e0:	d008      	beq.n	24f4 <__sfmoreglue+0x28>
    24e2:	2100      	movs	r1, #0
    24e4:	002a      	movs	r2, r5
    24e6:	6001      	str	r1, [r0, #0]
    24e8:	6046      	str	r6, [r0, #4]
    24ea:	300c      	adds	r0, #12
    24ec:	60a0      	str	r0, [r4, #8]
    24ee:	3268      	adds	r2, #104	; 0x68
    24f0:	f7ff fe32 	bl	2158 <memset>
    24f4:	0020      	movs	r0, r4
    24f6:	bd70      	pop	{r4, r5, r6, pc}

000024f8 <__sinit>:
    24f8:	6983      	ldr	r3, [r0, #24]
    24fa:	b513      	push	{r0, r1, r4, lr}
    24fc:	0004      	movs	r4, r0
    24fe:	2b00      	cmp	r3, #0
    2500:	d128      	bne.n	2554 <__sinit+0x5c>
    2502:	6483      	str	r3, [r0, #72]	; 0x48
    2504:	64c3      	str	r3, [r0, #76]	; 0x4c
    2506:	6503      	str	r3, [r0, #80]	; 0x50
    2508:	4b13      	ldr	r3, [pc, #76]	; (2558 <__sinit+0x60>)
    250a:	4a14      	ldr	r2, [pc, #80]	; (255c <__sinit+0x64>)
    250c:	681b      	ldr	r3, [r3, #0]
    250e:	6282      	str	r2, [r0, #40]	; 0x28
    2510:	9301      	str	r3, [sp, #4]
    2512:	4298      	cmp	r0, r3
    2514:	d101      	bne.n	251a <__sinit+0x22>
    2516:	2301      	movs	r3, #1
    2518:	6183      	str	r3, [r0, #24]
    251a:	0020      	movs	r0, r4
    251c:	f000 f820 	bl	2560 <__sfp>
    2520:	6060      	str	r0, [r4, #4]
    2522:	0020      	movs	r0, r4
    2524:	f000 f81c 	bl	2560 <__sfp>
    2528:	60a0      	str	r0, [r4, #8]
    252a:	0020      	movs	r0, r4
    252c:	f000 f818 	bl	2560 <__sfp>
    2530:	2200      	movs	r2, #0
    2532:	60e0      	str	r0, [r4, #12]
    2534:	2104      	movs	r1, #4
    2536:	6860      	ldr	r0, [r4, #4]
    2538:	f7ff ffa4 	bl	2484 <std.isra.0>
    253c:	2201      	movs	r2, #1
    253e:	2109      	movs	r1, #9
    2540:	68a0      	ldr	r0, [r4, #8]
    2542:	f7ff ff9f 	bl	2484 <std.isra.0>
    2546:	2202      	movs	r2, #2
    2548:	2112      	movs	r1, #18
    254a:	68e0      	ldr	r0, [r4, #12]
    254c:	f7ff ff9a 	bl	2484 <std.isra.0>
    2550:	2301      	movs	r3, #1
    2552:	61a3      	str	r3, [r4, #24]
    2554:	bd13      	pop	{r0, r1, r4, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	000031b0 	.word	0x000031b0
    255c:	00002475 	.word	0x00002475

00002560 <__sfp>:
    2560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2562:	4b1e      	ldr	r3, [pc, #120]	; (25dc <__sfp+0x7c>)
    2564:	0007      	movs	r7, r0
    2566:	681e      	ldr	r6, [r3, #0]
    2568:	69b3      	ldr	r3, [r6, #24]
    256a:	2b00      	cmp	r3, #0
    256c:	d102      	bne.n	2574 <__sfp+0x14>
    256e:	0030      	movs	r0, r6
    2570:	f7ff ffc2 	bl	24f8 <__sinit>
    2574:	3648      	adds	r6, #72	; 0x48
    2576:	68b4      	ldr	r4, [r6, #8]
    2578:	6873      	ldr	r3, [r6, #4]
    257a:	3b01      	subs	r3, #1
    257c:	d504      	bpl.n	2588 <__sfp+0x28>
    257e:	6833      	ldr	r3, [r6, #0]
    2580:	2b00      	cmp	r3, #0
    2582:	d007      	beq.n	2594 <__sfp+0x34>
    2584:	6836      	ldr	r6, [r6, #0]
    2586:	e7f6      	b.n	2576 <__sfp+0x16>
    2588:	220c      	movs	r2, #12
    258a:	5ea5      	ldrsh	r5, [r4, r2]
    258c:	2d00      	cmp	r5, #0
    258e:	d00d      	beq.n	25ac <__sfp+0x4c>
    2590:	3468      	adds	r4, #104	; 0x68
    2592:	e7f2      	b.n	257a <__sfp+0x1a>
    2594:	2104      	movs	r1, #4
    2596:	0038      	movs	r0, r7
    2598:	f7ff ff98 	bl	24cc <__sfmoreglue>
    259c:	6030      	str	r0, [r6, #0]
    259e:	2800      	cmp	r0, #0
    25a0:	d1f0      	bne.n	2584 <__sfp+0x24>
    25a2:	230c      	movs	r3, #12
    25a4:	0004      	movs	r4, r0
    25a6:	603b      	str	r3, [r7, #0]
    25a8:	0020      	movs	r0, r4
    25aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25ac:	2301      	movs	r3, #1
    25ae:	0020      	movs	r0, r4
    25b0:	425b      	negs	r3, r3
    25b2:	81e3      	strh	r3, [r4, #14]
    25b4:	3302      	adds	r3, #2
    25b6:	81a3      	strh	r3, [r4, #12]
    25b8:	6665      	str	r5, [r4, #100]	; 0x64
    25ba:	6025      	str	r5, [r4, #0]
    25bc:	60a5      	str	r5, [r4, #8]
    25be:	6065      	str	r5, [r4, #4]
    25c0:	6125      	str	r5, [r4, #16]
    25c2:	6165      	str	r5, [r4, #20]
    25c4:	61a5      	str	r5, [r4, #24]
    25c6:	2208      	movs	r2, #8
    25c8:	0029      	movs	r1, r5
    25ca:	305c      	adds	r0, #92	; 0x5c
    25cc:	f7ff fdc4 	bl	2158 <memset>
    25d0:	6365      	str	r5, [r4, #52]	; 0x34
    25d2:	63a5      	str	r5, [r4, #56]	; 0x38
    25d4:	64a5      	str	r5, [r4, #72]	; 0x48
    25d6:	64e5      	str	r5, [r4, #76]	; 0x4c
    25d8:	e7e6      	b.n	25a8 <__sfp+0x48>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	000031b0 	.word	0x000031b0

000025e0 <_fwalk_reent>:
    25e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25e2:	0004      	movs	r4, r0
    25e4:	0007      	movs	r7, r0
    25e6:	2600      	movs	r6, #0
    25e8:	9101      	str	r1, [sp, #4]
    25ea:	3448      	adds	r4, #72	; 0x48
    25ec:	2c00      	cmp	r4, #0
    25ee:	d101      	bne.n	25f4 <_fwalk_reent+0x14>
    25f0:	0030      	movs	r0, r6
    25f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    25f4:	6863      	ldr	r3, [r4, #4]
    25f6:	68a5      	ldr	r5, [r4, #8]
    25f8:	9300      	str	r3, [sp, #0]
    25fa:	9b00      	ldr	r3, [sp, #0]
    25fc:	3b01      	subs	r3, #1
    25fe:	9300      	str	r3, [sp, #0]
    2600:	d501      	bpl.n	2606 <_fwalk_reent+0x26>
    2602:	6824      	ldr	r4, [r4, #0]
    2604:	e7f2      	b.n	25ec <_fwalk_reent+0xc>
    2606:	89ab      	ldrh	r3, [r5, #12]
    2608:	2b01      	cmp	r3, #1
    260a:	d908      	bls.n	261e <_fwalk_reent+0x3e>
    260c:	220e      	movs	r2, #14
    260e:	5eab      	ldrsh	r3, [r5, r2]
    2610:	3301      	adds	r3, #1
    2612:	d004      	beq.n	261e <_fwalk_reent+0x3e>
    2614:	0029      	movs	r1, r5
    2616:	0038      	movs	r0, r7
    2618:	9b01      	ldr	r3, [sp, #4]
    261a:	4798      	blx	r3
    261c:	4306      	orrs	r6, r0
    261e:	3568      	adds	r5, #104	; 0x68
    2620:	e7eb      	b.n	25fa <_fwalk_reent+0x1a>
	...

00002624 <__swhatbuf_r>:
    2624:	b570      	push	{r4, r5, r6, lr}
    2626:	000e      	movs	r6, r1
    2628:	001d      	movs	r5, r3
    262a:	230e      	movs	r3, #14
    262c:	5ec9      	ldrsh	r1, [r1, r3]
    262e:	b090      	sub	sp, #64	; 0x40
    2630:	0014      	movs	r4, r2
    2632:	2900      	cmp	r1, #0
    2634:	da07      	bge.n	2646 <__swhatbuf_r+0x22>
    2636:	2300      	movs	r3, #0
    2638:	602b      	str	r3, [r5, #0]
    263a:	89b3      	ldrh	r3, [r6, #12]
    263c:	061b      	lsls	r3, r3, #24
    263e:	d411      	bmi.n	2664 <__swhatbuf_r+0x40>
    2640:	2380      	movs	r3, #128	; 0x80
    2642:	00db      	lsls	r3, r3, #3
    2644:	e00f      	b.n	2666 <__swhatbuf_r+0x42>
    2646:	aa01      	add	r2, sp, #4
    2648:	f000 fd20 	bl	308c <_fstat_r>
    264c:	2800      	cmp	r0, #0
    264e:	dbf2      	blt.n	2636 <__swhatbuf_r+0x12>
    2650:	22f0      	movs	r2, #240	; 0xf0
    2652:	9b02      	ldr	r3, [sp, #8]
    2654:	0212      	lsls	r2, r2, #8
    2656:	4013      	ands	r3, r2
    2658:	4a05      	ldr	r2, [pc, #20]	; (2670 <__swhatbuf_r+0x4c>)
    265a:	189b      	adds	r3, r3, r2
    265c:	425a      	negs	r2, r3
    265e:	4153      	adcs	r3, r2
    2660:	602b      	str	r3, [r5, #0]
    2662:	e7ed      	b.n	2640 <__swhatbuf_r+0x1c>
    2664:	2340      	movs	r3, #64	; 0x40
    2666:	2000      	movs	r0, #0
    2668:	6023      	str	r3, [r4, #0]
    266a:	b010      	add	sp, #64	; 0x40
    266c:	bd70      	pop	{r4, r5, r6, pc}
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	ffffe000 	.word	0xffffe000

00002674 <__smakebuf_r>:
    2674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2676:	2602      	movs	r6, #2
    2678:	898b      	ldrh	r3, [r1, #12]
    267a:	0005      	movs	r5, r0
    267c:	000c      	movs	r4, r1
    267e:	4233      	tst	r3, r6
    2680:	d006      	beq.n	2690 <__smakebuf_r+0x1c>
    2682:	0023      	movs	r3, r4
    2684:	3347      	adds	r3, #71	; 0x47
    2686:	6023      	str	r3, [r4, #0]
    2688:	6123      	str	r3, [r4, #16]
    268a:	2301      	movs	r3, #1
    268c:	6163      	str	r3, [r4, #20]
    268e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2690:	ab01      	add	r3, sp, #4
    2692:	466a      	mov	r2, sp
    2694:	f7ff ffc6 	bl	2624 <__swhatbuf_r>
    2698:	9900      	ldr	r1, [sp, #0]
    269a:	0007      	movs	r7, r0
    269c:	0028      	movs	r0, r5
    269e:	f000 f87b 	bl	2798 <_malloc_r>
    26a2:	2800      	cmp	r0, #0
    26a4:	d106      	bne.n	26b4 <__smakebuf_r+0x40>
    26a6:	220c      	movs	r2, #12
    26a8:	5ea3      	ldrsh	r3, [r4, r2]
    26aa:	059a      	lsls	r2, r3, #22
    26ac:	d4ef      	bmi.n	268e <__smakebuf_r+0x1a>
    26ae:	431e      	orrs	r6, r3
    26b0:	81a6      	strh	r6, [r4, #12]
    26b2:	e7e6      	b.n	2682 <__smakebuf_r+0xe>
    26b4:	4b0d      	ldr	r3, [pc, #52]	; (26ec <__smakebuf_r+0x78>)
    26b6:	62ab      	str	r3, [r5, #40]	; 0x28
    26b8:	2380      	movs	r3, #128	; 0x80
    26ba:	89a2      	ldrh	r2, [r4, #12]
    26bc:	6020      	str	r0, [r4, #0]
    26be:	4313      	orrs	r3, r2
    26c0:	81a3      	strh	r3, [r4, #12]
    26c2:	9b00      	ldr	r3, [sp, #0]
    26c4:	6120      	str	r0, [r4, #16]
    26c6:	6163      	str	r3, [r4, #20]
    26c8:	9b01      	ldr	r3, [sp, #4]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d00a      	beq.n	26e4 <__smakebuf_r+0x70>
    26ce:	230e      	movs	r3, #14
    26d0:	5ee1      	ldrsh	r1, [r4, r3]
    26d2:	0028      	movs	r0, r5
    26d4:	f000 fcec 	bl	30b0 <_isatty_r>
    26d8:	2800      	cmp	r0, #0
    26da:	d003      	beq.n	26e4 <__smakebuf_r+0x70>
    26dc:	2301      	movs	r3, #1
    26de:	89a2      	ldrh	r2, [r4, #12]
    26e0:	4313      	orrs	r3, r2
    26e2:	81a3      	strh	r3, [r4, #12]
    26e4:	89a0      	ldrh	r0, [r4, #12]
    26e6:	4338      	orrs	r0, r7
    26e8:	81a0      	strh	r0, [r4, #12]
    26ea:	e7d0      	b.n	268e <__smakebuf_r+0x1a>
    26ec:	00002475 	.word	0x00002475

000026f0 <malloc>:
    26f0:	b510      	push	{r4, lr}
    26f2:	4b03      	ldr	r3, [pc, #12]	; (2700 <malloc+0x10>)
    26f4:	0001      	movs	r1, r0
    26f6:	6818      	ldr	r0, [r3, #0]
    26f8:	f000 f84e 	bl	2798 <_malloc_r>
    26fc:	bd10      	pop	{r4, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	2000000c 	.word	0x2000000c

00002704 <_free_r>:
    2704:	b570      	push	{r4, r5, r6, lr}
    2706:	0005      	movs	r5, r0
    2708:	2900      	cmp	r1, #0
    270a:	d010      	beq.n	272e <_free_r+0x2a>
    270c:	1f0c      	subs	r4, r1, #4
    270e:	6823      	ldr	r3, [r4, #0]
    2710:	2b00      	cmp	r3, #0
    2712:	da00      	bge.n	2716 <_free_r+0x12>
    2714:	18e4      	adds	r4, r4, r3
    2716:	0028      	movs	r0, r5
    2718:	f000 fcfb 	bl	3112 <__malloc_lock>
    271c:	4a1d      	ldr	r2, [pc, #116]	; (2794 <_free_r+0x90>)
    271e:	6813      	ldr	r3, [r2, #0]
    2720:	2b00      	cmp	r3, #0
    2722:	d105      	bne.n	2730 <_free_r+0x2c>
    2724:	6063      	str	r3, [r4, #4]
    2726:	6014      	str	r4, [r2, #0]
    2728:	0028      	movs	r0, r5
    272a:	f000 fcf3 	bl	3114 <__malloc_unlock>
    272e:	bd70      	pop	{r4, r5, r6, pc}
    2730:	42a3      	cmp	r3, r4
    2732:	d909      	bls.n	2748 <_free_r+0x44>
    2734:	6821      	ldr	r1, [r4, #0]
    2736:	1860      	adds	r0, r4, r1
    2738:	4283      	cmp	r3, r0
    273a:	d1f3      	bne.n	2724 <_free_r+0x20>
    273c:	6818      	ldr	r0, [r3, #0]
    273e:	685b      	ldr	r3, [r3, #4]
    2740:	1841      	adds	r1, r0, r1
    2742:	6021      	str	r1, [r4, #0]
    2744:	e7ee      	b.n	2724 <_free_r+0x20>
    2746:	0013      	movs	r3, r2
    2748:	685a      	ldr	r2, [r3, #4]
    274a:	2a00      	cmp	r2, #0
    274c:	d001      	beq.n	2752 <_free_r+0x4e>
    274e:	42a2      	cmp	r2, r4
    2750:	d9f9      	bls.n	2746 <_free_r+0x42>
    2752:	6819      	ldr	r1, [r3, #0]
    2754:	1858      	adds	r0, r3, r1
    2756:	42a0      	cmp	r0, r4
    2758:	d10b      	bne.n	2772 <_free_r+0x6e>
    275a:	6820      	ldr	r0, [r4, #0]
    275c:	1809      	adds	r1, r1, r0
    275e:	1858      	adds	r0, r3, r1
    2760:	6019      	str	r1, [r3, #0]
    2762:	4282      	cmp	r2, r0
    2764:	d1e0      	bne.n	2728 <_free_r+0x24>
    2766:	6810      	ldr	r0, [r2, #0]
    2768:	6852      	ldr	r2, [r2, #4]
    276a:	1841      	adds	r1, r0, r1
    276c:	6019      	str	r1, [r3, #0]
    276e:	605a      	str	r2, [r3, #4]
    2770:	e7da      	b.n	2728 <_free_r+0x24>
    2772:	42a0      	cmp	r0, r4
    2774:	d902      	bls.n	277c <_free_r+0x78>
    2776:	230c      	movs	r3, #12
    2778:	602b      	str	r3, [r5, #0]
    277a:	e7d5      	b.n	2728 <_free_r+0x24>
    277c:	6821      	ldr	r1, [r4, #0]
    277e:	1860      	adds	r0, r4, r1
    2780:	4282      	cmp	r2, r0
    2782:	d103      	bne.n	278c <_free_r+0x88>
    2784:	6810      	ldr	r0, [r2, #0]
    2786:	6852      	ldr	r2, [r2, #4]
    2788:	1841      	adds	r1, r0, r1
    278a:	6021      	str	r1, [r4, #0]
    278c:	6062      	str	r2, [r4, #4]
    278e:	605c      	str	r4, [r3, #4]
    2790:	e7ca      	b.n	2728 <_free_r+0x24>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	200000d0 	.word	0x200000d0

00002798 <_malloc_r>:
    2798:	2303      	movs	r3, #3
    279a:	b570      	push	{r4, r5, r6, lr}
    279c:	1ccd      	adds	r5, r1, #3
    279e:	439d      	bics	r5, r3
    27a0:	3508      	adds	r5, #8
    27a2:	0006      	movs	r6, r0
    27a4:	2d0c      	cmp	r5, #12
    27a6:	d21e      	bcs.n	27e6 <_malloc_r+0x4e>
    27a8:	250c      	movs	r5, #12
    27aa:	42a9      	cmp	r1, r5
    27ac:	d81d      	bhi.n	27ea <_malloc_r+0x52>
    27ae:	0030      	movs	r0, r6
    27b0:	f000 fcaf 	bl	3112 <__malloc_lock>
    27b4:	4a25      	ldr	r2, [pc, #148]	; (284c <_malloc_r+0xb4>)
    27b6:	6814      	ldr	r4, [r2, #0]
    27b8:	0021      	movs	r1, r4
    27ba:	2900      	cmp	r1, #0
    27bc:	d119      	bne.n	27f2 <_malloc_r+0x5a>
    27be:	4c24      	ldr	r4, [pc, #144]	; (2850 <_malloc_r+0xb8>)
    27c0:	6823      	ldr	r3, [r4, #0]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d103      	bne.n	27ce <_malloc_r+0x36>
    27c6:	0030      	movs	r0, r6
    27c8:	f000 fb10 	bl	2dec <_sbrk_r>
    27cc:	6020      	str	r0, [r4, #0]
    27ce:	0029      	movs	r1, r5
    27d0:	0030      	movs	r0, r6
    27d2:	f000 fb0b 	bl	2dec <_sbrk_r>
    27d6:	1c43      	adds	r3, r0, #1
    27d8:	d12c      	bne.n	2834 <_malloc_r+0x9c>
    27da:	230c      	movs	r3, #12
    27dc:	0030      	movs	r0, r6
    27de:	6033      	str	r3, [r6, #0]
    27e0:	f000 fc98 	bl	3114 <__malloc_unlock>
    27e4:	e003      	b.n	27ee <_malloc_r+0x56>
    27e6:	2d00      	cmp	r5, #0
    27e8:	dadf      	bge.n	27aa <_malloc_r+0x12>
    27ea:	230c      	movs	r3, #12
    27ec:	6033      	str	r3, [r6, #0]
    27ee:	2000      	movs	r0, #0
    27f0:	bd70      	pop	{r4, r5, r6, pc}
    27f2:	680b      	ldr	r3, [r1, #0]
    27f4:	1b5b      	subs	r3, r3, r5
    27f6:	d41a      	bmi.n	282e <_malloc_r+0x96>
    27f8:	2b0b      	cmp	r3, #11
    27fa:	d903      	bls.n	2804 <_malloc_r+0x6c>
    27fc:	600b      	str	r3, [r1, #0]
    27fe:	18cc      	adds	r4, r1, r3
    2800:	6025      	str	r5, [r4, #0]
    2802:	e003      	b.n	280c <_malloc_r+0x74>
    2804:	428c      	cmp	r4, r1
    2806:	d10e      	bne.n	2826 <_malloc_r+0x8e>
    2808:	6863      	ldr	r3, [r4, #4]
    280a:	6013      	str	r3, [r2, #0]
    280c:	0030      	movs	r0, r6
    280e:	f000 fc81 	bl	3114 <__malloc_unlock>
    2812:	0020      	movs	r0, r4
    2814:	2207      	movs	r2, #7
    2816:	300b      	adds	r0, #11
    2818:	1d23      	adds	r3, r4, #4
    281a:	4390      	bics	r0, r2
    281c:	1ac3      	subs	r3, r0, r3
    281e:	d0e7      	beq.n	27f0 <_malloc_r+0x58>
    2820:	425a      	negs	r2, r3
    2822:	50e2      	str	r2, [r4, r3]
    2824:	e7e4      	b.n	27f0 <_malloc_r+0x58>
    2826:	684b      	ldr	r3, [r1, #4]
    2828:	6063      	str	r3, [r4, #4]
    282a:	000c      	movs	r4, r1
    282c:	e7ee      	b.n	280c <_malloc_r+0x74>
    282e:	000c      	movs	r4, r1
    2830:	6849      	ldr	r1, [r1, #4]
    2832:	e7c2      	b.n	27ba <_malloc_r+0x22>
    2834:	2303      	movs	r3, #3
    2836:	1cc4      	adds	r4, r0, #3
    2838:	439c      	bics	r4, r3
    283a:	42a0      	cmp	r0, r4
    283c:	d0e0      	beq.n	2800 <_malloc_r+0x68>
    283e:	1a21      	subs	r1, r4, r0
    2840:	0030      	movs	r0, r6
    2842:	f000 fad3 	bl	2dec <_sbrk_r>
    2846:	1c43      	adds	r3, r0, #1
    2848:	d1da      	bne.n	2800 <_malloc_r+0x68>
    284a:	e7c6      	b.n	27da <_malloc_r+0x42>
    284c:	200000d0 	.word	0x200000d0
    2850:	200000d4 	.word	0x200000d4

00002854 <__sfputc_r>:
    2854:	6893      	ldr	r3, [r2, #8]
    2856:	b510      	push	{r4, lr}
    2858:	3b01      	subs	r3, #1
    285a:	6093      	str	r3, [r2, #8]
    285c:	2b00      	cmp	r3, #0
    285e:	da05      	bge.n	286c <__sfputc_r+0x18>
    2860:	6994      	ldr	r4, [r2, #24]
    2862:	42a3      	cmp	r3, r4
    2864:	db08      	blt.n	2878 <__sfputc_r+0x24>
    2866:	b2cb      	uxtb	r3, r1
    2868:	2b0a      	cmp	r3, #10
    286a:	d005      	beq.n	2878 <__sfputc_r+0x24>
    286c:	6813      	ldr	r3, [r2, #0]
    286e:	1c58      	adds	r0, r3, #1
    2870:	6010      	str	r0, [r2, #0]
    2872:	7019      	strb	r1, [r3, #0]
    2874:	b2c8      	uxtb	r0, r1
    2876:	bd10      	pop	{r4, pc}
    2878:	f000 fb16 	bl	2ea8 <__swbuf_r>
    287c:	e7fb      	b.n	2876 <__sfputc_r+0x22>

0000287e <__sfputs_r>:
    287e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2880:	0006      	movs	r6, r0
    2882:	000f      	movs	r7, r1
    2884:	0014      	movs	r4, r2
    2886:	18d5      	adds	r5, r2, r3
    2888:	42ac      	cmp	r4, r5
    288a:	d101      	bne.n	2890 <__sfputs_r+0x12>
    288c:	2000      	movs	r0, #0
    288e:	e007      	b.n	28a0 <__sfputs_r+0x22>
    2890:	7821      	ldrb	r1, [r4, #0]
    2892:	003a      	movs	r2, r7
    2894:	0030      	movs	r0, r6
    2896:	f7ff ffdd 	bl	2854 <__sfputc_r>
    289a:	3401      	adds	r4, #1
    289c:	1c43      	adds	r3, r0, #1
    289e:	d1f3      	bne.n	2888 <__sfputs_r+0xa>
    28a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000028a4 <_vfiprintf_r>:
    28a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28a6:	b09f      	sub	sp, #124	; 0x7c
    28a8:	0006      	movs	r6, r0
    28aa:	000f      	movs	r7, r1
    28ac:	0014      	movs	r4, r2
    28ae:	9305      	str	r3, [sp, #20]
    28b0:	2800      	cmp	r0, #0
    28b2:	d004      	beq.n	28be <_vfiprintf_r+0x1a>
    28b4:	6983      	ldr	r3, [r0, #24]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d101      	bne.n	28be <_vfiprintf_r+0x1a>
    28ba:	f7ff fe1d 	bl	24f8 <__sinit>
    28be:	4b7f      	ldr	r3, [pc, #508]	; (2abc <_vfiprintf_r+0x218>)
    28c0:	429f      	cmp	r7, r3
    28c2:	d15c      	bne.n	297e <_vfiprintf_r+0xda>
    28c4:	6877      	ldr	r7, [r6, #4]
    28c6:	89bb      	ldrh	r3, [r7, #12]
    28c8:	071b      	lsls	r3, r3, #28
    28ca:	d562      	bpl.n	2992 <_vfiprintf_r+0xee>
    28cc:	693b      	ldr	r3, [r7, #16]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d05f      	beq.n	2992 <_vfiprintf_r+0xee>
    28d2:	2300      	movs	r3, #0
    28d4:	ad06      	add	r5, sp, #24
    28d6:	616b      	str	r3, [r5, #20]
    28d8:	3320      	adds	r3, #32
    28da:	766b      	strb	r3, [r5, #25]
    28dc:	3310      	adds	r3, #16
    28de:	76ab      	strb	r3, [r5, #26]
    28e0:	9402      	str	r4, [sp, #8]
    28e2:	9c02      	ldr	r4, [sp, #8]
    28e4:	7823      	ldrb	r3, [r4, #0]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d15d      	bne.n	29a6 <_vfiprintf_r+0x102>
    28ea:	9b02      	ldr	r3, [sp, #8]
    28ec:	1ae3      	subs	r3, r4, r3
    28ee:	9304      	str	r3, [sp, #16]
    28f0:	d00d      	beq.n	290e <_vfiprintf_r+0x6a>
    28f2:	9b04      	ldr	r3, [sp, #16]
    28f4:	9a02      	ldr	r2, [sp, #8]
    28f6:	0039      	movs	r1, r7
    28f8:	0030      	movs	r0, r6
    28fa:	f7ff ffc0 	bl	287e <__sfputs_r>
    28fe:	1c43      	adds	r3, r0, #1
    2900:	d100      	bne.n	2904 <_vfiprintf_r+0x60>
    2902:	e0cc      	b.n	2a9e <_vfiprintf_r+0x1fa>
    2904:	696a      	ldr	r2, [r5, #20]
    2906:	9b04      	ldr	r3, [sp, #16]
    2908:	4694      	mov	ip, r2
    290a:	4463      	add	r3, ip
    290c:	616b      	str	r3, [r5, #20]
    290e:	7823      	ldrb	r3, [r4, #0]
    2910:	2b00      	cmp	r3, #0
    2912:	d100      	bne.n	2916 <_vfiprintf_r+0x72>
    2914:	e0c3      	b.n	2a9e <_vfiprintf_r+0x1fa>
    2916:	2201      	movs	r2, #1
    2918:	2300      	movs	r3, #0
    291a:	4252      	negs	r2, r2
    291c:	606a      	str	r2, [r5, #4]
    291e:	a902      	add	r1, sp, #8
    2920:	3254      	adds	r2, #84	; 0x54
    2922:	1852      	adds	r2, r2, r1
    2924:	3401      	adds	r4, #1
    2926:	602b      	str	r3, [r5, #0]
    2928:	60eb      	str	r3, [r5, #12]
    292a:	60ab      	str	r3, [r5, #8]
    292c:	7013      	strb	r3, [r2, #0]
    292e:	65ab      	str	r3, [r5, #88]	; 0x58
    2930:	7821      	ldrb	r1, [r4, #0]
    2932:	2205      	movs	r2, #5
    2934:	4862      	ldr	r0, [pc, #392]	; (2ac0 <_vfiprintf_r+0x21c>)
    2936:	f000 fbe1 	bl	30fc <memchr>
    293a:	1c63      	adds	r3, r4, #1
    293c:	469c      	mov	ip, r3
    293e:	2800      	cmp	r0, #0
    2940:	d135      	bne.n	29ae <_vfiprintf_r+0x10a>
    2942:	6829      	ldr	r1, [r5, #0]
    2944:	06cb      	lsls	r3, r1, #27
    2946:	d504      	bpl.n	2952 <_vfiprintf_r+0xae>
    2948:	2353      	movs	r3, #83	; 0x53
    294a:	aa02      	add	r2, sp, #8
    294c:	3020      	adds	r0, #32
    294e:	189b      	adds	r3, r3, r2
    2950:	7018      	strb	r0, [r3, #0]
    2952:	070b      	lsls	r3, r1, #28
    2954:	d504      	bpl.n	2960 <_vfiprintf_r+0xbc>
    2956:	2353      	movs	r3, #83	; 0x53
    2958:	202b      	movs	r0, #43	; 0x2b
    295a:	aa02      	add	r2, sp, #8
    295c:	189b      	adds	r3, r3, r2
    295e:	7018      	strb	r0, [r3, #0]
    2960:	7823      	ldrb	r3, [r4, #0]
    2962:	2b2a      	cmp	r3, #42	; 0x2a
    2964:	d02c      	beq.n	29c0 <_vfiprintf_r+0x11c>
    2966:	2000      	movs	r0, #0
    2968:	210a      	movs	r1, #10
    296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    296c:	7822      	ldrb	r2, [r4, #0]
    296e:	3a30      	subs	r2, #48	; 0x30
    2970:	2a09      	cmp	r2, #9
    2972:	d800      	bhi.n	2976 <_vfiprintf_r+0xd2>
    2974:	e06b      	b.n	2a4e <_vfiprintf_r+0x1aa>
    2976:	2800      	cmp	r0, #0
    2978:	d02a      	beq.n	29d0 <_vfiprintf_r+0x12c>
    297a:	9309      	str	r3, [sp, #36]	; 0x24
    297c:	e028      	b.n	29d0 <_vfiprintf_r+0x12c>
    297e:	4b51      	ldr	r3, [pc, #324]	; (2ac4 <_vfiprintf_r+0x220>)
    2980:	429f      	cmp	r7, r3
    2982:	d101      	bne.n	2988 <_vfiprintf_r+0xe4>
    2984:	68b7      	ldr	r7, [r6, #8]
    2986:	e79e      	b.n	28c6 <_vfiprintf_r+0x22>
    2988:	4b4f      	ldr	r3, [pc, #316]	; (2ac8 <_vfiprintf_r+0x224>)
    298a:	429f      	cmp	r7, r3
    298c:	d19b      	bne.n	28c6 <_vfiprintf_r+0x22>
    298e:	68f7      	ldr	r7, [r6, #12]
    2990:	e799      	b.n	28c6 <_vfiprintf_r+0x22>
    2992:	0039      	movs	r1, r7
    2994:	0030      	movs	r0, r6
    2996:	f000 faf1 	bl	2f7c <__swsetup_r>
    299a:	2800      	cmp	r0, #0
    299c:	d099      	beq.n	28d2 <_vfiprintf_r+0x2e>
    299e:	2001      	movs	r0, #1
    29a0:	4240      	negs	r0, r0
    29a2:	b01f      	add	sp, #124	; 0x7c
    29a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29a6:	2b25      	cmp	r3, #37	; 0x25
    29a8:	d09f      	beq.n	28ea <_vfiprintf_r+0x46>
    29aa:	3401      	adds	r4, #1
    29ac:	e79a      	b.n	28e4 <_vfiprintf_r+0x40>
    29ae:	4b44      	ldr	r3, [pc, #272]	; (2ac0 <_vfiprintf_r+0x21c>)
    29b0:	6829      	ldr	r1, [r5, #0]
    29b2:	1ac0      	subs	r0, r0, r3
    29b4:	2301      	movs	r3, #1
    29b6:	4083      	lsls	r3, r0
    29b8:	430b      	orrs	r3, r1
    29ba:	602b      	str	r3, [r5, #0]
    29bc:	4664      	mov	r4, ip
    29be:	e7b7      	b.n	2930 <_vfiprintf_r+0x8c>
    29c0:	9b05      	ldr	r3, [sp, #20]
    29c2:	1d18      	adds	r0, r3, #4
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	9005      	str	r0, [sp, #20]
    29c8:	2b00      	cmp	r3, #0
    29ca:	db3a      	blt.n	2a42 <_vfiprintf_r+0x19e>
    29cc:	9309      	str	r3, [sp, #36]	; 0x24
    29ce:	4664      	mov	r4, ip
    29d0:	7823      	ldrb	r3, [r4, #0]
    29d2:	2b2e      	cmp	r3, #46	; 0x2e
    29d4:	d10b      	bne.n	29ee <_vfiprintf_r+0x14a>
    29d6:	7863      	ldrb	r3, [r4, #1]
    29d8:	1c62      	adds	r2, r4, #1
    29da:	2b2a      	cmp	r3, #42	; 0x2a
    29dc:	d13f      	bne.n	2a5e <_vfiprintf_r+0x1ba>
    29de:	9b05      	ldr	r3, [sp, #20]
    29e0:	3402      	adds	r4, #2
    29e2:	1d1a      	adds	r2, r3, #4
    29e4:	681b      	ldr	r3, [r3, #0]
    29e6:	9205      	str	r2, [sp, #20]
    29e8:	2b00      	cmp	r3, #0
    29ea:	db35      	blt.n	2a58 <_vfiprintf_r+0x1b4>
    29ec:	9307      	str	r3, [sp, #28]
    29ee:	7821      	ldrb	r1, [r4, #0]
    29f0:	2203      	movs	r2, #3
    29f2:	4836      	ldr	r0, [pc, #216]	; (2acc <_vfiprintf_r+0x228>)
    29f4:	f000 fb82 	bl	30fc <memchr>
    29f8:	2800      	cmp	r0, #0
    29fa:	d007      	beq.n	2a0c <_vfiprintf_r+0x168>
    29fc:	4b33      	ldr	r3, [pc, #204]	; (2acc <_vfiprintf_r+0x228>)
    29fe:	682a      	ldr	r2, [r5, #0]
    2a00:	1ac0      	subs	r0, r0, r3
    2a02:	2340      	movs	r3, #64	; 0x40
    2a04:	4083      	lsls	r3, r0
    2a06:	4313      	orrs	r3, r2
    2a08:	602b      	str	r3, [r5, #0]
    2a0a:	3401      	adds	r4, #1
    2a0c:	7821      	ldrb	r1, [r4, #0]
    2a0e:	1c63      	adds	r3, r4, #1
    2a10:	2206      	movs	r2, #6
    2a12:	482f      	ldr	r0, [pc, #188]	; (2ad0 <_vfiprintf_r+0x22c>)
    2a14:	9302      	str	r3, [sp, #8]
    2a16:	7629      	strb	r1, [r5, #24]
    2a18:	f000 fb70 	bl	30fc <memchr>
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d044      	beq.n	2aaa <_vfiprintf_r+0x206>
    2a20:	4b2c      	ldr	r3, [pc, #176]	; (2ad4 <_vfiprintf_r+0x230>)
    2a22:	2b00      	cmp	r3, #0
    2a24:	d12f      	bne.n	2a86 <_vfiprintf_r+0x1e2>
    2a26:	6829      	ldr	r1, [r5, #0]
    2a28:	9b05      	ldr	r3, [sp, #20]
    2a2a:	2207      	movs	r2, #7
    2a2c:	05c9      	lsls	r1, r1, #23
    2a2e:	d528      	bpl.n	2a82 <_vfiprintf_r+0x1de>
    2a30:	189b      	adds	r3, r3, r2
    2a32:	4393      	bics	r3, r2
    2a34:	3308      	adds	r3, #8
    2a36:	9305      	str	r3, [sp, #20]
    2a38:	696b      	ldr	r3, [r5, #20]
    2a3a:	9a03      	ldr	r2, [sp, #12]
    2a3c:	189b      	adds	r3, r3, r2
    2a3e:	616b      	str	r3, [r5, #20]
    2a40:	e74f      	b.n	28e2 <_vfiprintf_r+0x3e>
    2a42:	425b      	negs	r3, r3
    2a44:	60eb      	str	r3, [r5, #12]
    2a46:	2302      	movs	r3, #2
    2a48:	430b      	orrs	r3, r1
    2a4a:	602b      	str	r3, [r5, #0]
    2a4c:	e7bf      	b.n	29ce <_vfiprintf_r+0x12a>
    2a4e:	434b      	muls	r3, r1
    2a50:	3401      	adds	r4, #1
    2a52:	189b      	adds	r3, r3, r2
    2a54:	2001      	movs	r0, #1
    2a56:	e789      	b.n	296c <_vfiprintf_r+0xc8>
    2a58:	2301      	movs	r3, #1
    2a5a:	425b      	negs	r3, r3
    2a5c:	e7c6      	b.n	29ec <_vfiprintf_r+0x148>
    2a5e:	2300      	movs	r3, #0
    2a60:	0014      	movs	r4, r2
    2a62:	200a      	movs	r0, #10
    2a64:	001a      	movs	r2, r3
    2a66:	606b      	str	r3, [r5, #4]
    2a68:	7821      	ldrb	r1, [r4, #0]
    2a6a:	3930      	subs	r1, #48	; 0x30
    2a6c:	2909      	cmp	r1, #9
    2a6e:	d903      	bls.n	2a78 <_vfiprintf_r+0x1d4>
    2a70:	2b00      	cmp	r3, #0
    2a72:	d0bc      	beq.n	29ee <_vfiprintf_r+0x14a>
    2a74:	9207      	str	r2, [sp, #28]
    2a76:	e7ba      	b.n	29ee <_vfiprintf_r+0x14a>
    2a78:	4342      	muls	r2, r0
    2a7a:	3401      	adds	r4, #1
    2a7c:	1852      	adds	r2, r2, r1
    2a7e:	2301      	movs	r3, #1
    2a80:	e7f2      	b.n	2a68 <_vfiprintf_r+0x1c4>
    2a82:	3307      	adds	r3, #7
    2a84:	e7d5      	b.n	2a32 <_vfiprintf_r+0x18e>
    2a86:	ab05      	add	r3, sp, #20
    2a88:	9300      	str	r3, [sp, #0]
    2a8a:	003a      	movs	r2, r7
    2a8c:	4b12      	ldr	r3, [pc, #72]	; (2ad8 <_vfiprintf_r+0x234>)
    2a8e:	0029      	movs	r1, r5
    2a90:	0030      	movs	r0, r6
    2a92:	e000      	b.n	2a96 <_vfiprintf_r+0x1f2>
    2a94:	bf00      	nop
    2a96:	9003      	str	r0, [sp, #12]
    2a98:	9b03      	ldr	r3, [sp, #12]
    2a9a:	3301      	adds	r3, #1
    2a9c:	d1cc      	bne.n	2a38 <_vfiprintf_r+0x194>
    2a9e:	89bb      	ldrh	r3, [r7, #12]
    2aa0:	065b      	lsls	r3, r3, #25
    2aa2:	d500      	bpl.n	2aa6 <_vfiprintf_r+0x202>
    2aa4:	e77b      	b.n	299e <_vfiprintf_r+0xfa>
    2aa6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2aa8:	e77b      	b.n	29a2 <_vfiprintf_r+0xfe>
    2aaa:	ab05      	add	r3, sp, #20
    2aac:	9300      	str	r3, [sp, #0]
    2aae:	003a      	movs	r2, r7
    2ab0:	4b09      	ldr	r3, [pc, #36]	; (2ad8 <_vfiprintf_r+0x234>)
    2ab2:	0029      	movs	r1, r5
    2ab4:	0030      	movs	r0, r6
    2ab6:	f000 f87f 	bl	2bb8 <_printf_i>
    2aba:	e7ec      	b.n	2a96 <_vfiprintf_r+0x1f2>
    2abc:	000031d4 	.word	0x000031d4
    2ac0:	00003214 	.word	0x00003214
    2ac4:	000031f4 	.word	0x000031f4
    2ac8:	000031b4 	.word	0x000031b4
    2acc:	0000321a 	.word	0x0000321a
    2ad0:	0000321e 	.word	0x0000321e
    2ad4:	00000000 	.word	0x00000000
    2ad8:	0000287f 	.word	0x0000287f

00002adc <_printf_common>:
    2adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ade:	0015      	movs	r5, r2
    2ae0:	9301      	str	r3, [sp, #4]
    2ae2:	688a      	ldr	r2, [r1, #8]
    2ae4:	690b      	ldr	r3, [r1, #16]
    2ae6:	9000      	str	r0, [sp, #0]
    2ae8:	000c      	movs	r4, r1
    2aea:	4293      	cmp	r3, r2
    2aec:	da00      	bge.n	2af0 <_printf_common+0x14>
    2aee:	0013      	movs	r3, r2
    2af0:	0022      	movs	r2, r4
    2af2:	602b      	str	r3, [r5, #0]
    2af4:	3243      	adds	r2, #67	; 0x43
    2af6:	7812      	ldrb	r2, [r2, #0]
    2af8:	2a00      	cmp	r2, #0
    2afa:	d001      	beq.n	2b00 <_printf_common+0x24>
    2afc:	3301      	adds	r3, #1
    2afe:	602b      	str	r3, [r5, #0]
    2b00:	6823      	ldr	r3, [r4, #0]
    2b02:	069b      	lsls	r3, r3, #26
    2b04:	d502      	bpl.n	2b0c <_printf_common+0x30>
    2b06:	682b      	ldr	r3, [r5, #0]
    2b08:	3302      	adds	r3, #2
    2b0a:	602b      	str	r3, [r5, #0]
    2b0c:	2706      	movs	r7, #6
    2b0e:	6823      	ldr	r3, [r4, #0]
    2b10:	401f      	ands	r7, r3
    2b12:	d027      	beq.n	2b64 <_printf_common+0x88>
    2b14:	0023      	movs	r3, r4
    2b16:	3343      	adds	r3, #67	; 0x43
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	1e5a      	subs	r2, r3, #1
    2b1c:	4193      	sbcs	r3, r2
    2b1e:	6822      	ldr	r2, [r4, #0]
    2b20:	0692      	lsls	r2, r2, #26
    2b22:	d430      	bmi.n	2b86 <_printf_common+0xaa>
    2b24:	0022      	movs	r2, r4
    2b26:	9901      	ldr	r1, [sp, #4]
    2b28:	3243      	adds	r2, #67	; 0x43
    2b2a:	9800      	ldr	r0, [sp, #0]
    2b2c:	9e08      	ldr	r6, [sp, #32]
    2b2e:	47b0      	blx	r6
    2b30:	1c43      	adds	r3, r0, #1
    2b32:	d025      	beq.n	2b80 <_printf_common+0xa4>
    2b34:	2306      	movs	r3, #6
    2b36:	6820      	ldr	r0, [r4, #0]
    2b38:	682a      	ldr	r2, [r5, #0]
    2b3a:	68e1      	ldr	r1, [r4, #12]
    2b3c:	4003      	ands	r3, r0
    2b3e:	2500      	movs	r5, #0
    2b40:	2b04      	cmp	r3, #4
    2b42:	d103      	bne.n	2b4c <_printf_common+0x70>
    2b44:	1a8d      	subs	r5, r1, r2
    2b46:	43eb      	mvns	r3, r5
    2b48:	17db      	asrs	r3, r3, #31
    2b4a:	401d      	ands	r5, r3
    2b4c:	68a3      	ldr	r3, [r4, #8]
    2b4e:	6922      	ldr	r2, [r4, #16]
    2b50:	4293      	cmp	r3, r2
    2b52:	dd01      	ble.n	2b58 <_printf_common+0x7c>
    2b54:	1a9b      	subs	r3, r3, r2
    2b56:	18ed      	adds	r5, r5, r3
    2b58:	2700      	movs	r7, #0
    2b5a:	42bd      	cmp	r5, r7
    2b5c:	d120      	bne.n	2ba0 <_printf_common+0xc4>
    2b5e:	2000      	movs	r0, #0
    2b60:	e010      	b.n	2b84 <_printf_common+0xa8>
    2b62:	3701      	adds	r7, #1
    2b64:	68e3      	ldr	r3, [r4, #12]
    2b66:	682a      	ldr	r2, [r5, #0]
    2b68:	1a9b      	subs	r3, r3, r2
    2b6a:	429f      	cmp	r7, r3
    2b6c:	dad2      	bge.n	2b14 <_printf_common+0x38>
    2b6e:	0022      	movs	r2, r4
    2b70:	2301      	movs	r3, #1
    2b72:	3219      	adds	r2, #25
    2b74:	9901      	ldr	r1, [sp, #4]
    2b76:	9800      	ldr	r0, [sp, #0]
    2b78:	9e08      	ldr	r6, [sp, #32]
    2b7a:	47b0      	blx	r6
    2b7c:	1c43      	adds	r3, r0, #1
    2b7e:	d1f0      	bne.n	2b62 <_printf_common+0x86>
    2b80:	2001      	movs	r0, #1
    2b82:	4240      	negs	r0, r0
    2b84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2b86:	2030      	movs	r0, #48	; 0x30
    2b88:	18e1      	adds	r1, r4, r3
    2b8a:	3143      	adds	r1, #67	; 0x43
    2b8c:	7008      	strb	r0, [r1, #0]
    2b8e:	0021      	movs	r1, r4
    2b90:	1c5a      	adds	r2, r3, #1
    2b92:	3145      	adds	r1, #69	; 0x45
    2b94:	7809      	ldrb	r1, [r1, #0]
    2b96:	18a2      	adds	r2, r4, r2
    2b98:	3243      	adds	r2, #67	; 0x43
    2b9a:	3302      	adds	r3, #2
    2b9c:	7011      	strb	r1, [r2, #0]
    2b9e:	e7c1      	b.n	2b24 <_printf_common+0x48>
    2ba0:	0022      	movs	r2, r4
    2ba2:	2301      	movs	r3, #1
    2ba4:	321a      	adds	r2, #26
    2ba6:	9901      	ldr	r1, [sp, #4]
    2ba8:	9800      	ldr	r0, [sp, #0]
    2baa:	9e08      	ldr	r6, [sp, #32]
    2bac:	47b0      	blx	r6
    2bae:	1c43      	adds	r3, r0, #1
    2bb0:	d0e6      	beq.n	2b80 <_printf_common+0xa4>
    2bb2:	3701      	adds	r7, #1
    2bb4:	e7d1      	b.n	2b5a <_printf_common+0x7e>
	...

00002bb8 <_printf_i>:
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	b08b      	sub	sp, #44	; 0x2c
    2bbc:	9206      	str	r2, [sp, #24]
    2bbe:	000a      	movs	r2, r1
    2bc0:	3243      	adds	r2, #67	; 0x43
    2bc2:	9307      	str	r3, [sp, #28]
    2bc4:	9005      	str	r0, [sp, #20]
    2bc6:	9204      	str	r2, [sp, #16]
    2bc8:	7e0a      	ldrb	r2, [r1, #24]
    2bca:	000c      	movs	r4, r1
    2bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2bce:	2a6e      	cmp	r2, #110	; 0x6e
    2bd0:	d100      	bne.n	2bd4 <_printf_i+0x1c>
    2bd2:	e08f      	b.n	2cf4 <_printf_i+0x13c>
    2bd4:	d817      	bhi.n	2c06 <_printf_i+0x4e>
    2bd6:	2a63      	cmp	r2, #99	; 0x63
    2bd8:	d02c      	beq.n	2c34 <_printf_i+0x7c>
    2bda:	d808      	bhi.n	2bee <_printf_i+0x36>
    2bdc:	2a00      	cmp	r2, #0
    2bde:	d100      	bne.n	2be2 <_printf_i+0x2a>
    2be0:	e099      	b.n	2d16 <_printf_i+0x15e>
    2be2:	2a58      	cmp	r2, #88	; 0x58
    2be4:	d054      	beq.n	2c90 <_printf_i+0xd8>
    2be6:	0026      	movs	r6, r4
    2be8:	3642      	adds	r6, #66	; 0x42
    2bea:	7032      	strb	r2, [r6, #0]
    2bec:	e029      	b.n	2c42 <_printf_i+0x8a>
    2bee:	2a64      	cmp	r2, #100	; 0x64
    2bf0:	d001      	beq.n	2bf6 <_printf_i+0x3e>
    2bf2:	2a69      	cmp	r2, #105	; 0x69
    2bf4:	d1f7      	bne.n	2be6 <_printf_i+0x2e>
    2bf6:	6821      	ldr	r1, [r4, #0]
    2bf8:	681a      	ldr	r2, [r3, #0]
    2bfa:	0608      	lsls	r0, r1, #24
    2bfc:	d523      	bpl.n	2c46 <_printf_i+0x8e>
    2bfe:	1d11      	adds	r1, r2, #4
    2c00:	6019      	str	r1, [r3, #0]
    2c02:	6815      	ldr	r5, [r2, #0]
    2c04:	e025      	b.n	2c52 <_printf_i+0x9a>
    2c06:	2a73      	cmp	r2, #115	; 0x73
    2c08:	d100      	bne.n	2c0c <_printf_i+0x54>
    2c0a:	e088      	b.n	2d1e <_printf_i+0x166>
    2c0c:	d808      	bhi.n	2c20 <_printf_i+0x68>
    2c0e:	2a6f      	cmp	r2, #111	; 0x6f
    2c10:	d029      	beq.n	2c66 <_printf_i+0xae>
    2c12:	2a70      	cmp	r2, #112	; 0x70
    2c14:	d1e7      	bne.n	2be6 <_printf_i+0x2e>
    2c16:	2220      	movs	r2, #32
    2c18:	6809      	ldr	r1, [r1, #0]
    2c1a:	430a      	orrs	r2, r1
    2c1c:	6022      	str	r2, [r4, #0]
    2c1e:	e003      	b.n	2c28 <_printf_i+0x70>
    2c20:	2a75      	cmp	r2, #117	; 0x75
    2c22:	d020      	beq.n	2c66 <_printf_i+0xae>
    2c24:	2a78      	cmp	r2, #120	; 0x78
    2c26:	d1de      	bne.n	2be6 <_printf_i+0x2e>
    2c28:	0022      	movs	r2, r4
    2c2a:	2178      	movs	r1, #120	; 0x78
    2c2c:	3245      	adds	r2, #69	; 0x45
    2c2e:	7011      	strb	r1, [r2, #0]
    2c30:	4a6c      	ldr	r2, [pc, #432]	; (2de4 <_printf_i+0x22c>)
    2c32:	e030      	b.n	2c96 <_printf_i+0xde>
    2c34:	000e      	movs	r6, r1
    2c36:	681a      	ldr	r2, [r3, #0]
    2c38:	3642      	adds	r6, #66	; 0x42
    2c3a:	1d11      	adds	r1, r2, #4
    2c3c:	6019      	str	r1, [r3, #0]
    2c3e:	6813      	ldr	r3, [r2, #0]
    2c40:	7033      	strb	r3, [r6, #0]
    2c42:	2301      	movs	r3, #1
    2c44:	e079      	b.n	2d3a <_printf_i+0x182>
    2c46:	0649      	lsls	r1, r1, #25
    2c48:	d5d9      	bpl.n	2bfe <_printf_i+0x46>
    2c4a:	1d11      	adds	r1, r2, #4
    2c4c:	6019      	str	r1, [r3, #0]
    2c4e:	2300      	movs	r3, #0
    2c50:	5ed5      	ldrsh	r5, [r2, r3]
    2c52:	2d00      	cmp	r5, #0
    2c54:	da03      	bge.n	2c5e <_printf_i+0xa6>
    2c56:	232d      	movs	r3, #45	; 0x2d
    2c58:	9a04      	ldr	r2, [sp, #16]
    2c5a:	426d      	negs	r5, r5
    2c5c:	7013      	strb	r3, [r2, #0]
    2c5e:	4b62      	ldr	r3, [pc, #392]	; (2de8 <_printf_i+0x230>)
    2c60:	270a      	movs	r7, #10
    2c62:	9303      	str	r3, [sp, #12]
    2c64:	e02f      	b.n	2cc6 <_printf_i+0x10e>
    2c66:	6820      	ldr	r0, [r4, #0]
    2c68:	6819      	ldr	r1, [r3, #0]
    2c6a:	0605      	lsls	r5, r0, #24
    2c6c:	d503      	bpl.n	2c76 <_printf_i+0xbe>
    2c6e:	1d08      	adds	r0, r1, #4
    2c70:	6018      	str	r0, [r3, #0]
    2c72:	680d      	ldr	r5, [r1, #0]
    2c74:	e005      	b.n	2c82 <_printf_i+0xca>
    2c76:	0640      	lsls	r0, r0, #25
    2c78:	d5f9      	bpl.n	2c6e <_printf_i+0xb6>
    2c7a:	680d      	ldr	r5, [r1, #0]
    2c7c:	1d08      	adds	r0, r1, #4
    2c7e:	6018      	str	r0, [r3, #0]
    2c80:	b2ad      	uxth	r5, r5
    2c82:	4b59      	ldr	r3, [pc, #356]	; (2de8 <_printf_i+0x230>)
    2c84:	2708      	movs	r7, #8
    2c86:	9303      	str	r3, [sp, #12]
    2c88:	2a6f      	cmp	r2, #111	; 0x6f
    2c8a:	d018      	beq.n	2cbe <_printf_i+0x106>
    2c8c:	270a      	movs	r7, #10
    2c8e:	e016      	b.n	2cbe <_printf_i+0x106>
    2c90:	3145      	adds	r1, #69	; 0x45
    2c92:	700a      	strb	r2, [r1, #0]
    2c94:	4a54      	ldr	r2, [pc, #336]	; (2de8 <_printf_i+0x230>)
    2c96:	9203      	str	r2, [sp, #12]
    2c98:	681a      	ldr	r2, [r3, #0]
    2c9a:	6821      	ldr	r1, [r4, #0]
    2c9c:	1d10      	adds	r0, r2, #4
    2c9e:	6018      	str	r0, [r3, #0]
    2ca0:	6815      	ldr	r5, [r2, #0]
    2ca2:	0608      	lsls	r0, r1, #24
    2ca4:	d522      	bpl.n	2cec <_printf_i+0x134>
    2ca6:	07cb      	lsls	r3, r1, #31
    2ca8:	d502      	bpl.n	2cb0 <_printf_i+0xf8>
    2caa:	2320      	movs	r3, #32
    2cac:	4319      	orrs	r1, r3
    2cae:	6021      	str	r1, [r4, #0]
    2cb0:	2710      	movs	r7, #16
    2cb2:	2d00      	cmp	r5, #0
    2cb4:	d103      	bne.n	2cbe <_printf_i+0x106>
    2cb6:	2320      	movs	r3, #32
    2cb8:	6822      	ldr	r2, [r4, #0]
    2cba:	439a      	bics	r2, r3
    2cbc:	6022      	str	r2, [r4, #0]
    2cbe:	0023      	movs	r3, r4
    2cc0:	2200      	movs	r2, #0
    2cc2:	3343      	adds	r3, #67	; 0x43
    2cc4:	701a      	strb	r2, [r3, #0]
    2cc6:	6863      	ldr	r3, [r4, #4]
    2cc8:	60a3      	str	r3, [r4, #8]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	db5c      	blt.n	2d88 <_printf_i+0x1d0>
    2cce:	2204      	movs	r2, #4
    2cd0:	6821      	ldr	r1, [r4, #0]
    2cd2:	4391      	bics	r1, r2
    2cd4:	6021      	str	r1, [r4, #0]
    2cd6:	2d00      	cmp	r5, #0
    2cd8:	d158      	bne.n	2d8c <_printf_i+0x1d4>
    2cda:	9e04      	ldr	r6, [sp, #16]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d064      	beq.n	2daa <_printf_i+0x1f2>
    2ce0:	0026      	movs	r6, r4
    2ce2:	9b03      	ldr	r3, [sp, #12]
    2ce4:	3642      	adds	r6, #66	; 0x42
    2ce6:	781b      	ldrb	r3, [r3, #0]
    2ce8:	7033      	strb	r3, [r6, #0]
    2cea:	e05e      	b.n	2daa <_printf_i+0x1f2>
    2cec:	0648      	lsls	r0, r1, #25
    2cee:	d5da      	bpl.n	2ca6 <_printf_i+0xee>
    2cf0:	b2ad      	uxth	r5, r5
    2cf2:	e7d8      	b.n	2ca6 <_printf_i+0xee>
    2cf4:	6809      	ldr	r1, [r1, #0]
    2cf6:	681a      	ldr	r2, [r3, #0]
    2cf8:	0608      	lsls	r0, r1, #24
    2cfa:	d505      	bpl.n	2d08 <_printf_i+0x150>
    2cfc:	1d11      	adds	r1, r2, #4
    2cfe:	6019      	str	r1, [r3, #0]
    2d00:	6813      	ldr	r3, [r2, #0]
    2d02:	6962      	ldr	r2, [r4, #20]
    2d04:	601a      	str	r2, [r3, #0]
    2d06:	e006      	b.n	2d16 <_printf_i+0x15e>
    2d08:	0649      	lsls	r1, r1, #25
    2d0a:	d5f7      	bpl.n	2cfc <_printf_i+0x144>
    2d0c:	1d11      	adds	r1, r2, #4
    2d0e:	6019      	str	r1, [r3, #0]
    2d10:	6813      	ldr	r3, [r2, #0]
    2d12:	8aa2      	ldrh	r2, [r4, #20]
    2d14:	801a      	strh	r2, [r3, #0]
    2d16:	2300      	movs	r3, #0
    2d18:	9e04      	ldr	r6, [sp, #16]
    2d1a:	6123      	str	r3, [r4, #16]
    2d1c:	e054      	b.n	2dc8 <_printf_i+0x210>
    2d1e:	681a      	ldr	r2, [r3, #0]
    2d20:	1d11      	adds	r1, r2, #4
    2d22:	6019      	str	r1, [r3, #0]
    2d24:	6816      	ldr	r6, [r2, #0]
    2d26:	2100      	movs	r1, #0
    2d28:	6862      	ldr	r2, [r4, #4]
    2d2a:	0030      	movs	r0, r6
    2d2c:	f000 f9e6 	bl	30fc <memchr>
    2d30:	2800      	cmp	r0, #0
    2d32:	d001      	beq.n	2d38 <_printf_i+0x180>
    2d34:	1b80      	subs	r0, r0, r6
    2d36:	6060      	str	r0, [r4, #4]
    2d38:	6863      	ldr	r3, [r4, #4]
    2d3a:	6123      	str	r3, [r4, #16]
    2d3c:	2300      	movs	r3, #0
    2d3e:	9a04      	ldr	r2, [sp, #16]
    2d40:	7013      	strb	r3, [r2, #0]
    2d42:	e041      	b.n	2dc8 <_printf_i+0x210>
    2d44:	6923      	ldr	r3, [r4, #16]
    2d46:	0032      	movs	r2, r6
    2d48:	9906      	ldr	r1, [sp, #24]
    2d4a:	9805      	ldr	r0, [sp, #20]
    2d4c:	9d07      	ldr	r5, [sp, #28]
    2d4e:	47a8      	blx	r5
    2d50:	1c43      	adds	r3, r0, #1
    2d52:	d043      	beq.n	2ddc <_printf_i+0x224>
    2d54:	6823      	ldr	r3, [r4, #0]
    2d56:	2500      	movs	r5, #0
    2d58:	079b      	lsls	r3, r3, #30
    2d5a:	d40f      	bmi.n	2d7c <_printf_i+0x1c4>
    2d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d5e:	68e0      	ldr	r0, [r4, #12]
    2d60:	4298      	cmp	r0, r3
    2d62:	da3d      	bge.n	2de0 <_printf_i+0x228>
    2d64:	0018      	movs	r0, r3
    2d66:	e03b      	b.n	2de0 <_printf_i+0x228>
    2d68:	0022      	movs	r2, r4
    2d6a:	2301      	movs	r3, #1
    2d6c:	3219      	adds	r2, #25
    2d6e:	9906      	ldr	r1, [sp, #24]
    2d70:	9805      	ldr	r0, [sp, #20]
    2d72:	9e07      	ldr	r6, [sp, #28]
    2d74:	47b0      	blx	r6
    2d76:	1c43      	adds	r3, r0, #1
    2d78:	d030      	beq.n	2ddc <_printf_i+0x224>
    2d7a:	3501      	adds	r5, #1
    2d7c:	68e3      	ldr	r3, [r4, #12]
    2d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2d80:	1a9b      	subs	r3, r3, r2
    2d82:	429d      	cmp	r5, r3
    2d84:	dbf0      	blt.n	2d68 <_printf_i+0x1b0>
    2d86:	e7e9      	b.n	2d5c <_printf_i+0x1a4>
    2d88:	2d00      	cmp	r5, #0
    2d8a:	d0a9      	beq.n	2ce0 <_printf_i+0x128>
    2d8c:	9e04      	ldr	r6, [sp, #16]
    2d8e:	0028      	movs	r0, r5
    2d90:	0039      	movs	r1, r7
    2d92:	f7ff f8a3 	bl	1edc <__aeabi_uidivmod>
    2d96:	9b03      	ldr	r3, [sp, #12]
    2d98:	3e01      	subs	r6, #1
    2d9a:	5c5b      	ldrb	r3, [r3, r1]
    2d9c:	0028      	movs	r0, r5
    2d9e:	7033      	strb	r3, [r6, #0]
    2da0:	0039      	movs	r1, r7
    2da2:	f7ff f815 	bl	1dd0 <__udivsi3>
    2da6:	1e05      	subs	r5, r0, #0
    2da8:	d1f1      	bne.n	2d8e <_printf_i+0x1d6>
    2daa:	2f08      	cmp	r7, #8
    2dac:	d109      	bne.n	2dc2 <_printf_i+0x20a>
    2dae:	6823      	ldr	r3, [r4, #0]
    2db0:	07db      	lsls	r3, r3, #31
    2db2:	d506      	bpl.n	2dc2 <_printf_i+0x20a>
    2db4:	6863      	ldr	r3, [r4, #4]
    2db6:	6922      	ldr	r2, [r4, #16]
    2db8:	4293      	cmp	r3, r2
    2dba:	dc02      	bgt.n	2dc2 <_printf_i+0x20a>
    2dbc:	2330      	movs	r3, #48	; 0x30
    2dbe:	3e01      	subs	r6, #1
    2dc0:	7033      	strb	r3, [r6, #0]
    2dc2:	9b04      	ldr	r3, [sp, #16]
    2dc4:	1b9b      	subs	r3, r3, r6
    2dc6:	6123      	str	r3, [r4, #16]
    2dc8:	9b07      	ldr	r3, [sp, #28]
    2dca:	aa09      	add	r2, sp, #36	; 0x24
    2dcc:	9300      	str	r3, [sp, #0]
    2dce:	0021      	movs	r1, r4
    2dd0:	9b06      	ldr	r3, [sp, #24]
    2dd2:	9805      	ldr	r0, [sp, #20]
    2dd4:	f7ff fe82 	bl	2adc <_printf_common>
    2dd8:	1c43      	adds	r3, r0, #1
    2dda:	d1b3      	bne.n	2d44 <_printf_i+0x18c>
    2ddc:	2001      	movs	r0, #1
    2dde:	4240      	negs	r0, r0
    2de0:	b00b      	add	sp, #44	; 0x2c
    2de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de4:	00003236 	.word	0x00003236
    2de8:	00003225 	.word	0x00003225

00002dec <_sbrk_r>:
    2dec:	2300      	movs	r3, #0
    2dee:	b570      	push	{r4, r5, r6, lr}
    2df0:	4c06      	ldr	r4, [pc, #24]	; (2e0c <_sbrk_r+0x20>)
    2df2:	0005      	movs	r5, r0
    2df4:	0008      	movs	r0, r1
    2df6:	6023      	str	r3, [r4, #0]
    2df8:	f7fe fe48 	bl	1a8c <_sbrk>
    2dfc:	1c43      	adds	r3, r0, #1
    2dfe:	d103      	bne.n	2e08 <_sbrk_r+0x1c>
    2e00:	6823      	ldr	r3, [r4, #0]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d000      	beq.n	2e08 <_sbrk_r+0x1c>
    2e06:	602b      	str	r3, [r5, #0]
    2e08:	bd70      	pop	{r4, r5, r6, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	20000178 	.word	0x20000178

00002e10 <__sread>:
    2e10:	b570      	push	{r4, r5, r6, lr}
    2e12:	000c      	movs	r4, r1
    2e14:	250e      	movs	r5, #14
    2e16:	5f49      	ldrsh	r1, [r1, r5]
    2e18:	f000 f97e 	bl	3118 <_read_r>
    2e1c:	2800      	cmp	r0, #0
    2e1e:	db03      	blt.n	2e28 <__sread+0x18>
    2e20:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2e22:	181b      	adds	r3, r3, r0
    2e24:	6563      	str	r3, [r4, #84]	; 0x54
    2e26:	bd70      	pop	{r4, r5, r6, pc}
    2e28:	89a3      	ldrh	r3, [r4, #12]
    2e2a:	4a02      	ldr	r2, [pc, #8]	; (2e34 <__sread+0x24>)
    2e2c:	4013      	ands	r3, r2
    2e2e:	81a3      	strh	r3, [r4, #12]
    2e30:	e7f9      	b.n	2e26 <__sread+0x16>
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	ffffefff 	.word	0xffffefff

00002e38 <__swrite>:
    2e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e3a:	001f      	movs	r7, r3
    2e3c:	898b      	ldrh	r3, [r1, #12]
    2e3e:	0005      	movs	r5, r0
    2e40:	000c      	movs	r4, r1
    2e42:	0016      	movs	r6, r2
    2e44:	05db      	lsls	r3, r3, #23
    2e46:	d505      	bpl.n	2e54 <__swrite+0x1c>
    2e48:	230e      	movs	r3, #14
    2e4a:	5ec9      	ldrsh	r1, [r1, r3]
    2e4c:	2200      	movs	r2, #0
    2e4e:	2302      	movs	r3, #2
    2e50:	f000 f940 	bl	30d4 <_lseek_r>
    2e54:	89a3      	ldrh	r3, [r4, #12]
    2e56:	4a05      	ldr	r2, [pc, #20]	; (2e6c <__swrite+0x34>)
    2e58:	0028      	movs	r0, r5
    2e5a:	4013      	ands	r3, r2
    2e5c:	81a3      	strh	r3, [r4, #12]
    2e5e:	0032      	movs	r2, r6
    2e60:	230e      	movs	r3, #14
    2e62:	5ee1      	ldrsh	r1, [r4, r3]
    2e64:	003b      	movs	r3, r7
    2e66:	f000 f875 	bl	2f54 <_write_r>
    2e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e6c:	ffffefff 	.word	0xffffefff

00002e70 <__sseek>:
    2e70:	b570      	push	{r4, r5, r6, lr}
    2e72:	000c      	movs	r4, r1
    2e74:	250e      	movs	r5, #14
    2e76:	5f49      	ldrsh	r1, [r1, r5]
    2e78:	f000 f92c 	bl	30d4 <_lseek_r>
    2e7c:	89a3      	ldrh	r3, [r4, #12]
    2e7e:	1c42      	adds	r2, r0, #1
    2e80:	d103      	bne.n	2e8a <__sseek+0x1a>
    2e82:	4a05      	ldr	r2, [pc, #20]	; (2e98 <__sseek+0x28>)
    2e84:	4013      	ands	r3, r2
    2e86:	81a3      	strh	r3, [r4, #12]
    2e88:	bd70      	pop	{r4, r5, r6, pc}
    2e8a:	2280      	movs	r2, #128	; 0x80
    2e8c:	0152      	lsls	r2, r2, #5
    2e8e:	4313      	orrs	r3, r2
    2e90:	81a3      	strh	r3, [r4, #12]
    2e92:	6560      	str	r0, [r4, #84]	; 0x54
    2e94:	e7f8      	b.n	2e88 <__sseek+0x18>
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	ffffefff 	.word	0xffffefff

00002e9c <__sclose>:
    2e9c:	b510      	push	{r4, lr}
    2e9e:	230e      	movs	r3, #14
    2ea0:	5ec9      	ldrsh	r1, [r1, r3]
    2ea2:	f000 f8e1 	bl	3068 <_close_r>
    2ea6:	bd10      	pop	{r4, pc}

00002ea8 <__swbuf_r>:
    2ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eaa:	0005      	movs	r5, r0
    2eac:	000e      	movs	r6, r1
    2eae:	0014      	movs	r4, r2
    2eb0:	2800      	cmp	r0, #0
    2eb2:	d004      	beq.n	2ebe <__swbuf_r+0x16>
    2eb4:	6983      	ldr	r3, [r0, #24]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d101      	bne.n	2ebe <__swbuf_r+0x16>
    2eba:	f7ff fb1d 	bl	24f8 <__sinit>
    2ebe:	4b22      	ldr	r3, [pc, #136]	; (2f48 <__swbuf_r+0xa0>)
    2ec0:	429c      	cmp	r4, r3
    2ec2:	d12d      	bne.n	2f20 <__swbuf_r+0x78>
    2ec4:	686c      	ldr	r4, [r5, #4]
    2ec6:	69a3      	ldr	r3, [r4, #24]
    2ec8:	60a3      	str	r3, [r4, #8]
    2eca:	89a3      	ldrh	r3, [r4, #12]
    2ecc:	071b      	lsls	r3, r3, #28
    2ece:	d531      	bpl.n	2f34 <__swbuf_r+0x8c>
    2ed0:	6923      	ldr	r3, [r4, #16]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d02e      	beq.n	2f34 <__swbuf_r+0x8c>
    2ed6:	6823      	ldr	r3, [r4, #0]
    2ed8:	6922      	ldr	r2, [r4, #16]
    2eda:	b2f7      	uxtb	r7, r6
    2edc:	1a98      	subs	r0, r3, r2
    2ede:	6963      	ldr	r3, [r4, #20]
    2ee0:	b2f6      	uxtb	r6, r6
    2ee2:	4298      	cmp	r0, r3
    2ee4:	db05      	blt.n	2ef2 <__swbuf_r+0x4a>
    2ee6:	0021      	movs	r1, r4
    2ee8:	0028      	movs	r0, r5
    2eea:	f7ff fa97 	bl	241c <_fflush_r>
    2eee:	2800      	cmp	r0, #0
    2ef0:	d126      	bne.n	2f40 <__swbuf_r+0x98>
    2ef2:	68a3      	ldr	r3, [r4, #8]
    2ef4:	3001      	adds	r0, #1
    2ef6:	3b01      	subs	r3, #1
    2ef8:	60a3      	str	r3, [r4, #8]
    2efa:	6823      	ldr	r3, [r4, #0]
    2efc:	1c5a      	adds	r2, r3, #1
    2efe:	6022      	str	r2, [r4, #0]
    2f00:	701f      	strb	r7, [r3, #0]
    2f02:	6963      	ldr	r3, [r4, #20]
    2f04:	4298      	cmp	r0, r3
    2f06:	d004      	beq.n	2f12 <__swbuf_r+0x6a>
    2f08:	89a3      	ldrh	r3, [r4, #12]
    2f0a:	07db      	lsls	r3, r3, #31
    2f0c:	d51a      	bpl.n	2f44 <__swbuf_r+0x9c>
    2f0e:	2e0a      	cmp	r6, #10
    2f10:	d118      	bne.n	2f44 <__swbuf_r+0x9c>
    2f12:	0021      	movs	r1, r4
    2f14:	0028      	movs	r0, r5
    2f16:	f7ff fa81 	bl	241c <_fflush_r>
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d012      	beq.n	2f44 <__swbuf_r+0x9c>
    2f1e:	e00f      	b.n	2f40 <__swbuf_r+0x98>
    2f20:	4b0a      	ldr	r3, [pc, #40]	; (2f4c <__swbuf_r+0xa4>)
    2f22:	429c      	cmp	r4, r3
    2f24:	d101      	bne.n	2f2a <__swbuf_r+0x82>
    2f26:	68ac      	ldr	r4, [r5, #8]
    2f28:	e7cd      	b.n	2ec6 <__swbuf_r+0x1e>
    2f2a:	4b09      	ldr	r3, [pc, #36]	; (2f50 <__swbuf_r+0xa8>)
    2f2c:	429c      	cmp	r4, r3
    2f2e:	d1ca      	bne.n	2ec6 <__swbuf_r+0x1e>
    2f30:	68ec      	ldr	r4, [r5, #12]
    2f32:	e7c8      	b.n	2ec6 <__swbuf_r+0x1e>
    2f34:	0021      	movs	r1, r4
    2f36:	0028      	movs	r0, r5
    2f38:	f000 f820 	bl	2f7c <__swsetup_r>
    2f3c:	2800      	cmp	r0, #0
    2f3e:	d0ca      	beq.n	2ed6 <__swbuf_r+0x2e>
    2f40:	2601      	movs	r6, #1
    2f42:	4276      	negs	r6, r6
    2f44:	0030      	movs	r0, r6
    2f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f48:	000031d4 	.word	0x000031d4
    2f4c:	000031f4 	.word	0x000031f4
    2f50:	000031b4 	.word	0x000031b4

00002f54 <_write_r>:
    2f54:	b570      	push	{r4, r5, r6, lr}
    2f56:	0005      	movs	r5, r0
    2f58:	0008      	movs	r0, r1
    2f5a:	0011      	movs	r1, r2
    2f5c:	2200      	movs	r2, #0
    2f5e:	4c06      	ldr	r4, [pc, #24]	; (2f78 <_write_r+0x24>)
    2f60:	6022      	str	r2, [r4, #0]
    2f62:	001a      	movs	r2, r3
    2f64:	f7fe fd6a 	bl	1a3c <_write>
    2f68:	1c43      	adds	r3, r0, #1
    2f6a:	d103      	bne.n	2f74 <_write_r+0x20>
    2f6c:	6823      	ldr	r3, [r4, #0]
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d000      	beq.n	2f74 <_write_r+0x20>
    2f72:	602b      	str	r3, [r5, #0]
    2f74:	bd70      	pop	{r4, r5, r6, pc}
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	20000178 	.word	0x20000178

00002f7c <__swsetup_r>:
    2f7c:	4b36      	ldr	r3, [pc, #216]	; (3058 <__swsetup_r+0xdc>)
    2f7e:	b570      	push	{r4, r5, r6, lr}
    2f80:	681d      	ldr	r5, [r3, #0]
    2f82:	0006      	movs	r6, r0
    2f84:	000c      	movs	r4, r1
    2f86:	2d00      	cmp	r5, #0
    2f88:	d005      	beq.n	2f96 <__swsetup_r+0x1a>
    2f8a:	69ab      	ldr	r3, [r5, #24]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d102      	bne.n	2f96 <__swsetup_r+0x1a>
    2f90:	0028      	movs	r0, r5
    2f92:	f7ff fab1 	bl	24f8 <__sinit>
    2f96:	4b31      	ldr	r3, [pc, #196]	; (305c <__swsetup_r+0xe0>)
    2f98:	429c      	cmp	r4, r3
    2f9a:	d10f      	bne.n	2fbc <__swsetup_r+0x40>
    2f9c:	686c      	ldr	r4, [r5, #4]
    2f9e:	230c      	movs	r3, #12
    2fa0:	5ee2      	ldrsh	r2, [r4, r3]
    2fa2:	b293      	uxth	r3, r2
    2fa4:	0719      	lsls	r1, r3, #28
    2fa6:	d42d      	bmi.n	3004 <__swsetup_r+0x88>
    2fa8:	06d9      	lsls	r1, r3, #27
    2faa:	d411      	bmi.n	2fd0 <__swsetup_r+0x54>
    2fac:	2309      	movs	r3, #9
    2fae:	2001      	movs	r0, #1
    2fb0:	6033      	str	r3, [r6, #0]
    2fb2:	3337      	adds	r3, #55	; 0x37
    2fb4:	4313      	orrs	r3, r2
    2fb6:	81a3      	strh	r3, [r4, #12]
    2fb8:	4240      	negs	r0, r0
    2fba:	bd70      	pop	{r4, r5, r6, pc}
    2fbc:	4b28      	ldr	r3, [pc, #160]	; (3060 <__swsetup_r+0xe4>)
    2fbe:	429c      	cmp	r4, r3
    2fc0:	d101      	bne.n	2fc6 <__swsetup_r+0x4a>
    2fc2:	68ac      	ldr	r4, [r5, #8]
    2fc4:	e7eb      	b.n	2f9e <__swsetup_r+0x22>
    2fc6:	4b27      	ldr	r3, [pc, #156]	; (3064 <__swsetup_r+0xe8>)
    2fc8:	429c      	cmp	r4, r3
    2fca:	d1e8      	bne.n	2f9e <__swsetup_r+0x22>
    2fcc:	68ec      	ldr	r4, [r5, #12]
    2fce:	e7e6      	b.n	2f9e <__swsetup_r+0x22>
    2fd0:	075b      	lsls	r3, r3, #29
    2fd2:	d513      	bpl.n	2ffc <__swsetup_r+0x80>
    2fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2fd6:	2900      	cmp	r1, #0
    2fd8:	d008      	beq.n	2fec <__swsetup_r+0x70>
    2fda:	0023      	movs	r3, r4
    2fdc:	3344      	adds	r3, #68	; 0x44
    2fde:	4299      	cmp	r1, r3
    2fe0:	d002      	beq.n	2fe8 <__swsetup_r+0x6c>
    2fe2:	0030      	movs	r0, r6
    2fe4:	f7ff fb8e 	bl	2704 <_free_r>
    2fe8:	2300      	movs	r3, #0
    2fea:	6363      	str	r3, [r4, #52]	; 0x34
    2fec:	2224      	movs	r2, #36	; 0x24
    2fee:	89a3      	ldrh	r3, [r4, #12]
    2ff0:	4393      	bics	r3, r2
    2ff2:	81a3      	strh	r3, [r4, #12]
    2ff4:	2300      	movs	r3, #0
    2ff6:	6063      	str	r3, [r4, #4]
    2ff8:	6923      	ldr	r3, [r4, #16]
    2ffa:	6023      	str	r3, [r4, #0]
    2ffc:	2308      	movs	r3, #8
    2ffe:	89a2      	ldrh	r2, [r4, #12]
    3000:	4313      	orrs	r3, r2
    3002:	81a3      	strh	r3, [r4, #12]
    3004:	6923      	ldr	r3, [r4, #16]
    3006:	2b00      	cmp	r3, #0
    3008:	d10b      	bne.n	3022 <__swsetup_r+0xa6>
    300a:	21a0      	movs	r1, #160	; 0xa0
    300c:	2280      	movs	r2, #128	; 0x80
    300e:	89a3      	ldrh	r3, [r4, #12]
    3010:	0089      	lsls	r1, r1, #2
    3012:	0092      	lsls	r2, r2, #2
    3014:	400b      	ands	r3, r1
    3016:	4293      	cmp	r3, r2
    3018:	d003      	beq.n	3022 <__swsetup_r+0xa6>
    301a:	0021      	movs	r1, r4
    301c:	0030      	movs	r0, r6
    301e:	f7ff fb29 	bl	2674 <__smakebuf_r>
    3022:	2301      	movs	r3, #1
    3024:	89a2      	ldrh	r2, [r4, #12]
    3026:	4013      	ands	r3, r2
    3028:	d011      	beq.n	304e <__swsetup_r+0xd2>
    302a:	2300      	movs	r3, #0
    302c:	60a3      	str	r3, [r4, #8]
    302e:	6963      	ldr	r3, [r4, #20]
    3030:	425b      	negs	r3, r3
    3032:	61a3      	str	r3, [r4, #24]
    3034:	2000      	movs	r0, #0
    3036:	6923      	ldr	r3, [r4, #16]
    3038:	4283      	cmp	r3, r0
    303a:	d1be      	bne.n	2fba <__swsetup_r+0x3e>
    303c:	230c      	movs	r3, #12
    303e:	5ee2      	ldrsh	r2, [r4, r3]
    3040:	0613      	lsls	r3, r2, #24
    3042:	d5ba      	bpl.n	2fba <__swsetup_r+0x3e>
    3044:	2340      	movs	r3, #64	; 0x40
    3046:	4313      	orrs	r3, r2
    3048:	81a3      	strh	r3, [r4, #12]
    304a:	3801      	subs	r0, #1
    304c:	e7b5      	b.n	2fba <__swsetup_r+0x3e>
    304e:	0792      	lsls	r2, r2, #30
    3050:	d400      	bmi.n	3054 <__swsetup_r+0xd8>
    3052:	6963      	ldr	r3, [r4, #20]
    3054:	60a3      	str	r3, [r4, #8]
    3056:	e7ed      	b.n	3034 <__swsetup_r+0xb8>
    3058:	2000000c 	.word	0x2000000c
    305c:	000031d4 	.word	0x000031d4
    3060:	000031f4 	.word	0x000031f4
    3064:	000031b4 	.word	0x000031b4

00003068 <_close_r>:
    3068:	2300      	movs	r3, #0
    306a:	b570      	push	{r4, r5, r6, lr}
    306c:	4c06      	ldr	r4, [pc, #24]	; (3088 <_close_r+0x20>)
    306e:	0005      	movs	r5, r0
    3070:	0008      	movs	r0, r1
    3072:	6023      	str	r3, [r4, #0]
    3074:	f7fe fd1c 	bl	1ab0 <_close>
    3078:	1c43      	adds	r3, r0, #1
    307a:	d103      	bne.n	3084 <_close_r+0x1c>
    307c:	6823      	ldr	r3, [r4, #0]
    307e:	2b00      	cmp	r3, #0
    3080:	d000      	beq.n	3084 <_close_r+0x1c>
    3082:	602b      	str	r3, [r5, #0]
    3084:	bd70      	pop	{r4, r5, r6, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	20000178 	.word	0x20000178

0000308c <_fstat_r>:
    308c:	2300      	movs	r3, #0
    308e:	b570      	push	{r4, r5, r6, lr}
    3090:	4c06      	ldr	r4, [pc, #24]	; (30ac <_fstat_r+0x20>)
    3092:	0005      	movs	r5, r0
    3094:	0008      	movs	r0, r1
    3096:	0011      	movs	r1, r2
    3098:	6023      	str	r3, [r4, #0]
    309a:	f7fe fd0c 	bl	1ab6 <_fstat>
    309e:	1c43      	adds	r3, r0, #1
    30a0:	d103      	bne.n	30aa <_fstat_r+0x1e>
    30a2:	6823      	ldr	r3, [r4, #0]
    30a4:	2b00      	cmp	r3, #0
    30a6:	d000      	beq.n	30aa <_fstat_r+0x1e>
    30a8:	602b      	str	r3, [r5, #0]
    30aa:	bd70      	pop	{r4, r5, r6, pc}
    30ac:	20000178 	.word	0x20000178

000030b0 <_isatty_r>:
    30b0:	2300      	movs	r3, #0
    30b2:	b570      	push	{r4, r5, r6, lr}
    30b4:	4c06      	ldr	r4, [pc, #24]	; (30d0 <_isatty_r+0x20>)
    30b6:	0005      	movs	r5, r0
    30b8:	0008      	movs	r0, r1
    30ba:	6023      	str	r3, [r4, #0]
    30bc:	f7fe fd00 	bl	1ac0 <_isatty>
    30c0:	1c43      	adds	r3, r0, #1
    30c2:	d103      	bne.n	30cc <_isatty_r+0x1c>
    30c4:	6823      	ldr	r3, [r4, #0]
    30c6:	2b00      	cmp	r3, #0
    30c8:	d000      	beq.n	30cc <_isatty_r+0x1c>
    30ca:	602b      	str	r3, [r5, #0]
    30cc:	bd70      	pop	{r4, r5, r6, pc}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	20000178 	.word	0x20000178

000030d4 <_lseek_r>:
    30d4:	b570      	push	{r4, r5, r6, lr}
    30d6:	0005      	movs	r5, r0
    30d8:	0008      	movs	r0, r1
    30da:	0011      	movs	r1, r2
    30dc:	2200      	movs	r2, #0
    30de:	4c06      	ldr	r4, [pc, #24]	; (30f8 <_lseek_r+0x24>)
    30e0:	6022      	str	r2, [r4, #0]
    30e2:	001a      	movs	r2, r3
    30e4:	f7fe fcee 	bl	1ac4 <_lseek>
    30e8:	1c43      	adds	r3, r0, #1
    30ea:	d103      	bne.n	30f4 <_lseek_r+0x20>
    30ec:	6823      	ldr	r3, [r4, #0]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d000      	beq.n	30f4 <_lseek_r+0x20>
    30f2:	602b      	str	r3, [r5, #0]
    30f4:	bd70      	pop	{r4, r5, r6, pc}
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	20000178 	.word	0x20000178

000030fc <memchr>:
    30fc:	b2c9      	uxtb	r1, r1
    30fe:	1882      	adds	r2, r0, r2
    3100:	4290      	cmp	r0, r2
    3102:	d101      	bne.n	3108 <memchr+0xc>
    3104:	2000      	movs	r0, #0
    3106:	4770      	bx	lr
    3108:	7803      	ldrb	r3, [r0, #0]
    310a:	428b      	cmp	r3, r1
    310c:	d0fb      	beq.n	3106 <memchr+0xa>
    310e:	3001      	adds	r0, #1
    3110:	e7f6      	b.n	3100 <memchr+0x4>

00003112 <__malloc_lock>:
    3112:	4770      	bx	lr

00003114 <__malloc_unlock>:
    3114:	4770      	bx	lr
	...

00003118 <_read_r>:
    3118:	b570      	push	{r4, r5, r6, lr}
    311a:	0005      	movs	r5, r0
    311c:	0008      	movs	r0, r1
    311e:	0011      	movs	r1, r2
    3120:	2200      	movs	r2, #0
    3122:	4c06      	ldr	r4, [pc, #24]	; (313c <_read_r+0x24>)
    3124:	6022      	str	r2, [r4, #0]
    3126:	001a      	movs	r2, r3
    3128:	f7fe fc66 	bl	19f8 <_read>
    312c:	1c43      	adds	r3, r0, #1
    312e:	d103      	bne.n	3138 <_read_r+0x20>
    3130:	6823      	ldr	r3, [r4, #0]
    3132:	2b00      	cmp	r3, #0
    3134:	d000      	beq.n	3138 <_read_r+0x20>
    3136:	602b      	str	r3, [r5, #0]
    3138:	bd70      	pop	{r4, r5, r6, pc}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	20000178 	.word	0x20000178
    3140:	42000800 	.word	0x42000800
    3144:	42000c00 	.word	0x42000c00
    3148:	42001000 	.word	0x42001000
    314c:	42001400 	.word	0x42001400
    3150:	42001800 	.word	0x42001800
    3154:	42001c00 	.word	0x42001c00
    3158:	00001386 	.word	0x00001386
    315c:	00001382 	.word	0x00001382
    3160:	00001382 	.word	0x00001382
    3164:	000013e4 	.word	0x000013e4
    3168:	000013e4 	.word	0x000013e4
    316c:	0000139a 	.word	0x0000139a
    3170:	0000138c 	.word	0x0000138c
    3174:	000013a0 	.word	0x000013a0
    3178:	000013d2 	.word	0x000013d2
    317c:	0000146c 	.word	0x0000146c
    3180:	0000144c 	.word	0x0000144c
    3184:	0000144c 	.word	0x0000144c
    3188:	000014d8 	.word	0x000014d8
    318c:	0000145e 	.word	0x0000145e
    3190:	0000147a 	.word	0x0000147a
    3194:	00001450 	.word	0x00001450
    3198:	00001488 	.word	0x00001488
    319c:	000014c8 	.word	0x000014c8
    31a0:	206b6341 	.word	0x206b6341
    31a4:	203a7461 	.word	0x203a7461
    31a8:	0d0a7825 	.word	0x0d0a7825
    31ac:	00000000 	.word	0x00000000

000031b0 <_global_impure_ptr>:
    31b0:	20000010                                ... 

000031b4 <__sf_fake_stderr>:
	...

000031d4 <__sf_fake_stdin>:
	...

000031f4 <__sf_fake_stdout>:
	...
    3214:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3224:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3234:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3244:	00006665                                ef..

00003248 <_init>:
    3248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    324e:	bc08      	pop	{r3}
    3250:	469e      	mov	lr, r3
    3252:	4770      	bx	lr

00003254 <__init_array_start>:
    3254:	000000dd 	.word	0x000000dd

00003258 <_fini>:
    3258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    325e:	bc08      	pop	{r3}
    3260:	469e      	mov	lr, r3
    3262:	4770      	bx	lr

00003264 <__fini_array_start>:
    3264:	000000b5 	.word	0x000000b5
